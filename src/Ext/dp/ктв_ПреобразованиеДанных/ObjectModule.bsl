#Область ПреобразованияОбъектовСлужебные

// Возвращает структуру, содержащую информацию
// о переданном виде объектов метаданных
//
// Параметры:
//  Имя					- Строка		- Имя вида объектов метаданных (например, константа,
//										  ПланСчетов и т.п.), может передаваться в ед. мн. числе
//  ТекИБ				- COMОбъект,	- Информационная база, из которой будет получена информация
//										  о виде объектов, Неопределено - текущая инф. база
//
// Возвращаемое значение:
//   Структура			- Содержимое:
//							Коллекция		- Менеджер вида объектов (например, СправочникиМенеджер)
//							МетаКоллекция	- Коллекция метаданных вида объектов (например, Справочники)
//							Имя				- Имя вида объектов (например, "ПланСчетов")
//							ИмяКоллекции	- Имя коллекции вида объектов (например,  "ПланыСчетов")
//							Представление	- Представление вида объектов (например, "План счетов")
//							ПредставлениеМ	- Представление коллекции вида объектов (например,  "Планы счетов")
//							ИмяТипа			- Имя типа (конкретный элемент, например, Контрагенты)
//							Картинка		- Картинка коллекции по умолчанию 
//							КартинкаОбъекта - Картинка объекта коллекции по умолчанию 
//							Конструктор		- Имя функции конструктора экземпляра объекта (например: СоздатьЭлемент)
//							КонструкторАльт - Имя альтернативной функции конструктора экземпляра объекта (например: СоздатьГруппу) 
//
Функция ПолучитьОписаниеВидаОбъектов(Имя, ТекИБ = Неопределено) Экспорт
	
	ВремСтруктураВида = Новый Структура("Коллекция,
										|МетаКоллекция,
										|Имя,
										|ИмяКоллекции,
										|Представление,
										|ПредставлениеМ,
										|ИмяТипа,
										|Картинка,
										|КартинкаОбъекта,
										|Конструктор,
										|КонструкторАльт");
	
	Если ТипЗнч(Имя) = Тип("Тип") Тогда
		МетаданныеТипа = Метаданные.НайтиПоТипу(Имя);
		ИмяТипа = МетаданныеТипа.ПолноеИмя();
		ПозТчк = Найти(ИмяТипа, ".");
		НИмя = НРег(Лев(ИмяТипа, ПозТчк - 1));
		ВремСтруктураВида.ИмяТипа = НРег(Сред(ИмяТипа, ПозТчк + 1));
	ИначеЕсли ТипЗнч(Имя) = Тип("Строка") Тогда
		Если Найти(Имя, ".") > 0 Тогда
			ПозТчк = Найти(Имя, ".");
			НИмя = НРег(Лев(Имя, ПозТчк - 1));
			ВремСтруктураВида.ИмяТипа = НРег(Лев(Имя, ПозТчк + 1));
		Иначе
			НИмя = НРег(СтрЗаменить(СтрЗаменить(Имя, "-", ""), " ", ""));
			ВремСтруктураВида.ИмяТипа = "";
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если НИмя = "константы" ИЛИ НИмя = "константа" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, Константы, ТекИБ.Константы);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.Константы, ТекИБ.Метаданные.Константы);
		ВремСтруктураВида.Имя			= "Константа";
		ВремСтруктураВида.ИмяКоллекции	= "Константы";
		ВремСтруктураВида.Представление	= "Константа";
		ВремСтруктураВида.ПредставлениеМ= "Константы";
		ВремСтруктураВида.Конструктор		= Неопределено;
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.Константа;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.Константа;
		#КонецЕсли
	ИначеЕсли НИмя = "справочники" ИЛИ НИмя = "справочник" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, Справочники, ТекИБ.Справочники);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.Справочники, ТекИБ.Метаданные.Справочники);
		ВремСтруктураВида.Имя			= "Справочник";
		ВремСтруктураВида.ИмяКоллекции	= "Справочники";
		ВремСтруктураВида.Представление	= "Справочник";
		ВремСтруктураВида.ПредставлениеМ= "Справочники";
		ВремСтруктураВида.Конструктор		= "СоздатьЭлемент";
		ВремСтруктураВида.КонструкторАльт	= "СоздатьГруппу";
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.Справочник;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.СправочникОбъект;
		#КонецЕсли
	ИначеЕсли НИмя = "документы" ИЛИ НИмя = "документ" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, Документы, ТекИБ.Документы);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.Документы, ТекИБ.Метаданные.Документы);
		ВремСтруктураВида.Имя			= "Документ";
		ВремСтруктураВида.ИмяКоллекции	= "Документы";
		ВремСтруктураВида.Представление	= "Документ";
		ВремСтруктураВида.ПредставлениеМ= "Документы";
		ВремСтруктураВида.Конструктор		= "СоздатьДокумент";
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.Документ;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.ДокументОбъект;
		#КонецЕсли
	ИначеЕсли НИмя = "журналыдокументов" ИЛИ НИмя = "журналдокументов" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, ЖурналыДокументов, ТекИБ.ЖурналыДокументов);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.ЖурналыДокументов, ТекИБ.Метаданные.ЖурналыДокументов);
		ВремСтруктураВида.Имя			= "ЖурналДокументов";
		ВремСтруктураВида.ИмяКоллекции	= "ЖурналыДокументов";
		ВремСтруктураВида.Представление	= "Журнал документов";
		ВремСтруктураВида.ПредставлениеМ= "Журналы документов";
		ВремСтруктураВида.Конструктор		= Неопределено;
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.ЖурналДокументов;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.ЖурналДокументов;
		#КонецЕсли
	ИначеЕсли НИмя = "планывидовхарактеристик" ИЛИ НИмя = "планвидовхарактеристик" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, ПланыВидовХарактеристик, ТекИБ.ПланыВидовХарактеристик);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.ПланыВидовХарактеристик, ТекИБ.Метаданные.ПланыВидовХарактеристик);
		ВремСтруктураВида.Имя			= "ПланВидовХарактеристик";
		ВремСтруктураВида.ИмяКоллекции	= "ПланыВидовХарактеристик";
		ВремСтруктураВида.Представление	= "План видов характеристик";
		ВремСтруктураВида.ПредставлениеМ= "Планы видов характеристик";
		ВремСтруктураВида.Конструктор		= "СоздатьЭлемент";
		ВремСтруктураВида.КонструкторАльт	= "СоздатьГруппу";
		#Если Клиент Тогда
		Попытка
			//бит_DFedotov: поставил в попытку, т.к. если использовать обработку как внешнюю, то картинок начинающихся на стд_ - нет
			//	в стандратной библиотеке картинок
			ВремСтруктураВида.Картинка		= БиблиотекаКартинок.стд_ПланыВидовХарактеристик;
		Исключение
			ВремСтруктураВида.Картинка		= БиблиотекаКартинок.ПланВидовХарактеристик;
		КонецПопытки;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.ПланВидовХарактеристик;
		#КонецЕсли
	ИначеЕсли НИмя = "планысчетов" ИЛИ НИмя = "плансчетов" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, ПланыСчетов, ТекИБ.ПланыСчетов);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.ПланыСчетов, ТекИБ.Метаданные.ПланыСчетов);
		ВремСтруктураВида.Имя			= "ПланСчетов";
		ВремСтруктураВида.ИмяКоллекции	= "ПланыСчетов";
		ВремСтруктураВида.Представление	= "План счетов";
		ВремСтруктураВида.ПредставлениеМ= "Планы счетов";
		ВремСтруктураВида.Конструктор		= "СоздатьСчет";
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		Попытка
			ВремСтруктураВида.Картинка		= БиблиотекаКартинок.стд_ПланыСчетов;
		Исключение
			ВремСтруктураВида.Картинка		= БиблиотекаКартинок.ПланСчетов;
		КонецПопытки;	
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.ПланСчетов;
		#КонецЕсли
	ИначеЕсли НИмя = "планывидоврасчета" ИЛИ НИмя = "планвидоврасчета" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, ПланыВидовРасчета, ТекИБ.ПланыВидовРасчета);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.ПланыВидовРасчета, ТекИБ.Метаданные.ПланыВидовРасчета);
		ВремСтруктураВида.Имя			= "ПланВидовРасчета";
		ВремСтруктураВида.ИмяКоллекции	= "ПланыВидовРасчета";
		ВремСтруктураВида.Представление	= "План видов расчета";
		ВремСтруктураВида.ПредставлениеМ= "Планы видов расчета";
		ВремСтруктураВида.Конструктор		= "СоздатьВидРасчета";
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		Попытка
			ВремСтруктураВида.Картинка		= БиблиотекаКартинок.стд_ПланыВидовРасчета;
		Исключение
			ВремСтруктураВида.Картинка		= БиблиотекаКартинок.ПланВидовРасчета;
		КонецПопытки;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.ПланВидовРасчета;
		#КонецЕсли
	ИначеЕсли НИмя = "перечисления" ИЛИ НИмя = "перечисление" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, Перечисления, ТекИБ.Перечисления);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.Перечисления, ТекИБ.Метаданные.Перечисления);
		ВремСтруктураВида.Имя			= "Перечисление";
		ВремСтруктураВида.ИмяКоллекции	= "Перечисления";
		ВремСтруктураВида.Представление	= "Перечисление";
		ВремСтруктураВида.ПредставлениеМ= "Перечисления";
		ВремСтруктураВида.Конструктор		= Неопределено;
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.Перечисление;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.Перечисление;
		#КонецЕсли
	ИначеЕсли НИмя = "регистрысведений" ИЛИ НИмя = "регистрсведений" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, РегистрыСведений, ТекИБ.РегистрыСведений);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.РегистрыСведений, ТекИБ.Метаданные.РегистрыСведений);
		ВремСтруктураВида.Имя			= "РегистрСведений";
		ВремСтруктураВида.ИмяКоллекции	= "РегистрыСведений";
		ВремСтруктураВида.Представление	= "Регистр сведений";
		ВремСтруктураВида.ПредставлениеМ= "Регистры сведений";
		ВремСтруктураВида.Конструктор		= "СоздатьНаборЗаписей";
		ВремСтруктураВида.КонструкторАльт	= "СоздатьМенеджерЗаписи";
		#Если Клиент Тогда
		Попытка
			ВремСтруктураВида.Картинка		= БиблиотекаКартинок.стд_РегистрыСведений;
		Исключение
			ВремСтруктураВида.Картинка		= БиблиотекаКартинок.РегистрСведений;
		КонецПопытки;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.РегистрСведений;
		#КонецЕсли
	ИначеЕсли НИмя = "регистрынакопления" ИЛИ НИмя = "регистрнакопления" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, РегистрыНакопления, ТекИБ.РегистрыНакопления);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.РегистрыНакопления, ТекИБ.Метаданные.РегистрыНакопления);
		ВремСтруктураВида.Имя			= "РегистрНакопления";
		ВремСтруктураВида.ИмяКоллекции	= "РегистрыНакопления";
		ВремСтруктураВида.Представление	= "Регистр накопления";
		ВремСтруктураВида.ПредставлениеМ= "Регистры накопления";
		ВремСтруктураВида.Конструктор		= "СоздатьНаборЗаписей";
		ВремСтруктураВида.КонструкторАльт	= "СоздатьМенеджерЗаписи";
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.РегистрНакопления;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.РегистрНакопления;
		#КонецЕсли
	ИначеЕсли НИмя = "регистрыбухгалтерии" ИЛИ НИмя = "регистрбухгалтерии" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, РегистрыБухгалтерии, ТекИБ.РегистрыБухгалтерии);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.РегистрыБухгалтерии, ТекИБ.Метаданные.РегистрыБухгалтерии);
		ВремСтруктураВида.Имя			= "РегистрБухгалтерии";
		ВремСтруктураВида.ИмяКоллекции	= "РегистрыБухгалтерии";
		ВремСтруктураВида.Представление	= "Регистр бухгалтерии";
		ВремСтруктураВида.ПредставлениеМ= "Регистры бухгалтерии";
		ВремСтруктураВида.Конструктор		= "СоздатьНаборЗаписей";
		ВремСтруктураВида.КонструкторАльт	= "СоздатьМенеджерЗаписи";
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.РегистрБухгалтерии;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.РегистрБухгалтерии;
		#КонецЕсли
	ИначеЕсли НИмя = "регистрырасчета" ИЛИ НИмя = "регистррасчета" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, РегистрыРасчета, ТекИБ.РегистрыРасчета);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.РегистрыРасчета, ТекИБ.Метаданные.РегистрыРасчета);
		ВремСтруктураВида.Имя			= "РегистрРасчета";
		ВремСтруктураВида.ИмяКоллекции	= "РегистрыРасчета";
		ВремСтруктураВида.Представление	= "Регистр расчета";
		ВремСтруктураВида.ПредставлениеМ= "Регистры расчета";
		ВремСтруктураВида.Конструктор		= "СоздатьНаборЗаписей";
		ВремСтруктураВида.КонструкторАльт	= "СоздатьМенеджерЗаписи";
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.РегистрРасчета;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.РегистрРасчета;
		#КонецЕсли
	ИначеЕсли НИмя = "отчеты" ИЛИ НИмя = "отчет" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, Отчеты, ТекИБ.Отчеты);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.Отчеты, ТекИБ.Метаданные.Отчеты);
		ВремСтруктураВида.Имя			= "Отчет";
		ВремСтруктураВида.ИмяКоллекции	= "Отчеты";
		ВремСтруктураВида.Представление	= "Отчет";
		ВремСтруктураВида.ПредставлениеМ= "Отчеты";
		ВремСтруктураВида.Конструктор		= "Создать";
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.Отчет;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.Отчет;
		#КонецЕсли
	ИначеЕсли НИмя = "обработки" ИЛИ НИмя = "обработка" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, Обработки, ТекИБ.Обработки);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.Обработки, ТекИБ.Метаданные.Обработки);
		ВремСтруктураВида.Имя			= "Обработка";
		ВремСтруктураВида.ИмяКоллекции	= "Обработки";
		ВремСтруктураВида.Представление	= "Обработка";
		ВремСтруктураВида.ПредставлениеМ= "Обработки";
		ВремСтруктураВида.Конструктор		= "Создать";
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.Обработка;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.Обработка;
		#КонецЕсли
	ИначеЕсли НИмя = "бизнеспроцессы" ИЛИ НИмя = "бизнеспроцесс" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, БизнесПроцессы, ТекИБ.БизнесПроцессы);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.БизнесПроцессы, ТекИБ.Метаданные.БизнесПроцессы);
		ВремСтруктураВида.Имя			= "БизнесПроцесс";
		ВремСтруктураВида.ИмяКоллекции	= "БизнесПроцессы";
		ВремСтруктураВида.Представление	= "Бизнес-процесс";
		ВремСтруктураВида.ПредставлениеМ= "Бизнес-процессы";
		ВремСтруктураВида.Конструктор		= "СоздатьБизнесПроцесс";
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.БизнесПроцесс;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.БизнесПроцессОбъект;
		#КонецЕсли
	ИначеЕсли НИмя = "задачи" ИЛИ НИмя = "задача" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, Задачи, ТекИБ.Задачи);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.Задачи, ТекИБ.Метаданные.Задачи);
		ВремСтруктураВида.Имя			= "Задача";
		ВремСтруктураВида.ИмяКоллекции	= "Задачи";
		ВремСтруктураВида.Представление	= "Задача";
		ВремСтруктураВида.ПредставлениеМ= "Задачи";
		ВремСтруктураВида.Конструктор		= "СоздатьЗадачу";
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.Задача;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.ЗадачаОбъект;
		#КонецЕсли
	ИначеЕсли НИмя = "планыобмена" ИЛИ НИмя = "планобмена" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, ПланыОбмена, ТекИБ.ПланыОбмена);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.ПланыОбмена, ТекИБ.Метаданные.ПланыОбмена);
		ВремСтруктураВида.Имя			= "ПланОбмена";
		ВремСтруктураВида.ИмяКоллекции	= "ПланыОбмена";
		ВремСтруктураВида.Представление	= "План обмена";
		ВремСтруктураВида.ПредставлениеМ= "Планы обмена";
		ВремСтруктураВида.Конструктор		= "СоздатьУзел";
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		Попытка
			ВремСтруктураВида.Картинка		= БиблиотекаКартинок.стд_ПланыОбмена;
		Исключение
			ВремСтруктураВида.Картинка		= БиблиотекаКартинок.ПланОбмена;
		КонецПопытки;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.ПланОбмена;
		#КонецЕсли
	ИначеЕсли НИмя = "общиеформы" ИЛИ НИмя = "общаяформа" Тогда
		ВремСтруктураВида.Коллекция		= Неопределено;
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.ОбщиеФормы, ТекИБ.Метаданные.ОбщиеФормы);
		ВремСтруктураВида.Имя			= "ОбщаяФорма";
		ВремСтруктураВида.ИмяКоллекции	= "ОбщиеФормы";
		ВремСтруктураВида.Представление	= "Общая форма";
		ВремСтруктураВида.ПредставлениеМ= "Общие формы";
		ВремСтруктураВида.Конструктор		= Неопределено;
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.РедактироватьВДиалоге;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.РедактироватьВДиалоге;
		#КонецЕсли
	ИначеЕсли НИмя = "регламентныезадания" ИЛИ НИмя = "регламентноезадание" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, РегламентныеЗадания, ТекИБ.РегламентныеЗадания);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.РегламентныеЗадания, ТекИБ.Метаданные.РегламентныеЗадания);
		ВремСтруктураВида.Имя			= "РегламентноеЗадание";
		ВремСтруктураВида.ИмяКоллекции	= "РегламентныеЗадания";
		ВремСтруктураВида.Представление	= "Регламентное задание";
		ВремСтруктураВида.ПредставлениеМ= "Регламентные задания";
		ВремСтруктураВида.Конструктор		= "СоздатьРегламентноеЗадание()";
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.РегламентныеЗадания;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.РегламентноеЗадание;
		#КонецЕсли
	ИначеЕсли НИмя = "роли" ИЛИ НИмя = "роль" Тогда
		ВремСтруктураВида.Коллекция		= Неопределено;
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.Роли, ТекИБ.Метаданные.Роли);
		ВремСтруктураВида.Имя			= "Роль";
		ВремСтруктураВида.ИмяКоллекции	= "Роли";
		ВремСтруктураВида.Представление	= "Роль";
		ВремСтруктураВида.ПредставлениеМ= "Роли";
		ВремСтруктураВида.Конструктор		= Неопределено;
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.ПользовательБезНеобходимыхСвойств;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.ПользовательБезНеобходимыхСвойств;
		#КонецЕсли
	ИначеЕсли НИмя = "интерфейсы" ИЛИ НИмя = "интерфейс" Тогда
		ВремСтруктураВида.Коллекция		= Неопределено;
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.Интерфейсы, ТекИБ.Метаданные.Интерфейсы);
		ВремСтруктураВида.Имя			= "Интерфейс";
		ВремСтруктураВида.ИмяКоллекции	= "Интерфейсы";
		ВремСтруктураВида.Представление	= "Интерфейс";
		ВремСтруктураВида.ПредставлениеМ= "Интерфейсы";
		ВремСтруктураВида.Конструктор		= Неопределено;
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.НастройкаСписка;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.НастройкаСписка;
		#КонецЕсли
	КонецЕсли;
	
	Возврат ВремСтруктураВида;
	
КонецФункции //ПолучитьОписаниеВидаОбъектов()

Функция ПолучитьИмяПредопределенныхДанных(Значение) Экспорт
	
	ИмяПредопределенныхДанных = "";
	
	МетаданныеЗначения = Значение.Метаданные();
	
	Текст83 = "Если Метаданные.Справочники.Содержит(МетаданныеЗначения)
			  | ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеЗначения)
			  | ИЛИ Метаданные.ПланыСчетов.Содержит(МетаданныеЗначения)
			  | ИЛИ Метаданные.ПланыВидовРасчета.Содержит(МетаданныеЗначения) Тогда
			  |    Если Значение.Предопределенный Тогда
			  |        ИмяПредопределенныхДанных = Значение.ИмяПредопределенныхДанных;
			  |    КонецЕсли;
			  |КонецЕсли;";
	
	Текст82 = "Если Значение.Предопределенный Тогда
			  |    Если Метаданные.Справочники.Содержит(МетаданныеЗначения) Тогда
			  |        ИмяПредопределенныхДанных = Справочники[МетаданныеЗначения.Имя].ПолучитьИмяПредопределенного(Значение);
			  |    ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеЗначения) Тогда
			  |        ИмяПредопределенныхДанных = ПланыВидовХарактеристик[МетаданныеЗначения.Имя].ПолучитьИмяПредопределенного(Значение);
			  |    ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеЗначения) Тогда
			  |        ИмяПредопределенныхДанных = ПланыСчетов[МетаданныеЗначения.Имя].ПолучитьИмяПредопределенного(Значение);
			  |    ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеЗначения) Тогда
			  |        ИмяПредопределенныхДанных = ПланыВидовРасчета[МетаданныеЗначения.Имя].ПолучитьИмяПредопределенного(Значение);
			  |    КонецЕсли;
			  |КонецЕсли;";
	Если ЗначениеЗаполнено(Значение) Тогда
		Это83 = Истина;
		Попытка
			Выполнить(Текст83);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Это83 = Ложь;
		КонецПопытки;
		Если НЕ Это83 Тогда
			Попытка
				Выполнить(Текст82);
			Исключение
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
		
	Возврат ИмяПредопределенныхДанных;	
	
КонецФункции //ПолучитьИмяПредопределенныхДанных()
	
Функция ИспользоватьСвойство(Знач ИмяПоля, Знач СписокСвойств = Неопределено, Знач ИсключаяСвойства = Неопределено)
	
	Если ТипЗнч(СписокСвойств) = Тип("Строка") Тогда
		СписокСвойств = СтрРазделить(СписокСвойств, ",", Ложь);
	КонецЕсли;
	Если НЕ ТипЗнч(СписокСвойств) = Тип("Массив") Тогда
		СписокСвойств = Новый Массив();
	КонецЕсли;
	
	Если ТипЗнч(ИсключаяСвойства) = Тип("Строка") Тогда
		ИсключаяСвойства = СтрРазделить(ИсключаяСвойства, ",", Ложь);
	КонецЕсли;
	Если НЕ ТипЗнч(ИсключаяСвойства) = Тип("Массив") Тогда
		ИсключаяСвойства = Новый Массив();
	КонецЕсли;
	
	Если СписокСвойств.Количество() = 0 И ИсключаяСвойства.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ИсключаяСвойства.Найти(ИмяПоля) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (НЕ СписокСвойств.Найти(ИмяПоля) = Неопределено) ИЛИ СписокСвойств.Количество() = 0;
	
КонецФункции //ИспользоватьСвойство()

Функция ОписаниеТиповВСтруктуру(ОписаниеТипов) Экспорт
	
	СтруктураОписаниеТипов = Новый Структура("Типы,
											 |КвалификаторыЧисла,
											 |КвалификаторыСтроки,
											 |КвалификаторыДаты,
											 |КвалификаторыДвоичныхДанных"
										    , Новый Массив()
										    , Новый Структура("Разрядность, РазрядностьДробнойЧасти, ДопустимыйЗнак", 10, 0)
										    , Новый Структура("Длина, ДопустимаяДлина", 10, "Переменная")
										    , Новый Структура("ЧастиДаты", "ДатаВремя")
										    , Новый Структура("Длина, ДопустимаяДлина", 0, "Переменная"));
								   
	Для Каждого ТекТип Из ОписаниеТипов.Типы() Цикл
		МетаТип = Метаданные.НайтиПоТипу(ТекТип);
		Если НЕ МетаТип = Неопределено Тогда
			СтруктураОписаниеТипов.Типы.Добавить(МетаТип.ПолноеИмя());
		Иначе
			СтруктураОписаниеТипов.Типы.Добавить(СокрЛП(ТекТип));
		КонецЕсли;
	КонецЦикла;
	
	СтруктураОписаниеТипов.КвалификаторыЧисла.Разрядность				= ОписаниеТипов.КвалификаторыЧисла.Разрядность;
	СтруктураОписаниеТипов.КвалификаторыЧисла.РазрядностьДробнойЧасти	= ОписаниеТипов.КвалификаторыЧисла.РазрядностьДробнойЧасти;
	СтруктураОписаниеТипов.КвалификаторыЧисла.ДопустимыйЗнак			=
		?(ОписаниеТипов.КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Неотрицательный, "Неотрицательный", "Любой");
	
	СтруктураОписаниеТипов.КвалификаторыСтроки.Длина			= ОписаниеТипов.КвалификаторыСтроки.Длина;
	СтруктураОписаниеТипов.КвалификаторыСтроки.ДопустимаяДлина	=
		?(ОписаниеТипов.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Фиксированная, "Фиксированная", "Переменная");
	
	СтруктураОписаниеТипов.КвалификаторыДаты.ЧастиДаты	=
		?(ОписаниеТипов.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время,
		  "Время",
		  ?(ОписаниеТипов.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата, "Дата", "ДатаВремя"));
	
	СтруктураОписаниеТипов.КвалификаторыДвоичныхДанных.Длина			= ОписаниеТипов.КвалификаторыДвоичныхДанных.Длина;
	СтруктураОписаниеТипов.КвалификаторыДвоичныхДанных.ДопустимаяДлина	=
		?(ОписаниеТипов.КвалификаторыДвоичныхДанных.ДопустимаяДлина = ДопустимаяДлина.Фиксированная, "Фиксированная", "Переменная");
		
	Возврат СтруктураОписаниеТипов;
	
КонецФункции

Функция ОписаниеТиповИзСтруктуры(СтруктураОписаниеТипов) Экспорт
	
	МассивТипов = Новый Массив();
	
	Для Каждого ТекТип Из СтруктураОписаниеТипов.Типы Цикл
		Попытка
			НовыйТип = Тип(СтрЗаменить(ТекТип, ".", "Ссылка."));
			МассивТипов.Добавить(НовыйТип);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Продолжить;
		КонецПопытки;
	КонецЦикла;
		
	КвалификаторыЧисла = Новый КвалификаторыЧисла(СтруктураОписаниеТипов.КвалификаторыЧисла.Разрядность,
												  СтруктураОписаниеТипов.КвалификаторыЧисла.РазрядностьДробнойЧасти,
												  Вычислить("ДопустимыйЗнак." + СтруктураОписаниеТипов.КвалификаторыЧисла.ДопустимыйЗнак));
	
	КвалификаторыСтроки = Новый КвалификаторыСтроки(СтруктураОписаниеТипов.КвалификаторыСтроки.Длина,
													Вычислить("ДопустимаяДлина." + СтруктураОписаниеТипов.КвалификаторыСтроки.ДопустимаяДлина));
	
	КвалификаторыДаты = Новый КвалификаторыДаты(Вычислить("ЧастиДаты." + СтруктураОписаниеТипов.КвалификаторыДаты.ЧастиДаты));
	
	КвалификаторыДвоичныхДанных = Новый КвалификаторыДвоичныхДанных(СтруктураОписаниеТипов.КвалификаторыСтроки.Длина,
																	Вычислить("ДопустимаяДлина." + СтруктураОписаниеТипов.КвалификаторыДвоичныхДанных.ДопустимаяДлина));
																		  
	Возврат Новый ОписаниеТипов(МассивТипов, КвалификаторыЧисла, КвалификаторыСтроки, КвалификаторыДаты, КвалификаторыДвоичныхДанных);
	
КонецФункции

Процедура СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, ИмяСвойства, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено)
	
	Если НЕ ИспользоватьСвойство(ИмяСвойства, СписокСвойств, ИсключаяСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОбъекта.Вставить(ИмяСвойства, ЗначениеВСтруктуру(Объект[ИмяСвойства]));
	
КонецПроцедуры //СвойствоОбъектаВСтруктуру()
	
Процедура СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ИмяСвойства, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено)
	
	Если НЕ СтруктураОбъекта.Свойство(ИмяСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИспользоватьСвойство(ИмяСвойства, СписокСвойств, ИсключаяСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	Объект[ИмяСвойства] = ЗначениеИзСтруктуры(СтруктураОбъекта[ИмяСвойства]);
	
КонецПроцедуры //СвойствоОбъектаИзСтруктуры()
	
Процедура ТЧОбъектаВСтруктуру(СтруктураОбъекта, Объект, ИмяТЧ, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено)
	
	Если НЕ ИспользоватьСвойство("__ТЧ." + ИмяТЧ, СписокСвойств, ИсключаяСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураОбъекта.Свойство("__ТЧ") Тогда
		СтруктураОбъекта.Вставить("__ТЧ", Новый Структура());
	КонецЕсли;
	
	МетаОбъект = Объект.Метаданные();
	
	МетаТЧ = МетаОбъект.ТабличныеЧасти.Найти(ИмяТЧ);
	
	Если МетаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив();
	Для Каждого ТекСтрока Из Объект[ИмяТЧ] Цикл
		
		СтруктураСтроки = Новый Структура();
		СтруктураСтроки.Вставить("__Индекс", Объект[ИмяТЧ].Индекс(ТекСтрока));
		СтруктураСтроки.Вставить("НомерСтроки", ТекСтрока.НомерСтроки);
		
		Для Каждого ТекРеквизит Из МетаТЧ.Реквизиты Цикл
			Если НЕ ИспользоватьСвойство(ИмяТЧ + "." + ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураСтроки.Вставить(ТекРеквизит.Имя, ЗначениеВСтруктуру(ТекСтрока[ТекРеквизит.Имя]));
		КонецЦикла;
		
		МассивСтрок.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	СтруктураОбъекта.__ТЧ.Вставить(ИмяТЧ, МассивСтрок);
	
КонецПроцедуры //ТЧОбъектаВСтруктуру()

Процедура ТЧОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ИмяТЧ, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено)
	
	Если НЕ СтруктураОбъекта.Свойство("__ТЧ") Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ СтруктураОбъекта.__ТЧ.Свойство(ИмяТЧ) Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ ИспользоватьСвойство("__ТЧ." + ИмяТЧ, СписокСвойств, ИсключаяСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	МетаОбъект = Объект.Метаданные();
	
	МетаТЧ = МетаОбъект.ТабличныеЧасти.Найти(ИмяТЧ);
	
	Если МетаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Объект[ИмяТЧ].Очистить();
	
	МассивСтрок = СтруктураОбъекта.__ТЧ[ИмяТЧ];
	
	Для Каждого ТекСтрока Из МассивСтрок Цикл
		
		НоваяСтрока = Объект[ИмяТЧ].Добавить();
		
		Для Каждого ТекРеквизит Из МетаТЧ.Реквизиты Цикл
			
			Если НЕ ТекСтрока.Свойство(ТекРеквизит.Имя) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ИспользоватьСвойство(ИмяТЧ + "." + ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока[ТекРеквизит.Имя] = ЗначениеИзСтруктуры(ТекСтрока[ТекРеквизит.Имя]);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры //ТЧОбъектаИзСтруктуры()
	
Функция ЗначенияСубконтоЗаписиВСтруктуру(Запись, ДтКт = "", СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено)
	
	ВидыСубконто = Запись["Счет" + ДтКт].ВидыСубконто;
	ЗначенияСубконто = Запись["Субконто" + ДтКт];
	
	МассивСубконто = Новый Массив();
	й = 1;
	Для Каждого ТекСтрокаВида Из ВидыСубконто Цикл
		Если НЕ ИспользоватьСвойство("Субконто" + ДтКт + Формат(й, "ЧДЦ=; ЧГ="), СписокСвойств, ИсключаяСвойства) Тогда
			й = й + 1;
			Продолжить;
		КонецЕсли;
		МассивСубконто.Добавить(Новый Структура("НомерСтроки, ВидСубконто, Значение"
												, й
												, ЗначениеВСтруктуру(ТекСтрокаВида.ВидСубконто)
												, ЗначениеВСтруктуру(ЗначенияСубконто[ТекСтрокаВида.ВидСубконто])));
		й = й + 1;
	КонецЦикла;
	
	Возврат МассивСубконто;
	
КонецФункции //ЗначенияСубконтоВСтруктуру()

Процедура ЗначенияСубконтоЗаписиИзСтруктуры(Запись, СтруктураЗаписи, ДтКт = "", СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено)
	
	ВидыСубконто = Запись["Счет" + ДтКт].ВидыСубконто;
	ЗначенияСубконто = Запись["Субконто" + ДтКт];
	
	МассивСубконто = СтруктураЗаписи["Субконто" + ДтКт];
	
	й = 1;
	Для Каждого ТекСтрока Из МассивСубконто Цикл
		
		Если НЕ ИспользоватьСвойство("Субконто" + ДтКт + Формат(й, "ЧДЦ=; ЧГ="), СписокСвойств, ИсключаяСвойства) Тогда
			й = й + 1;
			Продолжить;
		КонецЕсли;
		
		ВидСубконто = ЗначениеИзСтруктуры(ТекСтрока.ВидСубконто);
		
		Если НЕ ЗначениеЗаполнено(ВидСубконто) Тогда
			й = й + 1;
			Продолжить;
		КонецЕсли;
		
		СтрокаВида = ВидыСубконто.Найти(ВидСубконто, "ВидСубконто");
		
		Если СтрокаВида = Неопределено Тогда
			й = й + 1;
			Продолжить;
		КонецЕсли;
		
		ЗначенияСубконто[ВидСубконто] = ЗначениеИзСтруктуры(ТекСтрока.Значение);
		
		й = й + 1;
		
	КонецЦикла;
	
КонецПроцедуры //ЗначенияСубконтоИзСтруктуры()

Процедура ЗаполнитьИзмерениеРегистраБухгалтерии(Запись, СтруктураЗаписи, ОписаниеПоля, ДтКт)
	
	ЗаполнятьЗначение = Истина;
	
	Если ЗначениеЗаполнено(ОписаниеПоля.ПризнакУчета) Тогда
		Если НЕ Запись["Счет" + ДтКт][ОписаниеПоля.ПризнакУчета.Имя] Тогда
			ЗаполнятьЗначение = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполнятьЗначение Тогда
		Запись[ОписаниеПоля.Имя + ДтКт] = ЗначениеИзСтруктуры(СтруктураЗаписи[ОписаниеПоля.Имя + ДтКт]);
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьИзмерениеРегистраБухгалтерии()

Процедура ЗаполнитьРесурсРегистраБухгалтерии(Запись, СтруктураЗаписи, ОписаниеПоля, ДтКт)
	
	ЗаполнятьЗначение = Истина;
	
	Если ЗначениеЗаполнено(ОписаниеПоля.ПризнакУчета) Тогда
		Если НЕ Запись["Счет" + ДтКт][ОписаниеПоля.ПризнакУчета.Имя] Тогда
			ЗаполнятьЗначение = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполнятьЗначение Тогда
		Запись[ОписаниеПоля.Имя + ДтКт] = ЗначениеИзСтруктуры(СтруктураЗаписи[ОписаниеПоля.Имя + ДтКт]);
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьРесурсРегистраБухгалтерии()

#КонецОбласти

#Область СохранениеЗначенийСлужебные

Функция ЗначениеВСтруктуру(Значение) Экспорт
	
	МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(Значение));
	
	Если МетаданныеЗначения = Неопределено Тогда
		Возврат Значение;
	ИначеЕсли ВРег(Лев(МетаданныеЗначения.ПолноеИмя(), 13)) = ВРег("Перечисление.") Тогда
		ИмяПредопределенныхДанных = "";
		Если ЗначениеЗаполнено(Значение) Тогда
			Индекс = Перечисления[МетаданныеЗначения.Имя].Индекс(Значение);
			ИмяПредопределенныхДанных = МетаданныеЗначения.ЗначенияПеречисления.Получить(Индекс).Имя;
		КонецЕсли;
		ОписаниеЗначения = Новый Структура("Тип, Ид, ИдПолный, Предопределенный, ИмяПредопределенныхДанных, Представление"
										, МетаданныеЗначения.ПолноеИмя()
										, ИмяПредопределенныхДанных
										, ЗначениеВСтрокуВнутр(Значение)
										, Истина
										, ИмяПредопределенныхДанных
										, СокрЛП(Значение));
	Иначе
		Предопределенный = Ложь;
		Если Метаданные.Справочники.Содержит(МетаданныеЗначения)
		 ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеЗначения)
		 ИЛИ Метаданные.ПланыСчетов.Содержит(МетаданныеЗначения)
		 ИЛИ Метаданные.ПланыВидовРасчета.Содержит(МетаданныеЗначения) Тогда
			Предопределенный = Значение.Предопределенный;
		КонецЕсли;
		ОписаниеЗначения = Новый Структура("Тип, Ид, ИдПолный, Предопределенный, ИмяПредопределенныхДанных, Представление"
										, МетаданныеЗначения.ПолноеИмя()
										, СокрЛП(Значение.УникальныйИдентификатор())
										, ЗначениеВСтрокуВнутр(Значение)
										, Предопределенный
										, ПолучитьИмяПредопределенныхДанных(Значение)
										, СокрЛП(Значение));
	КонецЕсли;
	
	ПравилоВыгрузки = ПолучитьПравилоВыгрузкиТипа(МетаданныеЗначения.ПолноеИмя());
	
	Выполнить(ПравилоВыгрузки.ФункцияДополнения + "(ОписаниеЗначения, Значение);");
	
	Возврат ОписаниеЗначения;
	
КонецФункции //ЗначениеВСтруктуру()

Функция ПолучитьПравилоВыгрузкиТипа(ПолноеИмяТипа)
	
	Правила = ПолучитьПравилаВыгрузкиТипов();
	
	Правило = Правила[ПолноеИмяТипа];
	
	Если Правило = Неопределено Тогда
		Правило = Новый Структура("ТипЗначения, ФункцияДополнения", ПолноеИмяТипа, "ДополнитьОписаниеЗначения");
	КонецЕсли;
	
	Возврат Правило;
	
КонецФункции //ПолучитьПравилоВыгрузкиТипа()

Процедура ДобавитьПравилоВыгрузкиТипа(Правила, ТипИсточника, ФункцияДополнения)
	
	Правила.Вставить(ТипИсточника, Новый Структура("ФункцияДополнения", ФункцияДополнения));
	
КонецПроцедуры //ДобавитьПравилоВыгрузкиТипа()

#КонецОбласти

#Область СохранениеЗначенийПереопределяемые

Функция ПолучитьПравилаВыгрузкиТипов()
	
	Правила = Новый Соответствие();
	
	//ДобавитьПравилоВыгрузкиТипа(Правила, "Справочник.Организации", "ДополнитьОписаниеЗначения");
	
	Возврат Правила;
	
КонецФункции //ПолучитьПравилаВыгрузкиТипов()

Процедура ДополнитьОписаниеЗначения(ОписаниеЗначения, Значение)
	
КонецПроцедуры //ДополнитьОписаниеЗначения()

#КонецОбласти

#Область ПолучениеЗначенийСлужебные

Функция ЗначениеИзСтруктуры(ОписаниеЗначения) Экспорт
	
	Если Не ТипЗнч(ОписаниеЗначения) = Тип("Структура") Тогда
		Возврат ОписаниеЗначения;
	КонецЕсли;
	
	ПравилоЗагрузки = ПолучитьПравилоЗагрузкиТипа(ОписаниеЗначения.Тип);
	
	ОписаниеВида = ПолучитьОписаниеВидаОбъектов(ПравилоЗагрузки.ТипЗначения);

	МетаОбъект = Метаданные.НайтиПоПолномуИмени(ПравилоЗагрузки.ТипЗначения);
	
	Если МетаОбъект = Неопределено Тогда
		Сообщить("Не найден тип " + ПравилоЗагрузки.ТипЗначения 
			+ " для значения: """
			+ ОписаниеЗначения.Представление
			+ "(" + ОписаниеЗначения.Ид + ")""");
		Возврат Неопределено;	
	КонецЕсли;
	
	Коллекция = ОписаниеВида.Коллекция;
	
	Результат = Коллекция[МетаОбъект.Имя].ПустаяСсылка();
	
	Выполнить("Результат = " + СокрЛП(ПравилоЗагрузки.ФункцияПоиска) + "(ОписаниеВида, МетаОбъект, ОписаниеЗначения);");
	
	Если НЕ ЗначениеЗаполнено(Результат) И Найти(ОписаниеЗначения.ИдПолный, "00000000000000000000000000000000") = 0 Тогда
		Сообщить("Не найдено значение "
			+ МетаОбъект.ПолноеИмя() + ": """
			+ ОписаниеЗначения.Представление
			+ "(" + ОписаниеЗначения.Ид + ")""");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //ЗначениеИзСтруктуры()

Функция ПолучитьПравилоЗагрузкиТипа(ПолноеИмяТипа)
	
	Правила = ПолучитьПравилаЗагрузкиТипов();
	
	Правило = Правила[ПолноеИмяТипа];
	
	Если Правило = Неопределено Тогда
		Правило = Новый Структура("ТипЗначения, ФункцияПоиска", ПолноеИмяТипа, "НайтиЗначениеПоОписанию");
		//Правило = Новый Структура("ТипЗначения, ФункцияПоиска", ПолноеИмяТипа, "НайтиЗначениеПоСоответствию");
	КонецЕсли;
	
	Возврат Правило;
	
КонецФункции //ПолучитьПравилоЗагрузкиТипа()

Процедура ДобавитьПравилоЗагрузкиТипа(Правила, ТипИсточника, ТипПриемника, ФункцияПоиска)
	
	Правила.Вставить(ТипИсточника, Новый Структура("ТипЗначения, ФункцияПоиска", ТипПриемника, ФункцияПоиска));
	
КонецПроцедуры //ДобавитьПравилоЗагрузкиТипа()

#КонецОбласти

#Область ПолучениеЗначенийПереопределяемые

Функция ПолучитьПравилаЗагрузкиТипов()
	
	Правила = Новый Соответствие();
	
	//ДобавитьПравилоЗагрузкиТипа(Правила, "Справочник.Организации"				, "Справочник.Организации"				, "НайтиЗначениеПоСоответствиюИНаименованию");
	
	Возврат Правила;
	
КонецФункции //ПолучитьПравилаЗагрузкиТипов()

Функция НайтиЗначениеПоОписанию(ОписаниеВида, МетаОбъект, ОписаниеЗначения)
	
	Коллекция = ОписаниеВида.Коллекция;
	
	Если ЗначениеЗаполнено(ОписаниеЗначения.ИмяПредопределенныхДанных) Тогда
		Возврат Коллекция[МетаОбъект.Имя][ОписаниеЗначения.ИмяПредопределенныхДанных];
	Иначе
		ВремСсылка = ЗначениеИзСтрокиВнутр(ОписаниеЗначения.ИдПолный);
		Если ЗначениеЗаполнено(ВремСсылка) Тогда
			ВремОбъект = ВремСсылка.ПолучитьОбъект();
			Если НЕ ВремОбъект = Неопределено Тогда
				Возврат ВремСсылка;
			КонецЕсли;
		КонецЕсли;
		
		Если Найти(ОписаниеЗначения.ИдПолный, "00000000000000000000000000000000") = 0 Тогда
			ВремСсылка = Коллекция[МетаОбъект.Имя].ПолучитьСсылку(Новый УникальныйИдентификатор(ОписаниеЗначения.Ид));
			ВремОбъект = ВремСсылка.ПолучитьОбъект();
			Если НЕ ВремОбъект = Неопределено Тогда
				Возврат ВремСсылка;
			КонецЕсли;
		
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОписаниеЗначения.Представление)
	   И (ВРег(ОписаниеВида.Имя) = ВРег("Справочник")
			ИЛИ ВРег(ОписаниеВида.Имя) = ВРег("ПланВидовХарактеристик")
			ИЛИ ВРег(ОписаниеВида.Имя) = ВРег("ПланСчетов")
			ИЛИ ВРег(ОписаниеВида.Имя) = ВРег("ПланВидовРасчета")
			ИЛИ ВРег(ОписаниеВида.Имя) = ВРег("ПланОбмена")
			ИЛИ ВРег(ОписаниеВида.Имя) = ВРег("Задача")) Тогда
		
		ВремСсылка = Коллекция[МетаОбъект.Имя].НайтиПоНаименованию(ОписаниеЗначения.Представление, Истина); 
		Если НЕ ВремСсылка.Пустая() Тогда
			Возврат ВремСсылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Коллекция[МетаОбъект.Имя].ПустаяСсылка();
	
КонецФункции //НайтиЗначениеПоОписанию()

Функция НайтиЗначениеПоСоответствию(ОписаниеВида, МетаОбъект, ОписаниеЗначения)
	
	Коллекция = ОписаниеВида.Коллекция;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Ссылка
		|ИЗ
		|	РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
		|ГДЕ
		|	СоответствияОбъектовИнформационныхБаз.ТипПриемника = &ТипПриемника
		|	И СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника = &УникальныйИдентификаторПриемника
		|	И СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &УзелИнформационнойБазы
		|	И СоответствияОбъектовИнформационныхБаз.ТипИсточника = &ТипИсточника";
	
	Запрос.УстановитьПараметр("ТипИсточника", СтрЗаменить(МетаОбъект.ПолноеИмя(), ".", "Ссылка."));
	Запрос.УстановитьПараметр("ТипПриемника", СтрЗаменить(ОписаниеЗначения.Тип, ".", "Ссылка."));
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", ПланыОбмена.вфт_ИнформационныеБазы.НайтиПоКоду("ДР"));
	Запрос.УстановитьПараметр("УникальныйИдентификаторПриемника", ОписаниеЗначения.Ид);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Коллекция[МетаОбъект.Имя].ПустаяСсылка();
	
КонецФункции //НайтиЗначениеПоСоответствию()

Функция НайтиЗначениеПоСоответствиюИНаименованию(ОписаниеВида, МетаОбъект, ОписаниеЗначения)
	
	Коллекция = ОписаниеВида.Коллекция;
	
	ВремСсылка = НайтиЗначениеПоСоответствию(ОписаниеВида, МетаОбъект, ОписаниеЗначения);
	
	Если ВремСсылка.Пустая() И НЕ ПустаяСтрока(ОписаниеЗначения.Представление)
	   И (ВРег(ОписаниеВида.Имя) = ВРег("Справочник")
			ИЛИ ВРег(ОписаниеВида.Имя) = ВРег("ПланВидовХарактеристик")
			ИЛИ ВРег(ОписаниеВида.Имя) = ВРег("ПланСчетов")
			ИЛИ ВРег(ОписаниеВида.Имя) = ВРег("ПланВидовРасчета")
			ИЛИ ВРег(ОписаниеВида.Имя) = ВРег("ПланОбмена")
			ИЛИ ВРег(ОписаниеВида.Имя) = ВРег("Задача")) Тогда
		
		ВремСсылка = Коллекция[МетаОбъект.Имя].НайтиПоНаименованию(ОписаниеЗначения.Представление, Истина); 
		Если НЕ ВремСсылка.Пустая() Тогда
			Возврат ВремСсылка;
		КонецЕсли;
	ИначеЕсли НЕ ВремСсылка.Пустая() Тогда
		Возврат ВремСсылка;
	КонецЕсли;
	
	Возврат Коллекция[МетаОбъект.Имя].ПустаяСсылка();
	
КонецФункции //НайтиЗначениеПоСоответствиюИНаименованию()

#КонецОбласти

#Область ПреобразованияОбъектовОбщие

Функция ОбъектВСтруктуру(Объект, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	ОписаниеВида = ПолучитьОписаниеВидаОбъектов(ТипЗнч(Объект));
	
	Если ОписаниеВида = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураОбъекта = Неопределено;
	
	Если ВРег(ОписаниеВида.Имя) = ВРег("Справочник") Тогда
		СтруктураОбъекта = СправочникВСтруктуру(Объект, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("Документ") Тогда
		СтруктураОбъекта = ДокументВСтруктуру(Объект, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("ПланВидовХарактеристик") Тогда
		СтруктураОбъекта = ПланВидовХарактеристикВСтруктуру(Объект, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("ПланСчетов") Тогда
		СтруктураОбъекта = ПланСчетовВСтруктуру(Объект, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("ПланВидовРасчета") Тогда
		СтруктураОбъекта = ПланВидовРасчетаВСтруктуру(Объект, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("ПланОбмена") Тогда
		СтруктураОбъекта = ПланОбменаВСтруктуру(Объект, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("БизнесПроцесс") Тогда
		СтруктураОбъекта = БизнесПроцессВСтруктуру(Объект, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("Задача") Тогда
		СтруктураОбъекта = ЗадачаВСтруктуру(Объект, СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Возврат СтруктураОбъекта;
	
КонецФункции //ОбъектВСтруктуру()

Процедура ЗаполнитьОбъектИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	Попытка
		ОписаниеВида = ПолучитьОписаниеВидаОбъектов(СтруктураОбъекта.Ссылка.Тип);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	
	Если ВРег(ОписаниеВида.Имя) = ВРег("Справочник") Тогда
		СправочникИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("Документ") Тогда
		ДокументИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("ПланВидовХарактеристик") Тогда
		ПланВидовХарактеристикИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("ПланСчетов") Тогда
		ПланСчетовИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("ПланВидовРасчета") Тогда
		ПланВидовРасчетаИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("ПланОбмена") Тогда
		ПланОбменаИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("БизнесПроцесс") Тогда
		БизнесПроцессИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("Задача") Тогда
		ЗадачаИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьОбъектИзСтруктуры()

Функция СоздатьОбъектИзСтруктуры(СтруктураОбъекта, УстановитьСсылку = Ложь, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	Попытка
		ОписаниеВида = ПолучитьОписаниеВидаОбъектов(СтруктураОбъекта.Ссылка.Тип);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Неопределено;
	КонецПопытки;
	
	МетаОбъект = Метаданные.НайтиПоПолномуИмени(СтруктураОбъекта.Ссылка.Тип);
	Менеджер = ОписаниеВида.Коллекция[МетаОбъект.Имя];
	Конструктор = ОписаниеВида.Конструктор;
	
	Если ВРег(ОписаниеВида.Имя) = ВРег("Справочник")
	 ИЛИ ВРег(ОписаниеВида.Имя) = ВРег("ПланВидовХарактеристик") Тогда
		Если ОписаниеВида.МетаКоллекция[МетаОбъект.Имя].Иерархический
		   И ОписаниеВида.МетаКоллекция[МетаОбъект.Имя].ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			Если СтруктураОбъекта.ЭтоГруппа Тогда 
				Конструктор = ОписаниеВида.КонструкторАльт;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Объект = Неопределено;
	
	Если ЗначениеЗаполнено(Конструктор) Тогда
		
		Объект = Вычислить("Менеджер." + Конструктор + "()");
		
		Если УстановитьСсылку Тогда
			Объект.УстановитьСсылкуНового(Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураОбъекта.Ссылка.Ид)));
		КонецЕсли;
		
		ЗаполнитьОбъектИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства);
		
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции //СоздатьОбъектИзСтруктуры()

Функция РегистрПоОтборуВСтруктуру(Регистр, Отбор, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	ОписаниеВида = ПолучитьОписаниеВидаОбъектов(Регистр);
	
	Если ОписаниеВида = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МетаОбъект = Метаданные.НайтиПоПолномуИмени(Регистр);
	
	НаборЗаписей = ОписаниеВида.Коллекция[МетаОбъект.Имя].СоздатьНаборЗаписей();
	Для Каждого ТекЭлемент Из Отбор Цикл
		НаборЗаписей.Отбор[ТекЭлемент.Ключ].Установить(ТекЭлемент.Значение);
	КонецЦикла;
	НаборЗаписей.Прочитать();
	
	СтруктураОбъекта = Неопределено;
	
	Если ВРег(ОписаниеВида.Имя) = ВРег("РегистрСведений") Тогда
		СтруктураОбъекта = НаборЗаписейРегистраСведенийВСтруктуру(НаборЗаписей, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("РегистрНакопления") Тогда
		СтруктураОбъекта = НаборЗаписейРегистраНакопленияВСтруктуру(НаборЗаписей, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("РегистрБухгалтерии") Тогда
		СтруктураОбъекта = НаборЗаписейРегистраБухгалтерииВСтруктуру(НаборЗаписей, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("РегистрРасчета") Тогда
		СтруктураОбъекта = НаборЗаписейРегистраРасчетаВСтруктуру(НаборЗаписей, СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Возврат СтруктураОбъекта;
	
КонецФункции //РегистрПоОтборуВСтруктуру()

Функция ДвиженияДокументаВСтруктуру(Объект, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено)
	
	МетаОбъект = Объект.Метаданные();
	
	Отбор = Новый Структура("Регистратор", Объект.Ссылка);
	
	СтруктураДвижений = Новый Структура();
	Для Каждого ТекДвижения Из МетаОбъект.Движения Цикл
		Если НЕ ИспользоватьСвойство("Движения." + ТекДвижения.ПолноеИмя(), СписокСвойств, ИсключаяСвойства) Тогда
			Продолжить;
		КонецЕсли;
		СтруктураДвижений.Вставить(ТекДвижения.Имя, РегистрПоОтборуВСтруктуру(ТекДвижения.ПолноеИмя(), Отбор, СписокСвойств, ИсключаяСвойства));
	КонецЦикла;
	
	Возврат СтруктураДвижений;
	
КонецФункции //ДвиженияДокументаВСтруктуру()

#КонецОбласти

#Область ПреобразованияОбъектовПоВидам

Функция СправочникВСтруктуру(Объект, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = Объект.Метаданные();
	
	СтруктураОбъекта.Вставить("Ссылка", ЗначениеВСтруктуру(Объект));
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ЭтоГруппа", СписокСвойств, ИсключаяСвойства);
	
	СтруктураОбъекта.Вставить("Родитель", Неопределено);
	Если МетаОбъект.Иерархический Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Родитель", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
			
	СтруктураОбъекта.Вставить("Владелец", Неопределено);
	Если МетаОбъект.Владельцы.Количество() > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Владелец", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Код", Неопределено);
	Если МетаОбъект.ДлинаКода > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Код", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Наименование", Неопределено);
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		Если МетаОбъект.Иерархический И МетаОбъект.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			Если (Объект.ЭтоГруппа И ТекРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
			 ИЛИ (НЕ Объект.ЭтоГруппа И ТекРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы)Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		Если МетаОбъект.Иерархический И МетаОбъект.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			Если (Объект.ЭтоГруппа И ТекТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
			 ИЛИ (НЕ Объект.ЭтоГруппа И ТекТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы)Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ТЧОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Возврат СтруктураОбъекта;
	
КонецФункции //СправочникВСтруктуру()

Процедура СправочникИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = Объект.Метаданные();
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	
	Если МетаОбъект.Иерархический Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Родитель", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
			
	Если МетаОбъект.Владельцы.Количество() > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Владелец", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Если МетаОбъект.ДлинаКода > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Код", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		Если МетаОбъект.Иерархический И МетаОбъект.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			Если (Объект.ЭтоГруппа И ТекРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
			 ИЛИ (НЕ Объект.ЭтоГруппа И ТекРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы)Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		Если МетаОбъект.Иерархический И МетаОбъект.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			Если (Объект.ЭтоГруппа И ТекТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
			 ИЛИ (НЕ Объект.ЭтоГруппа И ТекТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы)Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ТЧОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
КонецПроцедуры //СправочникИзСтруктуры()

Функция ПланСчетовВСтруктуру(Объект, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = Объект.Метаданные();
	
	СтруктураОбъекта.Вставить("Ссылка", ЗначениеВСтруктуру(Объект));
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Забалансовый", СписокСвойств, ИсключаяСвойства);
	
	Если ИспользоватьСвойство("Вид", СписокСвойств, ИсключаяСвойства) Тогда
		СтруктураОбъекта.Вставить("Вид", ?(Объект.Вид = ВидСчета.Активный, "Активный",
										   ?(Объект.Вид = ВидСчета.Пассивный, "Пассивный",
											 "АктивноПассивный")));
	КонецЕсли;
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Родитель", СписокСвойств, ИсключаяСвойства);
			
	СтруктураОбъекта.Вставить("Код", Неопределено);
	Если МетаОбъект.ДлинаКода > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Код", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Порядок", Неопределено);
	Если МетаОбъект.ДлинаПорядка > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Порядок", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Наименование", Неопределено);
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Для Каждого ТекПризнак Из МетаОбъект.ПризнакиУчета Цикл
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекПризнак.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	СтруктураОбъекта.Вставить("ВидыСубконто", Новый Массив());
	Если ИспользоватьСвойство("ВидыСубконто", СписокСвойств, ИсключаяСвойства) Тогда
		й = 1;
		Для Каждого ТекСтрока Из Объект.ВидыСубконто Цикл
			СтрокаСубконто = Новый Структура("НомерСтроки, ВидСубконто, ТолькоОбороты"
											, й
											, ЗначениеВСтруктуру(ТекСтрока.ВидСубконто)
											, ТекСтрока.ТолькоОбороты);
			
			Для Каждого ТекПризнак Из МетаОбъект.ПризнакиУчетаСубконто Цикл
				СтрокаСубконто.Вставить(ТекПризнак.Имя, ТекСтрока[ТекПризнак.Имя]);
			КонецЦикла;
			й = й + 1;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Возврат СтруктураОбъекта;
	
КонецФункции //ПланСчетовВСтруктуру()

Процедура ПланСчетовИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = Объект.Метаданные();
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Забалансовый", СписокСвойств, ИсключаяСвойства);
	Если ИспользоватьСвойство("Вид", СписокСвойств, ИсключаяСвойства) Тогда
		Объект.Вид = Вычислить("ВидСчета." + СтруктураОбъекта.Вид);
	КонецЕсли;
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Родитель", СписокСвойств, ИсключаяСвойства);
			
	Если МетаОбъект.ДлинаКода > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Код", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Если МетаОбъект.ДлинаПорядка > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Порядок", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Для Каждого ТекПризнак Из МетаОбъект.ПризнакиУчета Цикл
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекПризнак.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Если СтруктураОбъекта.Свойство("ВидыСубконто") И ИспользоватьСвойство("ВидыСубконто", СписокСвойств, ИсключаяСвойства) Тогда
		Объект.ВидыСубконто.Очистить();
		Для Каждого ТекСтрока Из СтруктураОбъекта.ВидыСубконто Цикл
			Если Объект.ВидыСубконто.Количество >= МетаОбъект.МаксКоличествоСубконто Тогда
				Прервать;
			КонецЕсли;
			НоваяСтрока = Объект.ВидыСубконто.Добавить();
			НоваяСтрока.ВидСубконто		= ЗначениеИзСтруктуры(ТекСтрока.ВидСубконто);
			НоваяСтрока.ТолькоОбороты	= ТекСтрока.ТолькоОбороты;
			
			Для Каждого ТекПризнак Из МетаОбъект.ПризнакиУчетаСубконто Цикл
				Если НЕ ТекСтрока.Свойство(ТекПризнак.Имя) Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока[ТекПризнак.Имя] = ТекСтрока[ТекПризнак.Имя];
			КонецЦикла;
			й = й + 1;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
КонецПроцедуры //ПланСчетовИзСтруктуры()

Функция ПланВидовХарактеристикВСтруктуру(Объект, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = Объект.Метаданные();
	
	СтруктураОбъекта.Вставить("Ссылка", ЗначениеВСтруктуру(Объект));
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ЭтоГруппа", СписокСвойств, ИсключаяСвойства);
	
	СтруктураОбъекта.Вставить("Родитель", Неопределено);
	Если МетаОбъект.Иерархический Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Родитель", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
			
	СтруктураОбъекта.Вставить("Код", Неопределено);
	Если МетаОбъект.ДлинаКода > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Код", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Наименование", Неопределено);
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("ТипЗначения", ОписаниеТиповВСтруктуру(Объект.ТипЗначения));

	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		Если МетаОбъект.Иерархический Тогда
			Если (Объект.ЭтоГруппа И ТекРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
			 ИЛИ (НЕ Объект.ЭтоГруппа И ТекРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы)Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		Если МетаОбъект.Иерархический Тогда
			Если (Объект.ЭтоГруппа И ТекТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
			 ИЛИ (НЕ Объект.ЭтоГруппа И ТекТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы)Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ТЧОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Возврат СтруктураОбъекта;
	
КонецФункции //ПланВидовХарактеристикВСтруктуру()

Процедура ПланВидовХарактеристикИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = Объект.Метаданные();
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	
	Если МетаОбъект.Иерархический Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Родитель", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
			
	Если МетаОбъект.ДлинаКода > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Код", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Объект.ТипЗначения = ОписаниеТиповИзСтруктуры(СтруктураОбъекта.ТипЗначения);
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		Если МетаОбъект.Иерархический Тогда
			Если (Объект.ЭтоГруппа И ТекРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
			 ИЛИ (НЕ Объект.ЭтоГруппа И ТекРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы)Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		Если МетаОбъект.Иерархический Тогда
			Если (Объект.ЭтоГруппа И ТекТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
			 ИЛИ (НЕ Объект.ЭтоГруппа И ТекТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы)Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ТЧОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
КонецПроцедуры //ПланВидовХарактеристикИзСтруктуры()

Функция ПланВидовРасчетаВСтруктуру(Объект, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = Объект.Метаданные();
	
	СтруктураОбъекта.Вставить("Ссылка", ЗначениеВСтруктуру(Объект));
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	
	СтруктураОбъекта.Вставить("БазовыеВидыРасчета", Новый Массив());
	Если НЕ МетаОбъект.ЗависимостьОтВидовРасчета = Метаданные.СвойстваОбъектов.ИспользованиеБазыПланаВидовРасчета.НеИспользовать
	   И ИспользоватьСвойство("БазовыеВидыРасчета", СписокСвойств, ИсключаяСвойства) Тогда
		Для Каждого ТекВР Из Объект.БазовыеВидыРасчета Цикл
			СтруктураОбъекта.БазовыеВидыРасчета.Добавить(ЗначениеВСтруктуру(ТекВР.ВидРасчета));
		КонецЦикла;
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("ВедущиеВидыРасчета", Новый Массив());
	Если ИспользоватьСвойство("ВедущиеВидыРасчета", СписокСвойств, ИсключаяСвойства) Тогда
		Для Каждого ТекВР Из Объект.ВедущиеВидыРасчета Цикл
			СтруктураОбъекта.ВедущиеВидыРасчета.Добавить(ЗначениеВСтруктуру(ТекВР.ВидРасчета));
		КонецЦикла;
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("ВытесняющиеВидыРасчета", Новый Массив());
	Если МетаОбъект.ИспользованиеПериодаДействия
	   И ИспользоватьСвойство("ВытесняющиеВидыРасчета", СписокСвойств, ИсключаяСвойства) Тогда
		Для Каждого ТекВР Из Объект.ВытесняющиеВидыРасчета Цикл
			СтруктураОбъекта.ВытесняющиеВидыРасчета.Добавить(ЗначениеВСтруктуру(ТекВР.ВидРасчета));
		КонецЦикла;
	КонецЕсли;
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ПериодДействияБазовый", СписокСвойств, ИсключаяСвойства);
	
	СтруктураОбъекта.Вставить("Код", Неопределено);
	Если МетаОбъект.ДлинаКода > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Код", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	СтруктураОбъекта.Вставить("Наименование", Неопределено);
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Возврат СтруктураОбъекта;
	
КонецФункции //ПланВидовРасчетаВСтруктуру()

Процедура ПланВидовРасчетаИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = Объект.Метаданные();
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	
	Если НЕ МетаОбъект.ЗависимостьОтВидовРасчета = Метаданные.СвойстваОбъектов.ИспользованиеБазыПланаВидовРасчета.НеИспользовать
	   И ИспользоватьСвойство("БазовыеВидыРасчета", СписокСвойств, ИсключаяСвойства) Тогда
		Объект.БазовыеВидыРасчета.Очистить();
		Для Каждого ТекВР Из СтруктураОбъекта.БазовыеВидыРасчета Цикл
			ВремВР = ЗначениеИзСтруктуры(ТекВР);
			Если НЕ ЗначениеЗаполнено(ВремВР) Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = Объект.БазовыеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = ВремВР;
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользоватьСвойство("ВедущиеВидыРасчета", СписокСвойств, ИсключаяСвойства) Тогда
		Объект.ВедущиеВидыРасчета.Очистить();
		Для Каждого ТекВР Из СтруктураОбъекта.ВедущиеВидыРасчета Цикл
			ВремВР = ЗначениеИзСтруктуры(ТекВР);
			Если НЕ ЗначениеЗаполнено(ВремВР) Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = Объект.ВедущиеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = ВремВР;
		КонецЦикла;
	КонецЕсли;
	
	Если МетаОбъект.ИспользованиеПериодаДействия
	   И ИспользоватьСвойство("ВытесняющиеВидыРасчета", СписокСвойств, ИсключаяСвойства) Тогда
		Объект.ВытесняющиеВидыРасчета.Очистить();
		Для Каждого ТекВР Из СтруктураОбъекта.ВытесняющиеВидыРасчета Цикл
			ВремВР = ЗначениеИзСтруктуры(ТекВР);
			Если НЕ ЗначениеЗаполнено(ВремВР) Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = Объект.ВытесняющиеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = ВремВР;
		КонецЦикла;
	КонецЕсли;
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "ПериодДействияБазовый", СписокСвойств, ИсключаяСвойства);
	
	Если МетаОбъект.ДлинаКода > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Код", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
КонецПроцедуры //ПланВидовРасчетаИзСтруктуры()

Функция ПланОбменаВСтруктуру(Объект, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = Объект.Метаданные();
	
	СтруктураОбъекта.Вставить("Ссылка", ЗначениеВСтруктуру(Объект));
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ЭтотУзел", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "НомерОтправленного", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "НомерПринятого", СписокСвойств, ИсключаяСвойства);
	
	СтруктураОбъекта.Вставить("Код", Неопределено);
	Если МетаОбъект.ДлинаКода > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Код", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Наименование", Неопределено);
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Возврат СтруктураОбъекта;
	
КонецФункции //ПланОбменаВСтруктуру()

Процедура ПланОбменаИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = Объект.Метаданные();
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "НомерОтправленного", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "НомерПринятого", СписокСвойств, ИсключаяСвойства);
	
	Если МетаОбъект.ДлинаКода > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Код", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
КонецПроцедуры //ПланОбменаИзСтруктуры()

Функция ДокументВСтруктуру(Объект, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = Объект.Метаданные();
	
	СтруктураОбъекта.Вставить("Ссылка", ЗначениеВСтруктуру(Объект));
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Проведен", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Дата", СписокСвойств, ИсключаяСвойства);
	
	СтруктураОбъекта.Вставить("Номер", Неопределено);
	//TODO: Тут еще нужно проверить использование нумератора
	Если МетаОбъект.ДлинаНомера > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Номер", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Если ИспользоватьСвойство("Движения", СписокСвойств, ИсключаяСвойства) Тогда
		СтруктураОбъекта.Вставить("Движения", ДвиженияДокументаВСтруктуру(Объект, СписокСвойств, ИсключаяСвойства));
	КонецЕсли;
	
	Возврат СтруктураОбъекта;
	
КонецФункции //ДокументВСтруктуру()

Процедура ДокументИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = Объект.Метаданные();
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Проведен", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Дата", СписокСвойств, ИсключаяСвойства);
	
	//TODO: Тут еще нужно проверить использование нумератора
	Если МетаОбъект.ДлинаНомера > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Номер", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	//TODO: Движения
	
КонецПроцедуры //ДокументИзСтруктуры()

Функция БизнесПроцессВСтруктуру(Объект, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = Объект.Метаданные();
	
	СтруктураОбъекта.Вставить("Ссылка", ЗначениеВСтруктуру(Объект));
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Дата", СписокСвойств, ИсключаяСвойства);
	
	СтруктураОбъекта.Вставить("Номер", Неопределено);
	Если МетаОбъект.ДлинаНомера > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Номер", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Стартован", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Завершен", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ВедущаяЗадача", СписокСвойств, ИсключаяСвойства);
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Возврат СтруктураОбъекта;
	
КонецФункции //БизнесПроцессВСтруктуру()

Процедура БизнесПроцессИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = Объект.Метаданные();
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Дата", СписокСвойств, ИсключаяСвойства);
	
	Если МетаОбъект.ДлинаНомера > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Номер", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Стартован", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Завершен", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "ВедущаяЗадача", СписокСвойств, ИсключаяСвойства);
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
КонецПроцедуры //БизнесПроцессИзСтруктуры()

Функция ЗадачаВСтруктуру(Объект, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = Объект.Метаданные();
	
	СтруктураОбъекта.Вставить("Ссылка", ЗначениеВСтруктуру(Объект));
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Дата", СписокСвойств, ИсключаяСвойства);
	
	СтруктураОбъекта.Вставить("Номер", Неопределено);
	Если МетаОбъект.ДлинаНомера > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Номер", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Наименование", Неопределено);
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "БизнесПроцесс", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Выполнена", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ТочкаМаршрута", СписокСвойств, ИсключаяСвойства);
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Возврат СтруктураОбъекта;
	
КонецФункции //ЗадачаВСтруктуру()

Процедура ЗадачаИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = Объект.Метаданные();
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Дата", СписокСвойств, ИсключаяСвойства);
	
	Если МетаОбъект.ДлинаНомера > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Номер", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "БизнесПроцесс", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Выполнена", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "ТочкаМаршрута", СписокСвойств, ИсключаяСвойства);
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
КонецПроцедуры //ЗадачаИзСтруктуры()

Функция НаборЗаписейРегистраСведенийВСтруктуру(НаборЗаписей, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = НаборЗаписей.Метаданные();
	
	СтруктураОбъекта.Вставить("Отбор", Новый Структура());
	
	Если МетаОбъект.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		СтруктураОбъекта.Отбор.Вставить("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);
	Иначе
		Если НЕ МетаОбъект.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			СтруктураОбъекта.Отбор.Вставить("Период", НаборЗаписей.Отбор.Период.Значение);
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из НаборЗаписей.Отбор Цикл
			Если НЕ ИспользоватьСвойство(ТекЭлемент.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураОбъекта.Отбор.Вставить(ТекЭлемент.Имя, ЗначениеВСтруктуру(ТекЭлемент.Значение));
		КонецЦикла;
	КонецЕсли;
	
	МассивСтрок = Новый Массив();
	
	Для Каждого ТекСтрока Из НаборЗаписей Цикл
		
		СтруктураСтроки = Новый Структура();
		
		Если МетаОбъект.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
			СтруктураСтроки.Вставить("Регистратор", ЗначениеВСтруктуру(ТекСтрока.Регистратор));
			Если ИспользоватьСвойство("НомерСтроки", СписокСвойств, ИсключаяСвойства) Тогда
				СтруктураСтроки.Вставить("НомерСтроки", ТекСтрока.НомерСтроки);
			КонецЕсли;
		КонецЕсли;
	
		СтруктураСтроки.Вставить("Активность", ТекСтрока.Активность);
		
		Если НЕ МетаОбъект.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			СтруктураСтроки.Вставить("Период", ТекСтрока.Период);
		КонецЕсли;
		
		Для Каждого ТекПоле Из МетаОбъект.Измерения Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураСтроки.Вставить(ТекПоле.Имя, ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя]));
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Ресурсы Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураСтроки.Вставить(ТекПоле.Имя, ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя]));
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Реквизиты Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураСтроки.Вставить(ТекПоле.Имя, ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя]));
		КонецЦикла;
		
		МассивСтрок.Добавить(СтруктураСтроки);
		
	КонецЦикла;

	СтруктураОбъекта.Вставить("Записи", МассивСтрок);
	
	Возврат СтруктураОбъекта;
	
КонецФункции //НаборЗаписейРегистраСведенийВСтруктуру()

Процедура НаборЗаписейРегистраСведенийИзСтруктуры(НаборЗаписей, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = НаборЗаписей.Метаданные();
	
	Если МетаОбъект.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		НаборЗаписей.Отбор.Регистратор.Установить(СтруктураОбъекта.Отбор.Регистратор);
	Иначе
		Если НЕ МетаОбъект.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			НаборЗаписей.Отбор.Период.Установить(СтруктураОбъекта.Отбор.Период);
		КонецЕсли;
		
		Для Каждого ТекПоле Из МетаОбъект.Измерения Цикл
			Если НЕ (СтруктураОбъекта.Отбор.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			НаборЗаписей.Отбор[ТекПоле.Имя].Установить(ЗначениеИзСтруктуры(СтруктураОбъекта.Отбор[ТекПоле.Имя]));
		КонецЦикла;
	КонецЕсли;
		
	Для Каждого ТекЗапись Из СтруктураОбъекта.Записи Цикл
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		Если МетаОбъект.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
			НоваяЗапись.Регистратор = ЗначениеИзСтруктуры(ТекЗапись.Регистратор);
			Если ИспользоватьСвойство("НомерСтроки", СписокСвойств, ИсключаяСвойства) Тогда
				НоваяЗапись.НомерСтроки = ТекЗапись.НомерСтроки;
			КонецЕсли;
		КонецЕсли;
		НоваяЗапись.Активность = ТекЗапись.Активность;
		
		Если НЕ МетаОбъект.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			НоваяЗапись.Период = ТекЗапись.Период;
		КонецЕсли;
		
		Для Каждого ТекПоле Из МетаОбъект.Измерения Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись[ТекПоле.Имя] = ЗначениеИзСтруктуры(ТекЗапись[ТекПоле.Имя]);
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Ресурсы Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись[ТекПоле.Имя] = ЗначениеИзСтруктуры(ТекЗапись[ТекПоле.Имя]);
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Реквизиты Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись[ТекПоле.Имя] = ЗначениеИзСтруктуры(ТекЗапись[ТекПоле.Имя]);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры //НаборЗаписейРегистраСведенийИзСтруктуры()

Функция НаборЗаписейРегистраНакопленияВСтруктуру(НаборЗаписей, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = НаборЗаписей.Метаданные();
	
	СтруктураОбъекта.Вставить("Отбор", Новый Структура());
	
	СтруктураОбъекта.Отбор.Вставить("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);
	
	МассивСтрок = Новый Массив();
	
	Для Каждого ТекСтрока Из НаборЗаписей Цикл
		
		СтруктураСтроки = Новый Структура();
		
		СтруктураОбъекта.Отбор.Вставить("Регистратор", ЗначениеВСтруктуру(ТекСтрока.Регистратор));
		
		Если ИспользоватьСвойство("НомерСтроки", СписокСвойств, ИсключаяСвойства) Тогда
			СтруктураОбъекта.Отбор.Вставить("НомерСтроки", ТекСтрока.НомерСтроки);
		КонецЕсли;
	
		СтруктураСтроки.Вставить("Активность", ТекСтрока.Активность);
		
		Если МетаОбъект.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			СтруктураСтроки.Вставить("ВидДвижения", ?(ТекСтрока.ВидДвижения = ВидДвиженияНакопления.Приход, "Приход", "Расход"));
		КонецЕсли;
		
		СтруктураСтроки.Вставить("Период", ТекСтрока.Период);
		
		Для Каждого ТекПоле Из МетаОбъект.Измерения Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураСтроки.Вставить(ТекПоле.Имя, ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя]));
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Ресурсы Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураСтроки.Вставить(ТекПоле.Имя, ТекСтрока[ТекПоле.Имя]);
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Реквизиты Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураСтроки.Вставить(ТекПоле.Имя, ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя]));
		КонецЦикла;
		
		МассивСтрок.Добавить(СтруктураСтроки);
		
	КонецЦикла;

	СтруктураОбъекта.Вставить("Записи", МассивСтрок);
	
	Возврат СтруктураОбъекта;
	
КонецФункции //НаборЗаписейРегистраНакопленияВСтруктуру()

Процедура НаборЗаписейРегистраНакопленияИзСтруктуры(НаборЗаписей, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = НаборЗаписей.Метаданные();
	
	НаборЗаписей.Отбор.Регистратор.Установить(СтруктураОбъекта.Отбор.Регистратор);
	
	Для Каждого ТекЗапись Из СтруктураОбъекта.Записи Цикл
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.Регистратор = ЗначениеИзСтруктуры(ТекЗапись.Регистратор);
		
		Если ИспользоватьСвойство("НомерСтроки", СписокСвойств, ИсключаяСвойства) Тогда
			НоваяЗапись.НомерСтроки = ТекЗапись.НомерСтроки;
		КонецЕсли;
		
		НоваяЗапись.Активность = ТекЗапись.Активность;
		
		Если МетаОбъект.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			НоваяЗапись.ВидДвижения = Вычислить("ВидДвижения." + ТекЗапись.ВидДвижения);
		КонецЕсли;
		
		НоваяЗапись.Период = ТекЗапись.Период;
		
		Для Каждого ТекПоле Из МетаОбъект.Измерения Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись[ТекПоле.Имя] = ЗначениеИзСтруктуры(ТекЗапись[ТекПоле.Имя]);
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Ресурсы Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись[ТекПоле.Имя] = ТекЗапись[ТекПоле.Имя];
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Реквизиты Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись[ТекПоле.Имя] = ЗначениеИзСтруктуры(ТекЗапись[ТекПоле.Имя]);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры //НаборЗаписейРегистраНакопленияИзСтруктуры()

Функция НаборЗаписейРегистраБухгалтерииВСтруктуру(НаборЗаписей, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = НаборЗаписей.Метаданные();
	
	СтруктураОбъекта.Вставить("Отбор", Новый Структура());
	
	СтруктураОбъекта.Отбор.Вставить("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);
	
	МассивСтрок = Новый Массив();
	
	Для Каждого ТекСтрока Из НаборЗаписей Цикл
		
		СтруктураСтроки = Новый Структура();
		
		СтруктураОбъекта.Отбор.Вставить("Регистратор", ЗначениеВСтруктуру(ТекСтрока.Регистратор));
		
		Если ИспользоватьСвойство("НомерСтроки", СписокСвойств, ИсключаяСвойства) Тогда
			СтруктураОбъекта.Отбор.Вставить("НомерСтроки", ТекСтрока.НомерСтроки);
		КонецЕсли;
	
		СтруктураСтроки.Вставить("Активность", ТекСтрока.Активность);
		
		СтруктураСтроки.Вставить("Период", ТекСтрока.Период);
		
		Если МетаОбъект.ДлинаУточненияПериода > 0
		   И ИспользоватьСвойство("УточнениеПериода", СписокСвойств, ИсключаяСвойства) Тогда
			СтруктураСтроки.Вставить("УточнениеПериода", ТекСтрока.УточнениеПериода);
		КонецЕсли;
		
		Если МетаОбъект.Корреспонденция Тогда
			СтруктураСтроки.Вставить("СчетДт", ЗначениеВСтруктуру(ТекСтрока.СчетДт));
			СтруктураСтроки.Вставить("СчетКт", ЗначениеВСтруктуру(ТекСтрока.СчетКт));
			
			СтруктураСтроки.Вставить("СубконтоДт", ЗначенияСубконтоЗаписиВСтруктуру(ТекСтрока, "Дт", СписокСвойств, ИсключаяСвойства));
			СтруктураСтроки.Вставить("СубконтоКт", ЗначенияСубконтоЗаписиВСтруктуру(ТекСтрока, "Кт", СписокСвойств, ИсключаяСвойства));
		Иначе
			СтруктураСтроки.Вставить("ВидДвижения", ?(ТекСтрока.ВидДвижения = ВидДвиженияБухгалтерии.Дебет, "Дебет", "Кредит"));
			
			СтруктураСтроки.Вставить("Счет", ЗначениеВСтруктуру(ТекСтрока.Счет));
			
			СтруктураСтроки.Вставить("Субконто", ЗначенияСубконтоЗаписиВСтруктуру(ТекСтрока, "", СписокСвойств, ИсключаяСвойства));
		КонецЕсли;
		
		Для Каждого ТекПоле Из МетаОбъект.Измерения Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			Если МетаОбъект.Корреспонденция И НЕ ТекПоле.Балансовый Тогда
				СтруктураСтроки.Вставить(ТекПоле.Имя + "Дт", ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя + "Дт"]));
				СтруктураСтроки.Вставить(ТекПоле.Имя + "Кт", ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя + "Кт"]));
			Иначе
				СтруктураСтроки.Вставить(ТекПоле.Имя, ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя]));
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Ресурсы Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			Если МетаОбъект.Корреспонденция И НЕ ТекПоле.Балансовый Тогда
				СтруктураСтроки.Вставить(ТекПоле.Имя + "Дт", ТекСтрока[ТекПоле.Имя + "Дт"]);
				СтруктураСтроки.Вставить(ТекПоле.Имя + "Кт", ТекСтрока[ТекПоле.Имя + "Кт"]);
			Иначе
				СтруктураСтроки.Вставить(ТекПоле.Имя, ТекСтрока[ТекПоле.Имя]);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Реквизиты Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураСтроки.Вставить(ТекПоле.Имя, ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя]));
		КонецЦикла;
		
		МассивСтрок.Добавить(СтруктураСтроки);
		
	КонецЦикла;

	СтруктураОбъекта.Вставить("Записи", МассивСтрок);
	
	Возврат СтруктураОбъекта;
	
КонецФункции //НаборЗаписейРегистраБухгалтерииВСтруктуру()

Процедура НаборЗаписейРегистраБухгалтерииИзСтруктуры(НаборЗаписей, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = НаборЗаписей.Метаданные();
	
	НаборЗаписей.Отбор.Регистратор.Установить(СтруктураОбъекта.Отбор.Регистратор);
	
	Для Каждого ТекЗапись Из СтруктураОбъекта.Записи Цикл
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.Регистратор = ЗначениеИзСтруктуры(ТекЗапись.Регистратор);
		
		Если ИспользоватьСвойство("НомерСтроки", СписокСвойств, ИсключаяСвойства) Тогда
			НоваяЗапись.НомерСтроки = ТекЗапись.НомерСтроки;
		КонецЕсли;
		
		НоваяЗапись.Активность = ТекЗапись.Активность;
		НоваяЗапись.Период = ТекЗапись.Период;
		
		Если МетаОбъект.ДлинаУточненияПериода > 0
		   И ИспользоватьСвойство("УточнениеПериода", СписокСвойств, ИсключаяСвойства) Тогда
			НоваяЗапись.УточнениеПериода = ТекЗапись.УточнениеПериода;
		КонецЕсли;
		
		Если МетаОбъект.Корреспонденция Тогда
			НоваяЗапись.СчетДт = ЗначениеИзСтруктуры(ТекЗапись.СчетДт);
			НоваяЗапись.СчетКт = ЗначениеИзСтруктуры(ТекЗапись.СчетКт);
			
			ЗначенияСубконтоЗаписиИзСтруктуры(НоваяЗапись, ТекЗапись, "Дт", СписокСвойств, ИсключаяСвойства);
			ЗначенияСубконтоЗаписиИзСтруктуры(НоваяЗапись, ТекЗапись, "Кт", СписокСвойств, ИсключаяСвойства);
		Иначе
			НоваяЗапись.ВидДвижения = Вычислить("ВидДвиженияБухгалтерии." + ТекЗапись.ВидДвижения);
			
			НоваяЗапись.Счет = ЗначениеИзСтруктуры(ТекЗапись.Счет);
			
			ЗначенияСубконтоЗаписиИзСтруктуры(НоваяЗапись, ТекЗапись, "", СписокСвойств, ИсключаяСвойства);
		КонецЕсли;
		
		Для Каждого ТекПоле Из МетаОбъект.Измерения Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			Если МетаОбъект.Корреспонденция И НЕ ТекПоле.Балансовый Тогда
				ЗаполнитьИзмерениеРегистраБухгалтерии(НоваяЗапись, ТекЗапись, ТекПоле, "Дт");
				ЗаполнитьИзмерениеРегистраБухгалтерии(НоваяЗапись, ТекЗапись, ТекПоле, "Кт");
			Иначе
				ЗаполнитьИзмерениеРегистраБухгалтерии(НоваяЗапись, ТекЗапись, ТекПоле, "");
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Ресурсы Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			Если МетаОбъект.Корреспонденция И НЕ ТекПоле.Балансовый Тогда
				НоваяЗапись[ТекПоле.Имя + "Дт"] = ТекЗапись[ТекПоле.Имя + "Дт"];
				НоваяЗапись[ТекПоле.Имя + "Кт"] = ТекЗапись[ТекПоле.Имя + "Кт"];
			Иначе
				НоваяЗапись[ТекПоле.Имя] = ТекЗапись[ТекПоле.Имя];
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Реквизиты Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись[ТекПоле.Имя] = ЗначениеИзСтруктуры(ТекЗапись[ТекПоле.Имя]);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры //НаборЗаписейРегистраБухгалтерииИзСтруктуры()

Функция НаборЗаписейРегистраРасчетаВСтруктуру(НаборЗаписей, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = НаборЗаписей.Метаданные();
	
	СтруктураОбъекта.Вставить("Отбор", Новый Структура());
	
	СтруктураОбъекта.Отбор.Вставить("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);
	
	Для Каждого ТекЭлемент Из НаборЗаписей.Отбор Цикл
		Если НЕ ИспользоватьСвойство(ТекЭлемент.Имя, СписокСвойств, ИсключаяСвойства) Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОбъекта.Отбор.Вставить(ТекЭлемент.Имя, ЗначениеВСтруктуру(ТекЭлемент.Значение));
	КонецЦикла;
	
	МассивСтрок = Новый Массив();
	
	Для Каждого ТекСтрока Из НаборЗаписей Цикл
		
		СтруктураСтроки = Новый Структура();
		
		СтруктураОбъекта.Отбор.Вставить("Регистратор", ЗначениеВСтруктуру(ТекСтрока.Регистратор));
		
		Если ИспользоватьСвойство("НомерСтроки", СписокСвойств, ИсключаяСвойства) Тогда
			СтруктураОбъекта.Отбор.Вставить("НомерСтроки", ТекСтрока.НомерСтроки);
		КонецЕсли;
	
		СтруктураСтроки.Вставить("Активность"		, ТекСтрока.Активность);
		
		СтруктураСтроки.Вставить("ВидРасчета"		, ЗначениеВСтруктуру(ТекСтрока.ВидРасчета));
		
		СтруктураСтроки.Вставить("Сторно"			, ТекСтрока.Сторно);
		
		СтруктураСтроки.Вставить("ПериодРегистрации", ТекСтрока.ПериодРегистрации);
		
		Если МетаОбъект.БазовыйПериод Тогда
			СтруктураСтроки.Вставить("БазовыйПериодНачало"	, ТекСтрока.БазовыйПериодНачало);
			СтруктураСтроки.Вставить("БазовыйПериодКонец"	, ТекСтрока.БазовыйПериодКонец);
		КонецЕсли;
		
		Если МетаОбъект.ПериодДействия Тогда
			СтруктураСтроки.Вставить("ПериодДействия"		, ТекСтрока.ПериодДействия);
			СтруктураСтроки.Вставить("ПериодДействияНачало"	, ТекСтрока.ПериодДействияНачало);
			СтруктураСтроки.Вставить("ПериодДействияКонец"	, ТекСтрока.ПериодДействияКонец);
			
			МассивПериодов = Новый Массив();
			
			Для Каждого ТекПериод Из ТекСтрока.ФактическийПериодДействия Цикл
				МассивПериодов.Добавить(Новый Структура("ДатаНачала, ДатаОкончания", ТекПериод.ДатаНачала, ТекПериод.ДатаОкончания));
			КонецЦикла;
			СтруктураСтроки.Вставить("ФактическийПериодДействия", МассивПериодов);
		КонецЕсли;
		
		Для Каждого ТекПоле Из МетаОбъект.Измерения Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураСтроки.Вставить(ТекПоле.Имя, ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя]));
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Ресурсы Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураСтроки.Вставить(ТекПоле.Имя, ТекСтрока[ТекПоле.Имя]);
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Реквизиты Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураСтроки.Вставить(ТекПоле.Имя, ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя]));
		КонецЦикла;
		
		МассивСтрок.Добавить(СтруктураСтроки);
		
	КонецЦикла;

	СтруктураОбъекта.Вставить("Записи", МассивСтрок);
	
	Возврат СтруктураОбъекта;
	
КонецФункции //НаборЗаписейРегистраРасчетаВСтруктуру()

Процедура НаборЗаписейРегистраРасчетаИзСтруктуры(НаборЗаписей, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = НаборЗаписей.Метаданные();
	
	НаборЗаписей.Отбор.Регистратор.Установить(СтруктураОбъекта.Отбор.Регистратор);
	
	Для Каждого ТекПоле Из МетаОбъект.Измерения Цикл
		Если НЕ (СтруктураОбъекта.Отбор.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
			Продолжить;
		КонецЕсли;
		НаборЗаписей.Отбор[ТекПоле.Имя].Установить(ЗначениеИзСтруктуры(СтруктураОбъекта.Отбор[ТекПоле.Имя]));
	КонецЦикла;
		
	Для Каждого ТекЗапись Из СтруктураОбъекта.Записи Цикл
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.Регистратор = ЗначениеИзСтруктуры(ТекЗапись.Регистратор);
		
		Если ИспользоватьСвойство("НомерСтроки", СписокСвойств, ИсключаяСвойства) Тогда
			НоваяЗапись.НомерСтроки = ТекЗапись.НомерСтроки;
		КонецЕсли;
		
		НоваяЗапись.Активность 			= ТекЗапись.Активность;
		
		НоваяЗапись.ВидРасчета			= ЗначениеИзСтруктуры(ТекЗапись.ВидРасчета);
		
		НоваяЗапись.Сторно				= ТекЗапись.Сторно;
		
		НоваяЗапись.ПериодРегистрации	= ТекЗапись.ПериодРегистрации;
		
		Если МетаОбъект.БазовыйПериод Тогда
			НоваяЗапись.БазовыйПериодНачало	= ТекЗапись.БазовыйПериодНачало;
			НоваяЗапись.БазовыйПериодКонец	= ТекЗапись.БазовыйПериодКонец;
		КонецЕсли;
		
		Если МетаОбъект.ПериодДействия Тогда
			НоваяЗапись.ПериодДействия			= ТекЗапись.ПериодДействия;
			НоваяЗапись.ПериодДействияНачало	= ТекЗапись.ПериодДействияНачало;
			НоваяЗапись.ПериодДействияКонец		= ТекЗапись.ПериодДействияКонец;
		КонецЕсли;
		
		Для Каждого ТекПоле Из МетаОбъект.Измерения Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись[ТекПоле.Имя] = ЗначениеИзСтруктуры(ТекЗапись[ТекПоле.Имя]);
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Ресурсы Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись[ТекПоле.Имя] = ТекЗапись[ТекПоле.Имя];
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Реквизиты Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись[ТекПоле.Имя] = ЗначениеИзСтруктуры(ТекЗапись[ТекПоле.Имя]);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры //НаборЗаписейРегистраРасчетаИзСтруктуры()

#КонецОбласти


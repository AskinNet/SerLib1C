{3,
{48,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{1,3ccc650e-f631-4cae-8e33-3eaac610b5f9,"ПриОткрытии",1,0,3ccc650e-f631-4cae-8e33-3eaac610b5f9,0,1},
{0},1,
{22,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{29,
{4,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ФормаТест",
{1,0},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{11,
{5,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ФормаТестРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0,0},1,0,0,0,3,3,0},1,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{34,
{1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"КоличествоВВыборке",1,0,
{1,0},
{1,0},
{1,
{2}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{22,
{2,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КоличествоВВыборкеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3,0},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{11,
{3,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КоличествоВВыборкеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},3,3,0},"","",1,
{22,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{11,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3,0},0,3,3,0},1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0,0,0},"&НаКлиенте
Перем Настройки;

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ""ПриОткрытии"" формы
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Настройки = ПолучитьНастройки();
	
	ПроверитьСвойства(Настройки, ""ПреобразованиеДанных"", ""Отсутствуют обязательные настройки: %1"");
	
	ПодключитьВнешнююОбработку(""ПреобразованиеДанных"", Настройки.ПреобразованиеДанных);
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработкаКоманд

// Процедура - выполняет тестирование преобразования переданного объекта
//
// Параметры:
//  ТестируемыйОбъект    - Ссылка, НаборЗаписей    - объект для тестирования преобразования
//  Библиотека           - ОбработкаОбъект         - обработка преобразования данных
//
&НаСервере
Процедура ВыполнитьТестОбъекта(Знач ТестируемыйОбъект, Знач Библиотека)
	
	Представление = Библиотека.ОбъектВСтруктуру(ТестируемыйОбъект);
	ТекстОбъекта = Библиотека.ЗаписатьОписаниеОбъектаВJSON(Представление);
	Представление = Библиотека.ПрочитатьОписаниеОбъектаИзJSON(ТекстОбъекта);
	НовыйЭлемент = Библиотека.СоздатьОбъектИзСтруктуры(Представление);
	
	Сообщить(СтрШаблон(""Выполнено преобразование объекта """"%1"""" (%2)..."", ТестируемыйОбъект, ТипЗнч(ТестируемыйОбъект)));
	
КонецПроцедуры // ВыполнитьТестОбъекта()
	
// Процедура - обработчик команды ""Тест"" формы
//
&НаСервере
Процедура ТестНаСервере()
	
	Библиотека = ПреобразованиеДанных();
	
	Первые = """";
	Если КоличествоВВыборке > 0 Тогда
		Первые = СтрШаблон("" ПЕРВЫЕ %1"", Формат(КоличествоВВыборке, ""ЧГ=""));
	КонецЕсли;
	
	НачВремя = ТекущаяДата();
	
	й = 0;
	
	Для Каждого ТекМетаОбъект Из Метаданные.Справочники Цикл
		
		Если ТекМетаОбъект.Иерархический И ТекМетаОбъект.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			Запрос = Новый Запрос(""ВЫБРАТЬ"" + Первые + "" ТекТаб.Ссылка ИЗ Справочник."" + ТекМетаОбъект.Имя + "" КАК ТекТаб ГДЕ ТекТаб.ЭтоГруппа"");
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Библиотека.ДобавитьПравилоВыгрузкиТипа(ТекМетаОбъект.ПолноеИмя(), ""ДобавитьНаименованиеОбъекта"", ЭтаФорма);
				ВыполнитьТестОбъекта(Выборка.Ссылка, Библиотека);
				й = й + 1;
			КонецЦикла;
			Запрос = Новый Запрос(""ВЫБРАТЬ"" + Первые + "" ТекТаб.Ссылка ИЗ Справочник."" + ТекМетаОбъект.Имя + "" КАК ТекТаб ГДЕ НЕ ТекТаб.ЭтоГруппа"");
		Иначе
			Запрос = Новый Запрос(""ВЫБРАТЬ"" + Первые + "" ТекТаб.Ссылка ИЗ Справочник."" + ТекМетаОбъект.Имя + "" КАК ТекТаб"");
		КонецЕсли;
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Библиотека.ДобавитьПравилоВыгрузкиТипа(ТекМетаОбъект.ПолноеИмя(), ""ДобавитьНаименованиеОбъекта"", ЭтаФорма);
			ВыполнитьТестОбъекта(Выборка.Ссылка, Библиотека);
			й = й + 1;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТекМетаОбъект Из Метаданные.ПланыВидовХарактеристик Цикл
		
		Если ТекМетаОбъект.Иерархический Тогда
			Запрос = Новый Запрос(""ВЫБРАТЬ"" + Первые + "" ТекТаб.Ссылка ИЗ ПланВидовХарактеристик."" + ТекМетаОбъект.Имя + "" КАК ТекТаб ГДЕ ТекТаб.ЭтоГруппа"");
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				ВыполнитьТестОбъекта(Выборка.Ссылка, Библиотека);
				й = й + 1;
			КонецЦикла;
			Запрос = Новый Запрос(""ВЫБРАТЬ"" + Первые + "" ТекТаб.Ссылка ИЗ ПланВидовХарактеристик."" + ТекМетаОбъект.Имя + "" КАК ТекТаб ГДЕ НЕ ТекТаб.ЭтоГруппа"");
		Иначе
			Запрос = Новый Запрос(""ВЫБРАТЬ"" + Первые + "" ТекТаб.Ссылка ИЗ ПланВидовХарактеристик."" + ТекМетаОбъект.Имя + "" КАК ТекТаб"");
		КонецЕсли;
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ВыполнитьТестОбъекта(Выборка.Ссылка, Библиотека);
			й = й + 1;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТекМетаОбъект Из Метаданные.ПланыВидовРасчета Цикл
		
		Запрос = Новый Запрос(""ВЫБРАТЬ"" + Первые + "" ТекТаб.Ссылка ИЗ ПланВидовРасчета."" + ТекМетаОбъект.Имя + "" КАК ТекТаб"");
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ВыполнитьТестОбъекта(Выборка.Ссылка, Библиотека);
			й = й + 1;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТекМетаОбъект Из Метаданные.ПланыСчетов Цикл
		
		Запрос = Новый Запрос(""ВЫБРАТЬ"" + Первые + "" ТекТаб.Ссылка ИЗ ПланСчетов."" + ТекМетаОбъект.Имя + "" КАК ТекТаб"");
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ВыполнитьТестОбъекта(Выборка.Ссылка, Библиотека);
			й = й + 1;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТекМетаОбъект Из Метаданные.ПланыОбмена Цикл
		
		Запрос = Новый Запрос(""ВЫБРАТЬ"" + Первые + "" ТекТаб.Ссылка ИЗ ПланОбмена."" + ТекМетаОбъект.Имя + "" КАК ТекТаб"");
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ВыполнитьТестОбъекта(Выборка.Ссылка, Библиотека);
			й = й + 1;
		КонецЦикла;
	КонецЦикла;
	
	НачДок = ТекущаяДата();
	
	Док = 0;
	
	Для Каждого ТекМетаОбъект Из Метаданные.Документы Цикл
		
		Запрос = Новый Запрос(""ВЫБРАТЬ"" + Первые + "" ТекТаб.Ссылка ИЗ Документ."" + ТекМетаОбъект.Имя + "" КАК ТекТаб"");
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ВыполнитьТестОбъекта(Выборка.Ссылка, Библиотека);
			й = й + 1;
			Док = Док + 1;
		КонецЦикла;
	КонецЦикла;
	
	КонВремя = ТекущаяДата();
	
	Сообщить(""Всего объектов:"" + Формат(й, ""ЧН=; ЧГ=""));
	Сообщить(""Всего документов:"" + Формат(Док, ""ЧН=; ЧГ=""));
	Сообщить(""Начало выполнения:"" + Формат(НачВремя, ""ЧН=; ЧГ=""));
	Сообщить(""Начало обработки документов: "" + Формат(НачДок, ""ЧН=; ЧГ=""));
	Сообщить(""Окончание выполнения: "" + Формат(КонВремя, ""ЧН=; ЧГ=""));
	Сообщить(""Время выполнения: "" + Формат(КонВремя - НачВремя, ""ЧН=; ЧГ="") + ""с."");
	Сообщить(""Время обработки документов: "" + Формат(КонВремя - НачДок, ""ЧН=; ЧГ="") + ""с."");
	Сообщить(""Скорость всего: "" +  Формат(й / (КонВремя - НачВремя), ""ЧН=; ЧГ="") + ""об./с."");
	Сообщить(""Скорость документов: "" + Формат(Док / (КонВремя - НачДок), ""ЧН=; ЧГ="") + ""об./с."");
	
КонецПроцедуры // ТестНаСервере()

// Процедура - обработчик команды ""Тест"" формы
//
&НаКлиенте
Процедура Тест(Команда)
	
	ТестНаСервере();
	
КонецПроцедуры // Тест()

#КонецОбласти

#Область ОбработчикиВыгрузкиДанных

// Процедура - добавляет в описание ссылки наименование
//
// Параметры:
//  ОписаниеЗначения       - Структура      - Структура значения для дополнения
//  Значение               - Произвольный   - Преобразуемое значение
//
&НаСервере
Процедура ДобавитьНаименованиеОбъекта(ОписаниеЗначения, Значение) Экспорт
	
	ОписаниеЗначения.Вставить(""Наименование"", СокрЛП(Значение));
	
КонецПроцедуры //ДобавитьНаименованиеОбъекта()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция - возвращает настройки из JSON-файла настроек
//
// Параметры:
//  ПутьКФайлуНастроек     - Строка     - путь к JSON-файлу настроек
// 
// Возвращаемое значение:
//	Структура      - полученные настройки
//
&НаКлиенте
Функция ПолучитьНастройки(Знач ПутьКФайлуНастроек = """")
	
	Если НЕ ЗначениеЗаполнено(ПутьКФайлуНастроек) Тогда
		ПутьКФайлуНастроек = КаталогТекущейОбработки() + ""settings.json"";
	КонецЕсли;
	
	ПроверитьДопустимостьТипа(ПутьКФайлуНастроек,
	                          ""Строка, Файл"",
	                          СтрШаблон(""Некорректно указан файл настроек """"%1"""""", СокрЛП(ПутьКФайлуНастроек)) +
							  "", тип """"%1"""", ожидается тип %2!"");
	
	Если ТипЗнч(ПутьКФайлуНастроек) = Тип(""Файл"") Тогда
		ФайлНастроек = ПутьКФайлуНастроек;
		ПутьКФайлуНастроек = ФайлНастроек.ПолноеИмя;
	ИначеЕсли ТипЗнч(ПутьКФайлуНастроек) = Тип(""Строка"") Тогда
		ФайлНастроек = Новый Файл(ПутьКФайлуНастроек);
	КонецЕсли;
	
	ЧтениеНастроек = Новый ЧтениеJSON();
	Попытка
		ЧтениеНастроек.ОткрытьФайл(ПутьКФайлуНастроек);
	Исключение
		ВызватьИсключение СтрШаблон(""Ошибка чтения файла настроек """"%1"""": %2%3"",
		                            ПутьКФайлуНастроек,
									Символы.ПС,
									ПодробноеПредставлениеОшибки(ОписаниеОшибки()));
	КонецПопытки;
	
	Возврат ПрочитатьJSON(ЧтениеНастроек, Ложь, , ФорматДатыJSON.ISO);
	
КонецФункции // ПолучитьНастройки()

// Функция - возвращает путь к каталогу текущей обработки
// 
// Возвращаемое значение:
//	Строка       - путь к каталогу текущей обработки
//
&НаСервере
Функция КаталогТекущейОбработки()
	
	ОбработкаОбъект = РеквизитФормыВЗначение(""Объект"");
	
	ФайлЭтойОбработки = Новый Файл(ОбработкаОбъект.ИспользуемоеИмяФайла);
	
	Возврат ФайлЭтойОбработки.Путь;
	
КонецФункции // КаталогТекущейОбработки()

// Функция - Получает обработку сериализации значений
// 
// Возвращаемое значение:
//		ВнешняяОбработкаОбъект - обработка преобразования данных
//
&НаСервере
Функция ПреобразованиеДанных()
	
	Возврат ВнешниеОбработки.Создать(""ПреобразованиеДанных"");
	
КонецФункции // ПреобразованиеДанных()

// Функция - ищет внешнюю обработку по указанному имени и пути, подключает ее
// и возвращает имя подключенной обработки
//
// Параметры:
//  ИмяОбработки         - Строка        - имя внешней обработки
// 
// Возвращаемое значение:
//  ВнешняяОбработкаОбъект        - внешняя обработка
// 
&НаКлиенте
Функция ПодключитьВнешнююОбработку(Знач ИмяОбработки, Знач ПутьКОбработке = """")
	
	Если ЗначениеЗаполнено(ПутьКОбработке) Тогда
		ПутьКОбработке = СтрЗаменить(ПутьКОбработке, ""$thisRoot\"", КаталогТекущейОбработки());
	Иначе
		ПутьКОбработке = КаталогТекущейОбработки() + ИмяОбработки + "".epf"";
	КонецЕсли;
	
	АдресОбработки = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКОбработке), ЭтотОбъект.УникальныйИдентификатор);
	
	Возврат ПодключитьВнешнююОбработкуНаСервере(АдресОбработки, ИмяОбработки);
	
КонецФункции // ПодключитьВнешнююОбработкуПоИмени()

// Функция - подключает внешнюю обработку из указанного хранилища с указанным именем
// возвращает имя подключенной обработки
//
// Параметры:
//  ИмяОбработки         - Строка        - имя внешней обработки
// 
// Возвращаемое значение:
//  ВнешняяОбработкаОбъект        - внешняя обработка
// 
&НаСервере
Функция ПодключитьВнешнююОбработкуНаСервере(Знач АдресОбработки, Знач ИмяОбработки = """")
	
	ОписаниеЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий();
	ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
	
	Возврат ВнешниеОбработки.Подключить(АдресОбработки, ИмяОбработки, Ложь, ОписаниеЗащиты);
	
КонецФункции // ПодключитьВнешнююОбработкуНаСервере()

// Функция - проверяет тип значения на соответствие допустимым типам
//
// Параметры:
//  Значение             - Произвольный                 - проверяемое значение
//  ДопустимыеТипы       - Строка, Массив(Строка, Тип)  - список допустимых типов
//  ШаблонТекстаОшибки   - Строка                       - шаблон строки сообщения об ошибке
//                                                        (""Некорректный тип значения """"%1"""" ожидается тип %2"")
// 
// Возвращаемое значение:
//	Булево       - Истина - проверка прошла успешно
//
Функция ПроверитьДопустимостьТипа(Знач Значение, Знач ДопустимыеТипы, Знач ШаблонТекстаОшибки = """")
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗнч(ДопустимыеТипы) = Тип(""Строка"") Тогда
		МассивДопустимыхТипов = СтрРазделить(ДопустимыеТипы, "","");
	ИначеЕсли ТипЗнч(ДопустимыеТипы) = Тип(""Массив"") Тогда
		МассивДопустимыхТипов = ДопустимыеТипы;
	Иначе
		ВызватьИсключение СтрШаблон(""Некорректно указан список допустимых типов, тип """"%1"""" ожидается тип %2!"",
		                            Тип(ДопустимыеТипы),
									""""""Строка"""" или """"Массив"""""");
	КонецЕсли;
	
	Типы = Новый Соответствие();
	
	СтрокаДопустимыхТипов = """";
	
	Для Каждого ТекТип Из МассивДопустимыхТипов Цикл
		ВремТип = ?(ТипЗнч(ТекТип) = Тип(""Строка""), Тип(СокрЛП(ТекТип)), ТекТип);
		Типы.Вставить(ВремТип, СокрЛП(ТекТип));
		СтрокаДопустимыхТипов = СтрокаДопустимыхТипов
		                      + ?(СтрокаДопустимыхТипов = """",
							      """",
							      ?(МассивДопустимыхТипов.Найти(ТекТип) = МассивДопустимыхТипов.ВГраница(),
								    "" или "",
								    "", ""))
		                      + """""""" + СокрЛП(ТекТип) + """""""";
	КонецЦикла;
	
	Если ШаблонТекстаОшибки = """" Тогда
		ШаблонТекстаОшибки = ""Некорректный тип значения """"%1"""" ожидается тип %2!"";
	КонецЕсли;
	
	Если Типы[ТипЗначения] = Неопределено Тогда
		ВызватьИсключение СтрШаблон(ШаблонТекстаОшибки, СокрЛП(ТипЗначения), СтрокаДопустимыхТипов);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьДопустимостьТипа()

// Функция - Проверить свойства
//
// Параметры:
//  ПроверяемаяСтруктура     - Структура               - проверяемая структура
//  ОбязательныеСвойства     - Строка, Массив(Строка)  - список обязательных свойств
//  ШаблонТекстаОшибки       - Строка                  - шаблон строки сообщения об ошибке
//                                                       (""Отсутствуют обязательные свойства: %1"")
// 
// Возвращаемое значение:
//	Булево       - Истина - проверка прошла успешно
//
Функция ПроверитьСвойства(Знач ПроверяемаяСтруктура, Знач ОбязательныеСвойства, Знач ШаблонТекстаОшибки = """")
	
	ПроверитьДопустимостьТипа(ОбязательныеСвойства,
	                          ""Строка, Массив"",
	                          ""Некорректно указан список обязательных свойств, тип """"%1"""", ожидается тип %2!"");
							  
	Если ТипЗнч(ОбязательныеСвойства) = Тип(""Строка"") Тогда
		МассивСвойств = СтрРазделить(ОбязательныеСвойства, "","");
	ИначеЕсли ТипЗнч(ОбязательныеСвойства) = Тип(""Массив"") Тогда
		МассивСвойств = ОбязательныеСвойства;
	КонецЕсли;
	
	СтрокаСвойств = """";
	
	Для Каждого ТекСвойство Из МассивСвойств Цикл
		
		Если ПроверяемаяСтруктура.Свойство(СокрЛП(ТекСвойство)) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСвойств = СтрокаСвойств
		                      + ?(СтрокаСвойств = """", Символы.ПС, "", "" + Символы.ПС)
		                      + """""""" + СокрЛП(ТекСвойство) + """""""";
	КонецЦикла;
						  
	Если ШаблонТекстаОшибки = """" Тогда
		ШаблонТекстаОшибки = ""Отсутствуют обязательные свойства: %1"";
	КонецЕсли;
	
	Если НЕ СтрокаСвойств = """" Тогда
		ВызватьИсключение СтрШаблон(ШаблонТекстаОшибки, СтрокаСвойств);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьСвойства()

#КонецОбласти
",
{4,2,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",69cabbb1-bba7-46c4-aecd-c5595f656ea3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"КоличествоВВыборке",
{1,1,
{"ru","Количество в выборке"}
},
{"Pattern",
{"N",10,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxvdXRwdXRQ
YXJhbWV0ZXJzLz4NCjwvU2V0dGluZ3M+}
},
{0,0},
{0,1,
{9,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"Тест",
{1,1,
{"ru","Тест"}
},
{1,1,
{"ru","Тест"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"Тест",3,0,0,
{0,0},1,0,1,0,0,2}
},
{0,0},
{0,0},0,0}
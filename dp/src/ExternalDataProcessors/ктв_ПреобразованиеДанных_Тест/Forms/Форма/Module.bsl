&НаКлиенте
Перем Настройки;

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриОткрытии" формы
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Настройки = ПолучитьНастройки();
	
	ПроверитьСвойства(Настройки, "ПреобразованиеДанных", "Отсутствуют обязательные настройки: %1");
	
	ПодключитьВнешнююОбработку("ПреобразованиеДанных", Настройки.ПреобразованиеДанных);
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработкаКоманд

// Процедура - выполняет тестирование преобразования переданного объекта
//
// Параметры:
//  ТестируемыйОбъект    - Ссылка, НаборЗаписей    - объект для тестирования преобразования
//  Библиотека           - ОбработкаОбъект         - обработка преобразования данных
//
&НаСервере
Процедура ВыполнитьТестОбъекта(Знач ТестируемыйОбъект, Знач Библиотека)
	
	Представление = Библиотека.ОбъектВСтруктуру(ТестируемыйОбъект);
	ТекстОбъекта = Библиотека.ЗаписатьОписаниеОбъектаВJSON(Представление);
	Представление = Библиотека.ПрочитатьОписаниеОбъектаИзJSON(ТекстОбъекта);
	НовыйЭлемент = Библиотека.СоздатьОбъектИзСтруктуры(Представление);
	
	Сообщить(СтрШаблон("Выполнено преобразование объекта ""%1"" (%2)...", ТестируемыйОбъект, ТипЗнч(ТестируемыйОбъект)));
	
КонецПроцедуры // ВыполнитьТестОбъекта()
	
// Процедура - обработчик команды "Тест" формы
//
&НаСервере
Процедура ТестНаСервере()
	
	Библиотека = ПреобразованиеДанных();
	
	Первые = "";
	Если КоличествоВВыборке > 0 Тогда
		Первые = СтрШаблон(" ПЕРВЫЕ %1", Формат(КоличествоВВыборке, "ЧГ="));
	КонецЕсли;
	
	НачВремя = ТекущаяДата();
	
	й = 0;
	
	Для Каждого ТекМетаОбъект Из Метаданные.Справочники Цикл
		
		Если ТекМетаОбъект.Иерархический И ТекМетаОбъект.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ" + Первые + " ТекТаб.Ссылка ИЗ Справочник." + ТекМетаОбъект.Имя + " КАК ТекТаб ГДЕ ТекТаб.ЭтоГруппа");
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Библиотека.ДобавитьПравилоВыгрузкиТипа(ТекМетаОбъект.ПолноеИмя(), "ДобавитьНаименованиеОбъекта", ЭтаФорма);
				ВыполнитьТестОбъекта(Выборка.Ссылка, Библиотека);
				й = й + 1;
			КонецЦикла;
			Запрос = Новый Запрос("ВЫБРАТЬ" + Первые + " ТекТаб.Ссылка ИЗ Справочник." + ТекМетаОбъект.Имя + " КАК ТекТаб ГДЕ НЕ ТекТаб.ЭтоГруппа");
		Иначе
			Запрос = Новый Запрос("ВЫБРАТЬ" + Первые + " ТекТаб.Ссылка ИЗ Справочник." + ТекМетаОбъект.Имя + " КАК ТекТаб");
		КонецЕсли;
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Библиотека.ДобавитьПравилоВыгрузкиТипа(ТекМетаОбъект.ПолноеИмя(), "ДобавитьНаименованиеОбъекта", ЭтаФорма);
			ВыполнитьТестОбъекта(Выборка.Ссылка, Библиотека);
			й = й + 1;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТекМетаОбъект Из Метаданные.ПланыВидовХарактеристик Цикл
		
		Если ТекМетаОбъект.Иерархический Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ" + Первые + " ТекТаб.Ссылка ИЗ ПланВидовХарактеристик." + ТекМетаОбъект.Имя + " КАК ТекТаб ГДЕ ТекТаб.ЭтоГруппа");
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				ВыполнитьТестОбъекта(Выборка.Ссылка, Библиотека);
				й = й + 1;
			КонецЦикла;
			Запрос = Новый Запрос("ВЫБРАТЬ" + Первые + " ТекТаб.Ссылка ИЗ ПланВидовХарактеристик." + ТекМетаОбъект.Имя + " КАК ТекТаб ГДЕ НЕ ТекТаб.ЭтоГруппа");
		Иначе
			Запрос = Новый Запрос("ВЫБРАТЬ" + Первые + " ТекТаб.Ссылка ИЗ ПланВидовХарактеристик." + ТекМетаОбъект.Имя + " КАК ТекТаб");
		КонецЕсли;
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ВыполнитьТестОбъекта(Выборка.Ссылка, Библиотека);
			й = й + 1;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТекМетаОбъект Из Метаданные.ПланыВидовРасчета Цикл
		
		Запрос = Новый Запрос("ВЫБРАТЬ" + Первые + " ТекТаб.Ссылка ИЗ ПланВидовРасчета." + ТекМетаОбъект.Имя + " КАК ТекТаб");
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ВыполнитьТестОбъекта(Выборка.Ссылка, Библиотека);
			й = й + 1;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТекМетаОбъект Из Метаданные.ПланыСчетов Цикл
		
		Запрос = Новый Запрос("ВЫБРАТЬ" + Первые + " ТекТаб.Ссылка ИЗ ПланСчетов." + ТекМетаОбъект.Имя + " КАК ТекТаб");
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ВыполнитьТестОбъекта(Выборка.Ссылка, Библиотека);
			й = й + 1;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТекМетаОбъект Из Метаданные.ПланыОбмена Цикл
		
		Запрос = Новый Запрос("ВЫБРАТЬ" + Первые + " ТекТаб.Ссылка ИЗ ПланОбмена." + ТекМетаОбъект.Имя + " КАК ТекТаб");
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ВыполнитьТестОбъекта(Выборка.Ссылка, Библиотека);
			й = й + 1;
		КонецЦикла;
	КонецЦикла;
	
	НачДок = ТекущаяДата();
	
	Док = 0;
	
	Для Каждого ТекМетаОбъект Из Метаданные.Документы Цикл
		
		Запрос = Новый Запрос("ВЫБРАТЬ" + Первые + " ТекТаб.Ссылка ИЗ Документ." + ТекМетаОбъект.Имя + " КАК ТекТаб");
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ВыполнитьТестОбъекта(Выборка.Ссылка, Библиотека);
			й = й + 1;
			Док = Док + 1;
		КонецЦикла;
	КонецЦикла;
	
	КонВремя = ТекущаяДата();
	
	Сообщить("Всего объектов:" + Формат(й, "ЧН=; ЧГ="));
	Сообщить("Всего документов:" + Формат(Док, "ЧН=; ЧГ="));
	Сообщить("Начало выполнения:" + Формат(НачВремя, "ЧН=; ЧГ="));
	Сообщить("Начало обработки документов: " + Формат(НачДок, "ЧН=; ЧГ="));
	Сообщить("Окончание выполнения: " + Формат(КонВремя, "ЧН=; ЧГ="));
	Сообщить("Время выполнения: " + Формат(КонВремя - НачВремя, "ЧН=; ЧГ=") + "с.");
	Сообщить("Время обработки документов: " + Формат(КонВремя - НачДок, "ЧН=; ЧГ=") + "с.");
	Сообщить("Скорость всего: " +  Формат(й / (КонВремя - НачВремя), "ЧН=; ЧГ=") + "об./с.");
	Сообщить("Скорость документов: " + Формат(Док / (КонВремя - НачДок), "ЧН=; ЧГ=") + "об./с.");
	
КонецПроцедуры // ТестНаСервере()

// Процедура - обработчик команды "Тест" формы
//
&НаКлиенте
Процедура Тест(Команда)
	
	ТестНаСервере();
	
КонецПроцедуры // Тест()

#КонецОбласти

#Область ОбработчикиВыгрузкиДанных

// Процедура - добавляет в описание ссылки наименование
//
// Параметры:
//  ОписаниеЗначения       - Структура      - Структура значения для дополнения
//  Значение               - Произвольный   - Преобразуемое значение
//
&НаСервере
Процедура ДобавитьНаименованиеОбъекта(ОписаниеЗначения, Значение) Экспорт
	
	ОписаниеЗначения.Вставить("Наименование", СокрЛП(Значение));
	
КонецПроцедуры //ДобавитьНаименованиеОбъекта()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция - возвращает настройки из JSON-файла настроек
//
// Параметры:
//  ПутьКФайлуНастроек     - Строка     - путь к JSON-файлу настроек
// 
// Возвращаемое значение:
//	Структура      - полученные настройки
//
&НаКлиенте
Функция ПолучитьНастройки(Знач ПутьКФайлуНастроек = "")
	
	Если НЕ ЗначениеЗаполнено(ПутьКФайлуНастроек) Тогда
		ПутьКФайлуНастроек = КаталогТекущейОбработки() + "settings.json";
	КонецЕсли;
	
	ПроверитьДопустимостьТипа(ПутьКФайлуНастроек,
	                          "Строка, Файл",
	                          СтрШаблон("Некорректно указан файл настроек ""%1""", СокрЛП(ПутьКФайлуНастроек)) +
							  ", тип ""%1"", ожидается тип %2!");
	
	Если ТипЗнч(ПутьКФайлуНастроек) = Тип("Файл") Тогда
		ФайлНастроек = ПутьКФайлуНастроек;
		ПутьКФайлуНастроек = ФайлНастроек.ПолноеИмя;
	ИначеЕсли ТипЗнч(ПутьКФайлуНастроек) = Тип("Строка") Тогда
		ФайлНастроек = Новый Файл(ПутьКФайлуНастроек);
	КонецЕсли;
	
	ЧтениеНастроек = Новый ЧтениеJSON();
	Попытка
		ЧтениеНастроек.ОткрытьФайл(ПутьКФайлуНастроек);
	Исключение
		ВызватьИсключение СтрШаблон("Ошибка чтения файла настроек ""%1"": %2%3",
		                            ПутьКФайлуНастроек,
									Символы.ПС,
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ПрочитатьJSON(ЧтениеНастроек, Ложь, , ФорматДатыJSON.ISO);
	
КонецФункции // ПолучитьНастройки()

// Функция - возвращает путь к каталогу текущей обработки
// 
// Возвращаемое значение:
//	Строка       - путь к каталогу текущей обработки
//
&НаСервере
Функция КаталогТекущейОбработки()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ФайлЭтойОбработки = Новый Файл(ОбработкаОбъект.ИспользуемоеИмяФайла);
	
	Возврат ФайлЭтойОбработки.Путь;
	
КонецФункции // КаталогТекущейОбработки()

// Функция - Получает обработку сериализации значений
// 
// Возвращаемое значение:
//		ВнешняяОбработкаОбъект - обработка преобразования данных
//
&НаСервере
Функция ПреобразованиеДанных()
	
	Возврат ВнешниеОбработки.Создать("ПреобразованиеДанных");
	
КонецФункции // ПреобразованиеДанных()

// Функция - ищет внешнюю обработку по указанному имени и пути, подключает ее
// и возвращает имя подключенной обработки
//
// Параметры:
//  ИмяОбработки         - Строка        - имя внешней обработки
// 
// Возвращаемое значение:
//  ВнешняяОбработкаОбъект        - внешняя обработка
// 
&НаКлиенте
Функция ПодключитьВнешнююОбработку(Знач ИмяОбработки, Знач ПутьКОбработке = "")
	
	Если ЗначениеЗаполнено(ПутьКОбработке) Тогда
		ПутьКОбработке = СтрЗаменить(ПутьКОбработке, "$thisRoot\", КаталогТекущейОбработки());
	Иначе
		ПутьКОбработке = КаталогТекущейОбработки() + ИмяОбработки + ".epf";
	КонецЕсли;
	
	АдресОбработки = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКОбработке), ЭтотОбъект.УникальныйИдентификатор);
	
	Возврат ПодключитьВнешнююОбработкуНаСервере(АдресОбработки, ИмяОбработки);
	
КонецФункции // ПодключитьВнешнююОбработкуПоИмени()

// Функция - подключает внешнюю обработку из указанного хранилища с указанным именем
// возвращает имя подключенной обработки
//
// Параметры:
//  ИмяОбработки         - Строка        - имя внешней обработки
// 
// Возвращаемое значение:
//  ВнешняяОбработкаОбъект        - внешняя обработка
// 
&НаСервере
Функция ПодключитьВнешнююОбработкуНаСервере(Знач АдресОбработки, Знач ИмяОбработки = "")
	
	ОписаниеЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий();
	ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
	
	Возврат ВнешниеОбработки.Подключить(АдресОбработки, ИмяОбработки, Ложь, ОписаниеЗащиты);
	
КонецФункции // ПодключитьВнешнююОбработкуНаСервере()

// Функция - проверяет тип значения на соответствие допустимым типам
//
// Параметры:
//  Значение             - Произвольный                 - проверяемое значение
//  ДопустимыеТипы       - Строка, Массив(Строка, Тип)  - список допустимых типов
//  ШаблонТекстаОшибки   - Строка                       - шаблон строки сообщения об ошибке
//                                                        ("Некорректный тип значения ""%1"" ожидается тип %2")
// 
// Возвращаемое значение:
//	Булево       - Истина - проверка прошла успешно
//
Функция ПроверитьДопустимостьТипа(Знач Значение, Знач ДопустимыеТипы, Знач ШаблонТекстаОшибки = "")
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗнч(ДопустимыеТипы) = Тип("Строка") Тогда
		МассивДопустимыхТипов = СтрРазделить(ДопустимыеТипы, ",");
	ИначеЕсли ТипЗнч(ДопустимыеТипы) = Тип("Массив") Тогда
		МассивДопустимыхТипов = ДопустимыеТипы;
	Иначе
		ВызватьИсключение СтрШаблон("Некорректно указан список допустимых типов, тип ""%1"" ожидается тип %2!",
		                            Тип(ДопустимыеТипы),
									"""Строка"" или ""Массив""");
	КонецЕсли;
	
	Типы = Новый Соответствие();
	
	СтрокаДопустимыхТипов = "";
	
	Для Каждого ТекТип Из МассивДопустимыхТипов Цикл
		ВремТип = ?(ТипЗнч(ТекТип) = Тип("Строка"), Тип(СокрЛП(ТекТип)), ТекТип);
		Типы.Вставить(ВремТип, СокрЛП(ТекТип));
		СтрокаДопустимыхТипов = СтрокаДопустимыхТипов
		                      + ?(СтрокаДопустимыхТипов = "",
							      "",
							      ?(МассивДопустимыхТипов.Найти(ТекТип) = МассивДопустимыхТипов.ВГраница(),
								    " или ",
								    ", "))
		                      + """" + СокрЛП(ТекТип) + """";
	КонецЦикла;
	
	Если ШаблонТекстаОшибки = "" Тогда
		ШаблонТекстаОшибки = "Некорректный тип значения ""%1"" ожидается тип %2!";
	КонецЕсли;
	
	Если Типы[ТипЗначения] = Неопределено Тогда
		ВызватьИсключение СтрШаблон(ШаблонТекстаОшибки, СокрЛП(ТипЗначения), СтрокаДопустимыхТипов);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьДопустимостьТипа()

// Функция - Проверить свойства
//
// Параметры:
//  ПроверяемаяСтруктура     - Структура               - проверяемая структура
//  ОбязательныеСвойства     - Строка, Массив(Строка)  - список обязательных свойств
//  ШаблонТекстаОшибки       - Строка                  - шаблон строки сообщения об ошибке
//                                                       ("Отсутствуют обязательные свойства: %1")
// 
// Возвращаемое значение:
//	Булево       - Истина - проверка прошла успешно
//
Функция ПроверитьСвойства(Знач ПроверяемаяСтруктура, Знач ОбязательныеСвойства, Знач ШаблонТекстаОшибки = "")
	
	ПроверитьДопустимостьТипа(ОбязательныеСвойства,
	                          "Строка, Массив",
	                          "Некорректно указан список обязательных свойств, тип ""%1"", ожидается тип %2!");
							  
	Если ТипЗнч(ОбязательныеСвойства) = Тип("Строка") Тогда
		МассивСвойств = СтрРазделить(ОбязательныеСвойства, ",");
	ИначеЕсли ТипЗнч(ОбязательныеСвойства) = Тип("Массив") Тогда
		МассивСвойств = ОбязательныеСвойства;
	КонецЕсли;
	
	СтрокаСвойств = "";
	
	Для Каждого ТекСвойство Из МассивСвойств Цикл
		
		Если ПроверяемаяСтруктура.Свойство(СокрЛП(ТекСвойство)) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСвойств = СтрокаСвойств
		                      + ?(СтрокаСвойств = "", Символы.ПС, ", " + Символы.ПС)
		                      + """" + СокрЛП(ТекСвойство) + """";
	КонецЦикла;
						  
	Если ШаблонТекстаОшибки = "" Тогда
		ШаблонТекстаОшибки = "Отсутствуют обязательные свойства: %1";
	КонецЕсли;
	
	Если НЕ СтрокаСвойств = "" Тогда
		ВызватьИсключение СтрШаблон(ШаблонТекстаОшибки, СтрокаСвойств);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьСвойства()

#КонецОбласти

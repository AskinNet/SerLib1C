Перем ПравилаВыгрузкиТипов;
Перем ПравилаЗагрузкиТипов;

#Область ПреобразованияОбъектовСлужебные

// Возвращает структуру, содержащую информацию
// о переданном виде объектов метаданных
//
// Параметры:
//  Имя					- Строка		- Имя вида объектов метаданных (например, константа,
//										  ПланСчетов и т.п.), может передаваться в ед. мн. числе
//  ТекИБ				- COMОбъект,	- Информационная база, из которой будет получена информация
//										  о виде объектов, Неопределено - текущая инф. база
//
// Возвращаемое значение:
//   Структура			- Содержимое:
//							Коллекция		- Менеджер вида объектов (например, СправочникиМенеджер)
//							МетаКоллекция	- Коллекция метаданных вида объектов (например, Справочники)
//							Имя				- Имя вида объектов (например, "ПланСчетов")
//							ИмяКоллекции	- Имя коллекции вида объектов (например,  "ПланыСчетов")
//							Представление	- Представление вида объектов (например, "План счетов")
//							ПредставлениеМ	- Представление коллекции вида объектов (например,  "Планы счетов")
//							ИмяТипа			- Имя типа (конкретный элемент, например, Контрагенты)
//							Картинка		- Картинка коллекции по умолчанию 
//							КартинкаОбъекта - Картинка объекта коллекции по умолчанию 
//							Конструктор		- Имя функции конструктора экземпляра объекта (например: СоздатьЭлемент)
//							КонструкторАльт - Имя альтернативной функции конструктора экземпляра объекта (например: СоздатьГруппу) 
//
Функция ПолучитьОписаниеВидаОбъектов(Имя, ТекИБ = Неопределено) Экспорт
	
	ВремСтруктураВида = Новый Структура("Коллекция,
										|МетаКоллекция,
										|Имя,
										|ИмяКоллекции,
										|Представление,
										|ПредставлениеМ,
										|ИмяТипа,
										|Картинка,
										|КартинкаОбъекта,
										|Конструктор,
										|КонструкторАльт");
	
	Если ТипЗнч(Имя) = Тип("Тип") Тогда
		МетаданныеТипа = Метаданные.НайтиПоТипу(Имя);
		ИмяТипа = МетаданныеТипа.ПолноеИмя();
		ПозТчк = Найти(ИмяТипа, ".");
		НИмя = НРег(Лев(ИмяТипа, ПозТчк - 1));
		ВремСтруктураВида.ИмяТипа = НРег(Сред(ИмяТипа, ПозТчк + 1));
	ИначеЕсли ТипЗнч(Имя) = Тип("Строка") Тогда
		Если Найти(Имя, ".") > 0 Тогда
			ПозТчк = Найти(Имя, ".");
			НИмя = НРег(Лев(Имя, ПозТчк - 1));
			ВремСтруктураВида.ИмяТипа = НРег(Сред(Имя, ПозТчк + 1));
		Иначе
			НИмя = НРег(СтрЗаменить(СтрЗаменить(Имя, "-", ""), " ", ""));
			ВремСтруктураВида.ИмяТипа = "";
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если НИмя = "константы" ИЛИ НИмя = "константа" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, Константы, ТекИБ.Константы);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.Константы, ТекИБ.Метаданные.Константы);
		ВремСтруктураВида.Имя			= "Константа";
		ВремСтруктураВида.ИмяКоллекции	= "Константы";
		ВремСтруктураВида.Представление	= "Константа";
		ВремСтруктураВида.ПредставлениеМ= "Константы";
		ВремСтруктураВида.Конструктор		= Неопределено;
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.Константа;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.Константа;
		#КонецЕсли
	ИначеЕсли НИмя = "справочники" ИЛИ НИмя = "справочник" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, Справочники, ТекИБ.Справочники);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.Справочники, ТекИБ.Метаданные.Справочники);
		ВремСтруктураВида.Имя			= "Справочник";
		ВремСтруктураВида.ИмяКоллекции	= "Справочники";
		ВремСтруктураВида.Представление	= "Справочник";
		ВремСтруктураВида.ПредставлениеМ= "Справочники";
		ВремСтруктураВида.Конструктор		= "СоздатьЭлемент";
		ВремСтруктураВида.КонструкторАльт	= "СоздатьГруппу";
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.Справочник;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.СправочникОбъект;
		#КонецЕсли
	ИначеЕсли НИмя = "документы" ИЛИ НИмя = "документ" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, Документы, ТекИБ.Документы);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.Документы, ТекИБ.Метаданные.Документы);
		ВремСтруктураВида.Имя			= "Документ";
		ВремСтруктураВида.ИмяКоллекции	= "Документы";
		ВремСтруктураВида.Представление	= "Документ";
		ВремСтруктураВида.ПредставлениеМ= "Документы";
		ВремСтруктураВида.Конструктор		= "СоздатьДокумент";
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.Документ;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.ДокументОбъект;
		#КонецЕсли
	ИначеЕсли НИмя = "журналыдокументов" ИЛИ НИмя = "журналдокументов" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, ЖурналыДокументов, ТекИБ.ЖурналыДокументов);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.ЖурналыДокументов, ТекИБ.Метаданные.ЖурналыДокументов);
		ВремСтруктураВида.Имя			= "ЖурналДокументов";
		ВремСтруктураВида.ИмяКоллекции	= "ЖурналыДокументов";
		ВремСтруктураВида.Представление	= "Журнал документов";
		ВремСтруктураВида.ПредставлениеМ= "Журналы документов";
		ВремСтруктураВида.Конструктор		= Неопределено;
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.ЖурналДокументов;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.ЖурналДокументов;
		#КонецЕсли
	ИначеЕсли НИмя = "планывидовхарактеристик" ИЛИ НИмя = "планвидовхарактеристик" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, ПланыВидовХарактеристик, ТекИБ.ПланыВидовХарактеристик);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.ПланыВидовХарактеристик, ТекИБ.Метаданные.ПланыВидовХарактеристик);
		ВремСтруктураВида.Имя			= "ПланВидовХарактеристик";
		ВремСтруктураВида.ИмяКоллекции	= "ПланыВидовХарактеристик";
		ВремСтруктураВида.Представление	= "План видов характеристик";
		ВремСтруктураВида.ПредставлениеМ= "Планы видов характеристик";
		ВремСтруктураВида.Конструктор		= "СоздатьЭлемент";
		ВремСтруктураВида.КонструкторАльт	= "СоздатьГруппу";
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.ПланВидовХарактеристик;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.ПланВидовХарактеристик;
		#КонецЕсли
	ИначеЕсли НИмя = "планысчетов" ИЛИ НИмя = "плансчетов" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, ПланыСчетов, ТекИБ.ПланыСчетов);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.ПланыСчетов, ТекИБ.Метаданные.ПланыСчетов);
		ВремСтруктураВида.Имя			= "ПланСчетов";
		ВремСтруктураВида.ИмяКоллекции	= "ПланыСчетов";
		ВремСтруктураВида.Представление	= "План счетов";
		ВремСтруктураВида.ПредставлениеМ= "Планы счетов";
		ВремСтруктураВида.Конструктор		= "СоздатьСчет";
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.ПланСчетов;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.ПланСчетов;
		#КонецЕсли
	ИначеЕсли НИмя = "планывидоврасчета" ИЛИ НИмя = "планвидоврасчета" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, ПланыВидовРасчета, ТекИБ.ПланыВидовРасчета);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.ПланыВидовРасчета, ТекИБ.Метаданные.ПланыВидовРасчета);
		ВремСтруктураВида.Имя			= "ПланВидовРасчета";
		ВремСтруктураВида.ИмяКоллекции	= "ПланыВидовРасчета";
		ВремСтруктураВида.Представление	= "План видов расчета";
		ВремСтруктураВида.ПредставлениеМ= "Планы видов расчета";
		ВремСтруктураВида.Конструктор		= "СоздатьВидРасчета";
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.ПланВидовРасчета;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.ПланВидовРасчета;
		#КонецЕсли
	ИначеЕсли НИмя = "перечисления" ИЛИ НИмя = "перечисление" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, Перечисления, ТекИБ.Перечисления);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.Перечисления, ТекИБ.Метаданные.Перечисления);
		ВремСтруктураВида.Имя			= "Перечисление";
		ВремСтруктураВида.ИмяКоллекции	= "Перечисления";
		ВремСтруктураВида.Представление	= "Перечисление";
		ВремСтруктураВида.ПредставлениеМ= "Перечисления";
		ВремСтруктураВида.Конструктор		= Неопределено;
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.Перечисление;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.Перечисление;
		#КонецЕсли
	ИначеЕсли НИмя = "регистрысведений" ИЛИ НИмя = "регистрсведений" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, РегистрыСведений, ТекИБ.РегистрыСведений);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.РегистрыСведений, ТекИБ.Метаданные.РегистрыСведений);
		ВремСтруктураВида.Имя			= "РегистрСведений";
		ВремСтруктураВида.ИмяКоллекции	= "РегистрыСведений";
		ВремСтруктураВида.Представление	= "Регистр сведений";
		ВремСтруктураВида.ПредставлениеМ= "Регистры сведений";
		ВремСтруктураВида.Конструктор		= "СоздатьНаборЗаписей";
		ВремСтруктураВида.КонструкторАльт	= "СоздатьМенеджерЗаписи";
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.стд_РегистрыСведений;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.РегистрСведений;
		#КонецЕсли
	ИначеЕсли НИмя = "регистрынакопления" ИЛИ НИмя = "регистрнакопления" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, РегистрыНакопления, ТекИБ.РегистрыНакопления);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.РегистрыНакопления, ТекИБ.Метаданные.РегистрыНакопления);
		ВремСтруктураВида.Имя			= "РегистрНакопления";
		ВремСтруктураВида.ИмяКоллекции	= "РегистрыНакопления";
		ВремСтруктураВида.Представление	= "Регистр накопления";
		ВремСтруктураВида.ПредставлениеМ= "Регистры накопления";
		ВремСтруктураВида.Конструктор		= "СоздатьНаборЗаписей";
		ВремСтруктураВида.КонструкторАльт	= "СоздатьМенеджерЗаписи";
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.РегистрНакопления;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.РегистрНакопления;
		#КонецЕсли
	ИначеЕсли НИмя = "регистрыбухгалтерии" ИЛИ НИмя = "регистрбухгалтерии" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, РегистрыБухгалтерии, ТекИБ.РегистрыБухгалтерии);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.РегистрыБухгалтерии, ТекИБ.Метаданные.РегистрыБухгалтерии);
		ВремСтруктураВида.Имя			= "РегистрБухгалтерии";
		ВремСтруктураВида.ИмяКоллекции	= "РегистрыБухгалтерии";
		ВремСтруктураВида.Представление	= "Регистр бухгалтерии";
		ВремСтруктураВида.ПредставлениеМ= "Регистры бухгалтерии";
		ВремСтруктураВида.Конструктор		= "СоздатьНаборЗаписей";
		ВремСтруктураВида.КонструкторАльт	= "СоздатьМенеджерЗаписи";
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.РегистрБухгалтерии;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.РегистрБухгалтерии;
		#КонецЕсли
	ИначеЕсли НИмя = "регистрырасчета" ИЛИ НИмя = "регистррасчета" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, РегистрыРасчета, ТекИБ.РегистрыРасчета);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.РегистрыРасчета, ТекИБ.Метаданные.РегистрыРасчета);
		ВремСтруктураВида.Имя			= "РегистрРасчета";
		ВремСтруктураВида.ИмяКоллекции	= "РегистрыРасчета";
		ВремСтруктураВида.Представление	= "Регистр расчета";
		ВремСтруктураВида.ПредставлениеМ= "Регистры расчета";
		ВремСтруктураВида.Конструктор		= "СоздатьНаборЗаписей";
		ВремСтруктураВида.КонструкторАльт	= "СоздатьМенеджерЗаписи";
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.РегистрРасчета;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.РегистрРасчета;
		#КонецЕсли
	ИначеЕсли НИмя = "отчеты" ИЛИ НИмя = "отчет" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, Отчеты, ТекИБ.Отчеты);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.Отчеты, ТекИБ.Метаданные.Отчеты);
		ВремСтруктураВида.Имя			= "Отчет";
		ВремСтруктураВида.ИмяКоллекции	= "Отчеты";
		ВремСтруктураВида.Представление	= "Отчет";
		ВремСтруктураВида.ПредставлениеМ= "Отчеты";
		ВремСтруктураВида.Конструктор		= "Создать";
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.Отчет;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.Отчет;
		#КонецЕсли
	ИначеЕсли НИмя = "обработки" ИЛИ НИмя = "обработка" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, Обработки, ТекИБ.Обработки);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.Обработки, ТекИБ.Метаданные.Обработки);
		ВремСтруктураВида.Имя			= "Обработка";
		ВремСтруктураВида.ИмяКоллекции	= "Обработки";
		ВремСтруктураВида.Представление	= "Обработка";
		ВремСтруктураВида.ПредставлениеМ= "Обработки";
		ВремСтруктураВида.Конструктор		= "Создать";
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.Обработка;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.Обработка;
		#КонецЕсли
	ИначеЕсли НИмя = "бизнеспроцессы" ИЛИ НИмя = "бизнеспроцесс" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, БизнесПроцессы, ТекИБ.БизнесПроцессы);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.БизнесПроцессы, ТекИБ.Метаданные.БизнесПроцессы);
		ВремСтруктураВида.Имя			= "БизнесПроцесс";
		ВремСтруктураВида.ИмяКоллекции	= "БизнесПроцессы";
		ВремСтруктураВида.Представление	= "Бизнес-процесс";
		ВремСтруктураВида.ПредставлениеМ= "Бизнес-процессы";
		ВремСтруктураВида.Конструктор		= "СоздатьБизнесПроцесс";
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.БизнесПроцесс;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.БизнесПроцессОбъект;
		#КонецЕсли
	ИначеЕсли НИмя = "задачи" ИЛИ НИмя = "задача" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, Задачи, ТекИБ.Задачи);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.Задачи, ТекИБ.Метаданные.Задачи);
		ВремСтруктураВида.Имя			= "Задача";
		ВремСтруктураВида.ИмяКоллекции	= "Задачи";
		ВремСтруктураВида.Представление	= "Задача";
		ВремСтруктураВида.ПредставлениеМ= "Задачи";
		ВремСтруктураВида.Конструктор		= "СоздатьЗадачу";
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.Задача;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.ЗадачаОбъект;
		#КонецЕсли
	ИначеЕсли НИмя = "планыобмена" ИЛИ НИмя = "планобмена" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, ПланыОбмена, ТекИБ.ПланыОбмена);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.ПланыОбмена, ТекИБ.Метаданные.ПланыОбмена);
		ВремСтруктураВида.Имя			= "ПланОбмена";
		ВремСтруктураВида.ИмяКоллекции	= "ПланыОбмена";
		ВремСтруктураВида.Представление	= "План обмена";
		ВремСтруктураВида.ПредставлениеМ= "Планы обмена";
		ВремСтруктураВида.Конструктор		= "СоздатьУзел";
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.ПланОбмена;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.ПланОбмена;
		#КонецЕсли
	ИначеЕсли НИмя = "общиеформы" ИЛИ НИмя = "общаяформа" Тогда
		ВремСтруктураВида.Коллекция		= Неопределено;
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.ОбщиеФормы, ТекИБ.Метаданные.ОбщиеФормы);
		ВремСтруктураВида.Имя			= "ОбщаяФорма";
		ВремСтруктураВида.ИмяКоллекции	= "ОбщиеФормы";
		ВремСтруктураВида.Представление	= "Общая форма";
		ВремСтруктураВида.ПредставлениеМ= "Общие формы";
		ВремСтруктураВида.Конструктор		= Неопределено;
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.РедактироватьВДиалоге;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.РедактироватьВДиалоге;
		#КонецЕсли
	ИначеЕсли НИмя = "регламентныезадания" ИЛИ НИмя = "регламентноезадание" Тогда
		ВремСтруктураВида.Коллекция		= ?(ТекИБ = Неопределено, РегламентныеЗадания, ТекИБ.РегламентныеЗадания);
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.РегламентныеЗадания, ТекИБ.Метаданные.РегламентныеЗадания);
		ВремСтруктураВида.Имя			= "РегламентноеЗадание";
		ВремСтруктураВида.ИмяКоллекции	= "РегламентныеЗадания";
		ВремСтруктураВида.Представление	= "Регламентное задание";
		ВремСтруктураВида.ПредставлениеМ= "Регламентные задания";
		ВремСтруктураВида.Конструктор		= "СоздатьРегламентноеЗадание()";
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.РегламентныеЗадания;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.РегламентноеЗадание;
		#КонецЕсли
	ИначеЕсли НИмя = "роли" ИЛИ НИмя = "роль" Тогда
		ВремСтруктураВида.Коллекция		= Неопределено;
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.Роли, ТекИБ.Метаданные.Роли);
		ВремСтруктураВида.Имя			= "Роль";
		ВремСтруктураВида.ИмяКоллекции	= "Роли";
		ВремСтруктураВида.Представление	= "Роль";
		ВремСтруктураВида.ПредставлениеМ= "Роли";
		ВремСтруктураВида.Конструктор		= Неопределено;
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.ПользовательБезНеобходимыхСвойств;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.ПользовательБезНеобходимыхСвойств;
		#КонецЕсли
	ИначеЕсли НИмя = "интерфейсы" ИЛИ НИмя = "интерфейс" Тогда
		ВремСтруктураВида.Коллекция		= Неопределено;
		ВремСтруктураВида.МетаКоллекция	= ?(ТекИБ = Неопределено, Метаданные.Интерфейсы, ТекИБ.Метаданные.Интерфейсы);
		ВремСтруктураВида.Имя			= "Интерфейс";
		ВремСтруктураВида.ИмяКоллекции	= "Интерфейсы";
		ВремСтруктураВида.Представление	= "Интерфейс";
		ВремСтруктураВида.ПредставлениеМ= "Интерфейсы";
		ВремСтруктураВида.Конструктор		= Неопределено;
		ВремСтруктураВида.КонструкторАльт	= Неопределено;
		#Если Клиент Тогда
		ВремСтруктураВида.Картинка		= БиблиотекаКартинок.НастройкаСписка;
		ВремСтруктураВида.КартинкаОбъекта	= БиблиотекаКартинок.НастройкаСписка;
		#КонецЕсли
	КонецЕсли;
	
	Возврат ВремСтруктураВида;
	
КонецФункции // ПолучитьОписаниеВидаОбъектов()

// Возвращает имя пердопределенных данных для переданного значения
// требуется, т.к. в разных версиях различается способ получения имени предопределенных данных
//
// Параметры:
//  Значение			- ЛюбаяСсылка	- Имя значение ссылочного типа (СправочникСсылка, ПеречислениеСсылка и т.п.)
//
// Возвращаемое значение:
//   Строка				- Имя предопределенных данных, если значение не является предопределенным, возвращается пустая строка
//
Функция ПолучитьИмяПредопределенныхДанных(Значение) Экспорт
	
	ИмяПредопределенныхДанных = "";
	
	Текст83 = "Если Метаданные.Справочники.Содержит(МетаданныеЗначения)
			  | ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеЗначения)
			  | ИЛИ Метаданные.ПланыСчетов.Содержит(МетаданныеЗначения)
			  | ИЛИ Метаданные.ПланыВидовРасчета.Содержит(МетаданныеЗначения) Тогда
			  |    Если Значение.Предопределенный Тогда
			  |        ИмяПредопределенныхДанных = Значение.ИмяПредопределенныхДанных;
			  |    КонецЕсли;
			  | ИначеЕсли Метаданные.ПланыОбмена.Содержит(МетаданныеЗначения) Тогда
			  |    Если Значение.ЭтотУзел Тогда
			  |        ИмяПредопределенныхДанных = ""ЭтотУзел"";
			  |    КонецЕсли;
			  |КонецЕсли;";
	
	Текст82 = "Если Значение.Предопределенный Тогда
			  |    Если Метаданные.Справочники.Содержит(МетаданныеЗначения) Тогда
			  |        ИмяПредопределенныхДанных = Справочники[МетаданныеЗначения.Имя].ПолучитьИмяПредопределенного(Значение);
			  |    ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеЗначения) Тогда
			  |        ИмяПредопределенныхДанных = ПланыВидовХарактеристик[МетаданныеЗначения.Имя].ПолучитьИмяПредопределенного(Значение);
			  |    ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеЗначения) Тогда
			  |        ИмяПредопределенныхДанных = ПланыСчетов[МетаданныеЗначения.Имя].ПолучитьИмяПредопределенного(Значение);
			  |    ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеЗначения) Тогда
			  |        ИмяПредопределенныхДанных = ПланыВидовРасчета[МетаданныеЗначения.Имя].ПолучитьИмяПредопределенного(Значение);
			  |    ИначеЕсли Метаданные.ПланыОбмена.Содержит(МетаданныеЗначения) Тогда
			  |        ИмяПредопределенныхДанных = ""ЭтотУзел"";
			  |    КонецЕсли;
			  |КонецЕсли;";
	Если ЗначениеЗаполнено(Значение) Тогда
		Это83 = Истина;
		Попытка
			Выполнить(Текст83);
		Исключение
			Это83 = Ложь;
		КонецПопытки;
		Если НЕ Это83 Тогда
			Попытка
				Выполнить(Текст82);
			Исключение
				ТекстОшибки = СтрШаблон("Ошибка получения имени предопределенных данных ""%1"": %2%3",
				                        СокрЛП(Значение),
				                        Символы.ПС,
				                        ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение ТекстОшибки;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
		
	Возврат ИмяПредопределенныхДанных;	
	
КонецФункции // ПолучитьИмяПредопределенныхДанных()
	
// Функция "расщепляет" строку на подстроки, используя заданный 
//		разделитель. Разделитель может иметь любую длину. 
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//
//	Параметры: 
//		Стр            -    строка, которую необходимо разложить на подстроки. 
//		                    Параметр передается по значению.
//		Разделитель    -    строка-разделитель, по умолчанию - запятая.
//		ВключатьПустые -    Указывает необходимость включать в результат пустые строки.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция РазложитьСтроку(Знач Стр, Разделитель = ",", ВключатьПустые = Истина) Экспорт
	
	Попытка
		Возврат СтрРазделить(Стр, Разделитель, ВключатьПустые);
	Исключение
	КонецПопытки;
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз - 1));
			Стр = СокрЛ(Сред(Стр, Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			Значение = Лев(Стр, Поз - 1);
			Если НЕ ПустаяСтрока(Значение) ИЛИ ВключатьПустые Тогда
				МассивСтрок.Добавить(Значение);
			КонецЕсли;
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // РазложитьСтроку()

// Проверяет использование свойства (по имени) в соответствии со списками используемых и исключаемых свойств
//
// Параметры:
//  ИмяСвойства			- Строка					- Имя проверяемого свойства
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
// Возвращаемое значение:
//   Булево				- Истина - свойство используется; Ложь - свойство не используется
//
Функция ИспользоватьСвойство(Знач ИмяСвойства, Знач СписокСвойств = Неопределено, Знач ИсключаяСвойства = Неопределено)
	
	Если ТипЗнч(СписокСвойств) = Тип("Строка") Тогда
		СписокСвойств = РазложитьСтроку(СписокСвойств, ",", Ложь);
	КонецЕсли;
	Если НЕ ТипЗнч(СписокСвойств) = Тип("Массив") Тогда
		СписокСвойств = Новый Массив();
	КонецЕсли;
	
	Если ТипЗнч(ИсключаяСвойства) = Тип("Строка") Тогда
		ИсключаяСвойства = РазложитьСтроку(ИсключаяСвойства, ",", Ложь);
	КонецЕсли;
	Если НЕ ТипЗнч(ИсключаяСвойства) = Тип("Массив") Тогда
		ИсключаяСвойства = Новый Массив();
	КонецЕсли;
	
	Если СписокСвойств.Количество() = 0 И ИсключаяСвойства.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ИсключаяСвойства.Найти(ИмяСвойства) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (НЕ СписокСвойств.Найти(ИмяСвойства) = Неопределено) ИЛИ СписокСвойств.Количество() = 0;
	
КонецФункции // ИспользоватьСвойство()

// Преобразует описание типов в структуру
//
// Параметры:
//  ОписаниеТипов			- ОписаниеТипов				- Преобразуемое значение
//
// Возвращаемое значение:
//   Структура			- результат преобразования
//	   Типы							- Массив			- Список типов
//	   КвалификаторыЧисла			- Структура			- Описание квалификаторов числа
//		   Разрядность					- Число				- Разрядность
//		   РазрядностьДробнойЧасти		- Число				- Разрядность дробной части
//		   ДопустимыйЗнак				- ДопустимыйЗнак	- Допустимый знак
//	   КвалификаторыСтроки			- Структура			- Описание квалификаторов строки
//		   Длина						- Число				- Длина
//		   ДопустимаяДлина				- ДопустимаяДлина	- Разрядность дробной части
//	   КвалификаторыДаты			- Структура			- Описание квалификаторов даты
//		   ЧастиДаты					- ЧастиДаты			- Части даты (Дата / Время)
//	   КвалификаторыДвоичныхДанных	- Структура			- Описание квалификаторов двоичных данных
//		   Длина						- Число				- Длина
//		   ДопустимаяДлина				- ДопустимаяДлина	- Разрядность дробной части
//
Функция ОписаниеТиповВСтруктуру(ОписаниеТипов) Экспорт
	
	СтруктураОписаниеТипов = Новый Структура("Типы,
											 |КвалификаторыЧисла,
											 |КвалификаторыСтроки,
											 |КвалификаторыДаты,
											 |КвалификаторыДвоичныхДанных"
										    , Новый Массив()
										    , Новый Структура("Разрядность, РазрядностьДробнойЧасти, ДопустимыйЗнак", 10, 0)
										    , Новый Структура("Длина, ДопустимаяДлина", 10, "Переменная")
										    , Новый Структура("ЧастиДаты", "ДатаВремя")
										    , Новый Структура("Длина, ДопустимаяДлина", 0, "Переменная"));
								   
	Для Каждого ТекТип Из ОписаниеТипов.Типы() Цикл
		МетаТип = Метаданные.НайтиПоТипу(ТекТип);
		Если НЕ МетаТип = Неопределено Тогда
			СтруктураОписаниеТипов.Типы.Добавить(МетаТип.ПолноеИмя());
		Иначе
			СтруктураОписаниеТипов.Типы.Добавить(СокрЛП(ТекТип));
		КонецЕсли;
	КонецЦикла;
	
	СтруктураОписаниеТипов.КвалификаторыЧисла.Разрядность				= ОписаниеТипов.КвалификаторыЧисла.Разрядность;
	СтруктураОписаниеТипов.КвалификаторыЧисла.РазрядностьДробнойЧасти	= ОписаниеТипов.КвалификаторыЧисла.РазрядностьДробнойЧасти;
	СтруктураОписаниеТипов.КвалификаторыЧисла.ДопустимыйЗнак			=
		?(ОписаниеТипов.КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Неотрицательный, "Неотрицательный", "Любой");
	
	СтруктураОписаниеТипов.КвалификаторыСтроки.Длина			= ОписаниеТипов.КвалификаторыСтроки.Длина;
	СтруктураОписаниеТипов.КвалификаторыСтроки.ДопустимаяДлина	=
		?(ОписаниеТипов.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Фиксированная, "Фиксированная", "Переменная");
	
	СтруктураОписаниеТипов.КвалификаторыДаты.ЧастиДаты	=
		?(ОписаниеТипов.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время,
		  "Время",
		  ?(ОписаниеТипов.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата, "Дата", "ДатаВремя"));
	
	СтруктураОписаниеТипов.КвалификаторыДвоичныхДанных.Длина			= ОписаниеТипов.КвалификаторыДвоичныхДанных.Длина;
	СтруктураОписаниеТипов.КвалификаторыДвоичныхДанных.ДопустимаяДлина	=
		?(ОписаниеТипов.КвалификаторыДвоичныхДанных.ДопустимаяДлина = ДопустимаяДлина.Фиксированная, "Фиксированная", "Переменная");
		
	Возврат СтруктураОписаниеТипов;
	
КонецФункции // ОписаниеТиповВСтруктуру()

// Получает описание типов из структуры
//
// Параметры:
//   СтруктураОписаниеТипов			- Структура			- структура описания типов для преобразования
//	   Типы								- Массив			- Список типов
//	   КвалификаторыЧисла				- Структура			- Описание квалификаторов числа
//		   Разрядность						- Число				- Разрядность
//		   РазрядностьДробнойЧасти			- Число				- Разрядность дробной части
//		   ДопустимыйЗнак					- ДопустимыйЗнак	- Допустимый знак
//	   КвалификаторыСтроки				- Структура			- Описание квалификаторов строки
//		   Длина							- Число				- Длина
//		   ДопустимаяДлина					- ДопустимаяДлина	- Разрядность дробной части
//	   КвалификаторыДаты				- Структура			- Описание квалификаторов даты
//		   ЧастиДаты						- ЧастиДаты			- Части даты (Дата / Время)
//	   КвалификаторыДвоичныхДанных		- Структура			- Описание квалификаторов двоичных данных
//		   Длина							- Число				- Длина
//		   ДопустимаяДлина					- ДопустимаяДлина	- Разрядность дробной части
//
// Возвращаемое значение:
//  ОписаниеТипов			- Созданное описание типов
//
Функция ОписаниеТиповИзСтруктуры(СтруктураОписаниеТипов) Экспорт
	
	МассивТипов = Новый Массив();
	
	Для Каждого ТекТип Из СтруктураОписаниеТипов.Типы Цикл
		Попытка
			НовыйТип = Тип(СтрЗаменить(ТекТип, ".", "Ссылка."));
			МассивТипов.Добавить(НовыйТип);
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
		
	КвалификаторыЧисла = Новый КвалификаторыЧисла(СтруктураОписаниеТипов.КвалификаторыЧисла.Разрядность,
												  СтруктураОписаниеТипов.КвалификаторыЧисла.РазрядностьДробнойЧасти,
												  Вычислить("ДопустимыйЗнак." + СтруктураОписаниеТипов.КвалификаторыЧисла.ДопустимыйЗнак));
	
	КвалификаторыСтроки = Новый КвалификаторыСтроки(СтруктураОписаниеТипов.КвалификаторыСтроки.Длина,
													Вычислить("ДопустимаяДлина." + СтруктураОписаниеТипов.КвалификаторыСтроки.ДопустимаяДлина));
	
	КвалификаторыДаты = Новый КвалификаторыДаты(Вычислить("ЧастиДаты." + СтруктураОписаниеТипов.КвалификаторыДаты.ЧастиДаты));
	
	КвалификаторыДвоичныхДанных = Новый КвалификаторыДвоичныхДанных(СтруктураОписаниеТипов.КвалификаторыСтроки.Длина,
																	Вычислить("ДопустимаяДлина." + СтруктураОписаниеТипов.КвалификаторыДвоичныхДанных.ДопустимаяДлина));
																		  
	Возврат Новый ОписаниеТипов(МассивТипов, КвалификаторыЧисла, КвалификаторыСтроки, КвалификаторыДаты, КвалификаторыДвоичныхДанных);
	
КонецФункции // ОписаниеТиповИзСтруктуры()

// Проверяет использование свойства объекта и добавляет в структуру
//
// Параметры:
//  СтруктураОбъекта	- Структура					- Заполняемая структура объекта
//  Объект				- Объект, ЛюбаяСсылка		- Преобразуемый объект
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
Процедура СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, ИмяСвойства, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено)
	
	Если НЕ ИспользоватьСвойство(ИмяСвойства, СписокСвойств, ИсключаяСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОбъекта.Вставить(ИмяСвойства, ЗначениеВСтруктуру(Объект[ИмяСвойства]));
	
КонецПроцедуры //СвойствоОбъектаВСтруктуру()
	
// Проверяет использование свойства объекта и заполняет значение свойства из структуры
//
// Параметры:
//  Объект				- Объект					- Заполняемый объект
//  СтруктураОбъекта	- Структура					- Структура объекта
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
Процедура СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ИмяСвойства, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено)
	
	Если НЕ СтруктураОбъекта.Свойство(ИмяСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИспользоватьСвойство(ИмяСвойства, СписокСвойств, ИсключаяСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	Объект[ИмяСвойства] = ЗначениеИзСтруктуры(СтруктураОбъекта[ИмяСвойства]);
	
КонецПроцедуры // СвойствоОбъектаИзСтруктуры()
	
// Добавляет данные табличной части объекта в структуру
//
// Параметры:
//  СтруктураОбъекта	- Структура					- Заполняемая структура объекта
//  Объект				- Объект, ЛюбаяСсылка		- Преобразуемый объект
//  ИмяТЧ				- Строка					- Имя преобразуемой табличной части
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
Процедура ТЧОбъектаВСтруктуру(СтруктураОбъекта, Объект, ИмяТЧ, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено)
	
	Если НЕ ИспользоватьСвойство("__ТЧ." + ИмяТЧ, СписокСвойств, ИсключаяСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураОбъекта.Свойство("__ТЧ") Тогда
		СтруктураОбъекта.Вставить("__ТЧ", Новый Структура());
	КонецЕсли;
	
	МетаОбъект = Объект.Метаданные();
	
	МетаТЧ = МетаОбъект.ТабличныеЧасти.Найти(ИмяТЧ);
	
	Если МетаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив();
	Для Каждого ТекСтрока Из Объект[ИмяТЧ] Цикл
		
		СтруктураСтроки = Новый Структура();
		СтруктураСтроки.Вставить("__Индекс", Объект[ИмяТЧ].Индекс(ТекСтрока));
		СтруктураСтроки.Вставить("НомерСтроки", ТекСтрока.НомерСтроки);
		
		Для Каждого ТекРеквизит Из МетаТЧ.Реквизиты Цикл
			Если НЕ ИспользоватьСвойство(ИмяТЧ + "." + ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураСтроки.Вставить(ТекРеквизит.Имя, ЗначениеВСтруктуру(ТекСтрока[ТекРеквизит.Имя]));
		КонецЦикла;
		
		МассивСтрок.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	СтруктураОбъекта.__ТЧ.Вставить(ИмяТЧ, МассивСтрок);
	
КонецПроцедуры // ТЧОбъектаВСтруктуру()

// Заполняет табличную часть объекта из структуры
//
// Параметры:
//  Объект				- Объект, ЛюбаяСсылка		- Заполняемый объект
//  СтруктураОбъекта	- Структура					- Структура данных объекта
//  ИмяТЧ				- Строка					- Имя преобразуемой табличной части
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
Процедура ТЧОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ИмяТЧ, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено)
	
	Если НЕ СтруктураОбъекта.Свойство("__ТЧ") Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ СтруктураОбъекта.__ТЧ.Свойство(ИмяТЧ) Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ ИспользоватьСвойство("__ТЧ." + ИмяТЧ, СписокСвойств, ИсключаяСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	МетаОбъект = Объект.Метаданные();
	
	МетаТЧ = МетаОбъект.ТабличныеЧасти.Найти(ИмяТЧ);
	
	Если МетаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Объект[ИмяТЧ].Очистить();
	
	МассивСтрок = СтруктураОбъекта.__ТЧ[ИмяТЧ];
	
	Для Каждого ТекСтрока Из МассивСтрок Цикл
		
		НоваяСтрока = Объект[ИмяТЧ].Добавить();
		
		Для Каждого ТекРеквизит Из МетаТЧ.Реквизиты Цикл
			
			Если НЕ ТекСтрока.Свойство(ТекРеквизит.Имя) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ИспользоватьСвойство(ИмяТЧ + "." + ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока[ТекРеквизит.Имя] = ЗначениеИзСтруктуры(ТекСтрока[ТекРеквизит.Имя]);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ТЧОбъектаИзСтруктуры()
	
// Преобразует значения субконто записи регистра бухгалтерии в структуру
//
// Параметры:
//  Запись				- РегистрБухгалтерииЗапись	- Преобразуемая запись регистра бухгалтерии
//  ДтКт				- Строка					- признак Дт/Кт - "Дт", "Кт", "" 
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
// Возвращаемое значение:
//   Массив(Структура)			- результат преобразования
//		НомерСтроки		- Число								- Номер субконто
//		ВидСубконто		- ПланВидовХарактеристикСсылка		- Вид субконто
//		Значение		- Произвольный						- Значение субконто
//
Функция ЗначенияСубконтоЗаписиВСтруктуру(Запись, ДтКт = "", СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено)
	
	ВидыСубконто = Запись["Счет" + ДтКт].ВидыСубконто;
	ЗначенияСубконто = Запись["Субконто" + ДтКт];
	
	МассивСубконто = Новый Массив();
	й = 1;
	Для Каждого ТекСтрокаВида Из ВидыСубконто Цикл
		Если НЕ ИспользоватьСвойство("Субконто" + ДтКт + Формат(й, "ЧДЦ=; ЧГ="), СписокСвойств, ИсключаяСвойства) Тогда
			й = й + 1;
			Продолжить;
		КонецЕсли;
		МассивСубконто.Добавить(Новый Структура("НомерСтроки, ВидСубконто, Значение"
												, й
												, ЗначениеВСтруктуру(ТекСтрокаВида.ВидСубконто)
												, ЗначениеВСтруктуру(ЗначенияСубконто[ТекСтрокаВида.ВидСубконто])));
		й = й + 1;
	КонецЦикла;
	
	Возврат МассивСубконто;
	
КонецФункции // ЗначенияСубконтоВСтруктуру()

// Заполняет значения субконто записи регистра бухгалтерии из структуры
//
// Параметры:
//  Запись				- РегистрБухгалтерииЗапись	- Заполняемая запись регистра бухгалтерии
//  СтруктураЗаписи		- Структура					- Структура данных записи регистра бухгалтерии 
//  ДтКт				- Строка					- признак Дт/Кт - "Дт", "Кт", "" 
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
Процедура ЗначенияСубконтоЗаписиИзСтруктуры(Запись, СтруктураЗаписи, ДтКт = "", СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено)
	
	ВидыСубконто = Запись["Счет" + ДтКт].ВидыСубконто;
	ЗначенияСубконто = Запись["Субконто" + ДтКт];
	
	МассивСубконто = СтруктураЗаписи["Субконто" + ДтКт];
	
	й = 1;
	Для Каждого ТекСтрока Из МассивСубконто Цикл
		
		Если НЕ ИспользоватьСвойство("Субконто" + ДтКт + Формат(й, "ЧДЦ=; ЧГ="), СписокСвойств, ИсключаяСвойства) Тогда
			й = й + 1;
			Продолжить;
		КонецЕсли;
		
		ВидСубконто = ЗначениеИзСтруктуры(ТекСтрока.ВидСубконто);
		
		Если НЕ ЗначениеЗаполнено(ВидСубконто) Тогда
			й = й + 1;
			Продолжить;
		КонецЕсли;
		
		СтрокаВида = ВидыСубконто.Найти(ВидСубконто, "ВидСубконто");
		
		Если СтрокаВида = Неопределено Тогда
			й = й + 1;
			Продолжить;
		КонецЕсли;
		
		ЗначенияСубконто[ВидСубконто] = ЗначениеИзСтруктуры(ТекСтрока.Значение);
		
		й = й + 1;
		
	КонецЦикла;
	
КонецПроцедуры // ЗначенияСубконтоИзСтруктуры()

// Заполняет значение измерения записи регистра бухгалтерии из структуры
// с учетом признаков учета счета
//
// Параметры:
//  Запись				- РегистрБухгалтерииЗапись		- Заполняемая запись регистра бухгалтерии
//  СтруктураЗаписи		- Структура						- Структура данных записи регистра бухгалтерии 
//  ОписаниеПоля		- ОбъектМетаданных.Измерение	- Описание метаданных измерения регистра 
//  ДтКт				- Строка						- признак Дт/Кт - "Дт", "Кт", "" 
//
Процедура ЗаполнитьИзмерениеРегистраБухгалтерии(Запись, СтруктураЗаписи, ОписаниеПоля, ДтКт)
	
	ЗаполнятьЗначение = Истина;
	
	Если ЗначениеЗаполнено(ОписаниеПоля.ПризнакУчета) Тогда
		Если НЕ Запись["Счет" + ДтКт][ОписаниеПоля.ПризнакУчета.Имя] Тогда
			ЗаполнятьЗначение = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполнятьЗначение Тогда
		Запись[ОписаниеПоля.Имя + ДтКт] = ЗначениеИзСтруктуры(СтруктураЗаписи[ОписаниеПоля.Имя + ДтКт]);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьИзмерениеРегистраБухгалтерии()

// Заполняет значение ресурса записи регистра бухгалтерии из структуры
// с учетом признаков учета счета
//
// Параметры:
//  Запись				- РегистрБухгалтерииЗапись		- Заполняемая запись регистра бухгалтерии
//  СтруктураЗаписи		- Структура						- Структура данных записи регистра бухгалтерии 
//  ОписаниеПоля		- ОбъектМетаданных.Ресурс		- Описание метаданных ресурса регистра 
//  ДтКт				- Строка						- признак Дт/Кт - "Дт", "Кт", "" 
//
Процедура ЗаполнитьРесурсРегистраБухгалтерии(Запись, СтруктураЗаписи, ОписаниеПоля, ДтКт)
	
	ЗаполнятьЗначение = Истина;
	
	Если ЗначениеЗаполнено(ОписаниеПоля.ПризнакУчета) Тогда
		Если НЕ Запись["Счет" + ДтКт][ОписаниеПоля.ПризнакУчета.Имя] Тогда
			ЗаполнятьЗначение = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполнятьЗначение Тогда
		Запись[ОписаниеПоля.Имя + ДтКт] = ЗначениеИзСтруктуры(СтруктураЗаписи[ОписаниеПоля.Имя + ДтКт]);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРесурсРегистраБухгалтерии()

// Функция - возвращает представление описания объекта в текстовом формате JSON
//
// Параметры:
//  ОписаниеОбъекта	 - Структура, Массив(Структура)	 - описание объекта для преобразования
// 
// Возвращаемое значение:
//  Строка - представление описания объекта в текстовом формате JSON
//
Функция ЗаписатьОписаниеОбъектаВJSON(Знач ОписаниеОбъекта) Экспорт
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, Символы.Таб));
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON();
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.Microsoft;
	
	Попытка
		ЗаписатьJSON(Запись, ОписаниеОбъекта, НастройкиСериализации);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Возврат Запись.Закрыть();
	
КонецФункции // ЗаписатьОписаниеОбъектаВJSON()

// Функция - возвращает описание объекта, прочитанное из текстового формата JSON
//
// Параметры:
//  ТекстОписанияОбъекта       - Строка           - представление описания объекта в текстовом формате JSON
//  СвойстваСоЗначениемДата    - Массив, Строка   - список свойств, которые должны быть преобразованы в формат даты
// 
// Возвращаемое значение:
//  Структура, Массив(Структура)	 - описание объекта 
//
Функция ПрочитатьОписаниеОбъектаИзJSON(Знач ТекстОписанияОбъекта, Знач СвойстваСоЗначениемДата = Неопределено) Экспорт
	
	Чтение = Новый ЧтениеJSON();
	Чтение.УстановитьСтроку(ТекстОписанияОбъекта);
		
	Если ТипЗнч(СвойстваСоЗначениемДата) = Тип("Строка") Тогда
		СвойстваСоЗначениемДата = РазложитьСтроку(СвойстваСоЗначениемДата, ",", Ложь);
	ИначеЕсли НЕ ТипЗнч(СвойстваСоЗначениемДата) = Тип("Массив") Тогда
		СвойстваСоЗначениемДата = Новый Массив();
	КонецЕсли;
		
	Попытка
		Возврат ПрочитатьJSON(Чтение, Ложь, СвойстваСоЗначениемДата, ФорматДатыJSON.ISO);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецФункции // ПрочитатьОписаниеОбъектаИзJSON()

#КонецОбласти // ПреобразованияОбъектовСлужебные

#Область СохранениеЗначенийСлужебные

// Преобразует переданное значение в структуру, значения атомарных типов, возвращаются как есть
//
// Параметры:
//  Значение			- Произвольный				- Преобразуемое значение
//
// Возвращаемое значение:
//   Структура, Массив, Число, Строка, Дата, Булево			- результат преобразования
//
Функция ЗначениеВСтруктуру(Значение) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Строка")
	 ИЛИ ТипЗнч(Значение) = Тип("Число")
	 ИЛИ ТипЗнч(Значение) = Тип("Булево")
	 ИЛИ ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат Значение;
	ИначеЕсли ТипЗнч(Значение) = Тип("ХранилищеЗначения") Тогда
		Возврат "/ValueStorage(" + ЗначениеВСтрокуВнутр(Значение) + ")/";
	ИначеЕсли ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Тогда
		Возврат "/UniqueID(" + СокрЛП(Значение) + ")/";
	ИначеЕсли ТипЗнч(Значение) = Тип("NULL") Тогда
		Возврат "/NULL()/";
	ИначеЕсли ТипЗнч(Значение) = Тип("Неопределено") Тогда
		Возврат "/Undefined()/";
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив")
		  ИЛИ ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
		Возврат МассивВСтруктуру(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура")
		  ИЛИ ТипЗнч(Значение) = Тип("ФиксированнаяСтруктура") Тогда
		Возврат СтруктураВСтруктуру(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("Соответствие")
		  ИЛИ ТипЗнч(Значение) = Тип("ФиксированноеСоответствие") Тогда
		Возврат СоответствиеВСтруктуру(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Возврат СписокЗначенийВСтруктуру(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
		Возврат ТаблицаЗначенийВСтруктуру(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("ДеревоЗначений") Тогда
		Возврат ДеревоЗначенийВСтруктуру(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("ОписаниеТипов") Тогда
		Возврат ОписаниеТиповВСтруктуру(Значение);
	КонецЕсли;
	
	МетаОбъект = Метаданные.НайтиПоТипу(ТипЗнч(Значение));
	Если НЕ МетаОбъект = Неопределено Тогда
		Возврат СсылкаВСтруктуру(Значение);
	Иначе
		Возврат "/UnknownType(" + ЗначениеВСтрокуВнутр(Значение) + ")/";
	КонецЕсли;
	
КонецФункции // ЗначениеВСтруктуру()

// Преобразует переданную ссылку в структуру, значения атомарных типов, возвращаются как есть
//
// Параметры:
//  Значение			- ЛюбаяСсылка				- Преобразуемое ссылка
//
// Возвращаемое значение:
//   Структура			- результат преобразования
//
Функция СсылкаВСтруктуру(Значение) Экспорт
	
	МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(Значение));
	
	Если МетаданныеЗначения = Неопределено Тогда
		Возврат Значение;
	ИначеЕсли ВРег(Лев(МетаданныеЗначения.ПолноеИмя(), 13)) = ВРег("Перечисление.") Тогда
		ИмяПредопределенныхДанных = "";
		Если ЗначениеЗаполнено(Значение) Тогда
			Индекс = Перечисления[МетаданныеЗначения.Имя].Индекс(Значение);
			ИмяПредопределенныхДанных = МетаданныеЗначения.ЗначенияПеречисления.Получить(Индекс).Имя;
		КонецЕсли;
		ОписаниеЗначения = Новый Структура("Тип, Ид, ИдПолный, Предопределенный, ИмяПредопределенныхДанных, Представление"
										, МетаданныеЗначения.ПолноеИмя()
										, ИмяПредопределенныхДанных
										, ЗначениеВСтрокуВнутр(Значение)
										, Истина
										, ИмяПредопределенныхДанных
										, СокрЛП(Значение));
	Иначе
		Предопределенный = Ложь;
		Если Метаданные.Справочники.Содержит(МетаданныеЗначения)
		 ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеЗначения)
		 ИЛИ Метаданные.ПланыСчетов.Содержит(МетаданныеЗначения)
		 ИЛИ Метаданные.ПланыВидовРасчета.Содержит(МетаданныеЗначения) Тогда
			Предопределенный = Значение.Предопределенный;
		ИначеЕсли Метаданные.ПланыОбмена.Содержит(МетаданныеЗначения) Тогда
			Предопределенный = Значение.ЭтотУзел;
		КонецЕсли;
		ОписаниеЗначения = Новый Структура("Тип, Ид, ИдПолный, Предопределенный, ИмяПредопределенныхДанных, Представление"
										, МетаданныеЗначения.ПолноеИмя()
										, СокрЛП(Значение.УникальныйИдентификатор())
										, ЗначениеВСтрокуВнутр(Значение)
										, Предопределенный
										, ПолучитьИмяПредопределенныхДанных(Значение)
										, СокрЛП(Значение));
	КонецЕсли;
	
	ПравилоВыгрузки = ПолучитьПравилоВыгрузкиТипа(МетаданныеЗначения.ПолноеИмя());
	
	Если ПравилоВыгрузки = Неопределено Тогда
		Возврат ОписаниеЗначения;
	КонецЕсли;
			
	КодДополненияЗначения = "";
	Если НЕ ПравилоВыгрузки.Модуль = Неопределено Тогда
		КодДополненияЗначения = КодДополненияЗначения + "ПравилоВыгрузки.Модуль.";
	КонецЕсли;
	
	КодДополненияЗначения = КодДополненияЗначения + СокрЛП(ПравилоВыгрузки.ФункцияДополнения) + "(ОписаниеЗначения, Значение);";
	
	Попытка
		Выполнить(КодДополненияЗначения);
	Исключение
		ТекстОшибки = "Ошибка дополнения значения: " + СокрЛП(Значение) + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Возврат ОписаниеЗначения;
	
КонецФункции // СсылкаВСтруктуру()

// Получает правило преобразования в структуру для указанного типа значений
//
// Параметры:
//  ПолноеИмяТипа         - Строка    - Имя типа преобразуемого значения
//
// Возвращаемое значение:
//	Структура					- Правило выгрузки типа
//		ФункцияДополнения - Строка    - имя функции дополнительной обработки данных при выгрузке
//		Модуль            - Модуль    - модуль из которого будет вызвана функция дополнения
//
Функция ПолучитьПравилоВыгрузкиТипа(ПолноеИмяТипа)
	
	Правила = ПолучитьПравилаВыгрузкиТипов();
	
	Возврат Правила[ПолноеИмяТипа];
	
КонецФункции // ПолучитьПравилоВыгрузкиТипа()

// Добавляет правило преобразования в структуру для указанного типа значений
//
// Параметры:
//	ТипИсточника           - Строка                   - Имя типа преобразуемого значения
//	ФункцияДополнения      - Строка                   - Имя функции преобразования значения
//  Модуль                 - УправляемаяФорма, Модуль - модуль, содержащий функцию дополнения,
//                                                      Неопределено - функция будет вызвана
//                                                      из модуля обработки (этот модуль)
//
Процедура ДобавитьПравилоВыгрузкиТипа(ТипИсточника, ФункцияДополнения, Модуль = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(ПравилаВыгрузкиТипов) = Тип("Соответствие") Тогда
		ПравилаВыгрузкиТипов = Новый Соответствие();
	КонецЕсли;
	
	ПравилаВыгрузкиТипов.Вставить(ТипИсточника, Новый Структура("ФункцияДополнения, Модуль", ФункцияДополнения, Модуль));
	
КонецПроцедуры // ДобавитьПравилоВыгрузкиТипа()

// Переопределяемая процедура, позволяющая дополнить алгоритмы преобразования данных в структуру
//
// Параметры:
//
// Возвращаемое значение:
//   Соответствие			- правила выгрузки типов
//		<ТипЗначения>			- Структура			- Имя выгружаемого типа значения
//			ФункцияДополнения	- Строка			- Имя функции дополнительной обработки данных при выгрузке
//
Функция ПолучитьПравилаВыгрузкиТипов()
	
	Если НЕ ТипЗнч(ПравилаВыгрузкиТипов) = Тип("Соответствие") Тогда
		ПравилаВыгрузкиТипов = Новый Соответствие();
	КонецЕсли;
	
	Возврат ПравилаВыгрузкиТипов;
	
КонецФункции // ПолучитьПравилаВыгрузкиТипов()

#КонецОбласти // СохранениеЗначенийСлужебные

#Область ПолучениеЗначенийСлужебные

// Получает значение из переданного описания, значения атомарных типов, возвращаются как есть
//
// Параметры:
//  СтруктураЗначения          - Структура, Число, Строка,      - Описание значение
//                               Дата, Булево
//  ПолучатьБитыеСсылки        - Булево                         - Истина - если объект по ссылке не существует,
//                                                                будет возвращена битая ссылка;
//                                                                Ложь - будет возвращена пустая ссылка
//
// Возвращаемое значение:
//   Произвольный			- результат преобразования
//
Функция ЗначениеИзСтруктуры(СтруктураЗначения, ПолучатьБитыеСсылки = Ложь) Экспорт
	
	Если ТипЗнч(СтруктураЗначения) = Тип("Строка") Тогда
		Если Лев(СтруктураЗначения, 1) = "/" Тогда
			Если Лев(СтруктураЗначения, 6) = "/Date(" Тогда
				ВремДата = ПрочитатьДатуJSON(СтруктураЗначения, ФорматДатыJSON.Microsoft);
				Если ВремДата < '00020101000000' Тогда
					Возврат '00010101000000';
				Иначе
					Возврат ВремДата;
				КонецЕсли;
			ИначеЕсли Лев(СтруктураЗначения, 14) = "/ValueStorage(" Тогда
				Если Прав(СтруктураЗначения, 2) = ")/" Тогда
					Возврат ЗначениеИзСтрокиВнутр(Сред(СтруктураЗначения, 15, СтрДлина(СтруктураЗначения) - 16));
				КонецЕсли;
			ИначеЕсли Лев(СтруктураЗначения, 10) = "/UniqueID(" Тогда
				Если Прав(СтруктураЗначения, 2) = ")/" Тогда
					Возврат Новый УникальныйИдентификатор(Сред(СтруктураЗначения, 11, СтрДлина(СтруктураЗначения) - 12));
				КонецЕсли;
			ИначеЕсли СтруктураЗначения = "/NULL()/" Тогда
				Возврат NULL;
			ИначеЕсли СтруктураЗначения = "/Undefined()/" Тогда
				Возврат Неопределено;
			ИначеЕсли Лев(СтруктураЗначения, 13) = "/UnknownType(" Тогда
				Если Прав(СтруктураЗначения, 2) = ")/" Тогда
					Возврат ЗначениеИзСтрокиВнутр(Сред(СтруктураЗначения, 14, СтрДлина(СтруктураЗначения) - 15));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Возврат СтруктураЗначения;
	ИначеЕсли ТипЗнч(СтруктураЗначения) = Тип("Число")
	 ИЛИ ТипЗнч(СтруктураЗначения) = Тип("Булево")
	 ИЛИ ТипЗнч(СтруктураЗначения) = Тип("Дата")
	 ИЛИ ТипЗнч(СтруктураЗначения) = Тип("ХранилищеЗначения") Тогда
		Возврат СтруктураЗначения;
	КонецЕсли;
	
	ВремТип = СтруктураТипЗнч(СтруктураЗначения);
	
	Если ВремТип = Тип("Массив") Тогда
		Возврат МассивИзСтруктуры(СтруктураЗначения);
	ИначеЕсли ВремТип = Тип("Структура") Тогда
		Возврат СтруктураИзСтруктуры(СтруктураЗначения);
	ИначеЕсли ВремТип = Тип("Соответствие") Тогда
		Возврат СоответствиеИзСтруктуры(СтруктураЗначения);
	ИначеЕсли ВремТип = Тип("СписокЗначений") Тогда
		Возврат СписокЗначенийИзСтруктуры(СтруктураЗначения);
	ИначеЕсли ВремТип = Тип("ТаблицаЗначений") Тогда
		Возврат ТаблицаЗначенийИзСтруктуры(СтруктураЗначения);
	ИначеЕсли ВремТип = Тип("ДеревоЗначений") Тогда
		Возврат ДеревоЗначенийИзСтруктуры(СтруктураЗначения);
	ИначеЕсли ВремТип = Тип("ОписаниеТипов") Тогда
		Возврат ОписаниеТиповИзСтруктуры(СтруктураЗначения);
	КонецЕсли;
	
	МетаОбъект = Метаданные.НайтиПоТипу(ВремТип);
	Если НЕ МетаОбъект = Неопределено Тогда
		Возврат СсылкаИзСтруктуры(СтруктураЗначения, ПолучатьБитыеСсылки);
	КонецЕсли;
	
	Возврат СтруктураЗначения;
	
КонецФункции // ЗначениеИзСтруктуры()

// Получает ссылку по переданной структуре
//
// Параметры:
//  ОписаниеЗначения			- Структура			- Структура описания ссылки
//  ПолучатьБитыеСсылки         - Булево            - Истина - если объект по ссылке не существует,
//                                                    будет возвращена битая ссылка;
//                                                    Ложь - будет возвращена пустая ссылка
//
// Возвращаемое значение:
//   ЛюбаяСсылка			- полученная ссылка
//
Функция СсылкаИзСтруктуры(ОписаниеЗначения, ПолучатьБитыеСсылки = Ложь) Экспорт
	
	Если Не ТипЗнч(ОписаниеЗначения) = Тип("Структура") Тогда
		Возврат ОписаниеЗначения;
	КонецЕсли;
	
	ПравилоЗагрузки = ПолучитьПравилоЗагрузкиТипа(ОписаниеЗначения.Тип);
	
	ОписаниеВида = ПолучитьОписаниеВидаОбъектов(ПравилоЗагрузки.ТипЗначения);

	МетаОбъект = Метаданные.НайтиПоПолномуИмени(ПравилоЗагрузки.ТипЗначения);
	
	Если МетаОбъект = Неопределено Тогда
		ТекстОшибки = "Не найден тип " + ПравилоЗагрузки.ТипЗначения 
		            + " для значения: """
		            + ОписаниеЗначения.Представление
		            + " (" + ОписаниеЗначения.Ид + ")""";
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Коллекция = ОписаниеВида.Коллекция;
	
	Результат = Коллекция[МетаОбъект.Имя].ПустаяСсылка();
	
	Если НЕ Найти(ОписаниеЗначения.ИдПолный, "00000000000000000000000000000000") = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	КодПоискаСсылки = "Результат = ";
	Если НЕ ПравилоЗагрузки.Модуль = Неопределено Тогда
		КодПоискаСсылки = КодПоискаСсылки + "ПравилоЗагрузки.Модуль.";
	КонецЕсли;
	
	КодПоискаСсылки = КодПоискаСсылки + СокрЛП(ПравилоЗагрузки.ФункцияПоиска) + "(ОписаниеВида, МетаОбъект, ОписаниеЗначения);";
	
	Попытка
		Выполнить(КодПоискаСсылки);
	Исключение
		ТекстОшибки = "Ошибка поиска ссылки по описанию: " + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Сообщить("Не найдено значение "
			+ МетаОбъект.ПолноеИмя() + ": """
			+ ОписаниеЗначения.Представление
			+ " (" + ОписаниеЗначения.Ид + ")""");
		Если ПолучатьБитыеСсылки Тогда
			Результат = Коллекция[МетаОбъект.Имя].ПолучитьСсылку(Новый УникальныйИдентификатор(ОписаниеЗначения.Ид));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СсылкаИзСтруктуры()

// Получает правило преобразования данных из структуры для указанного типа значений
//
// Параметры:
//  ПолноеИмяТипа			- Строка				- Имя типа преобразуемого значения
//
// Возвращаемое значение:
//	Структура					- Правило выгрузки типа
//		ТипЗначения			- Строка			- Имя типа значения целевых данных
//		ФункцияПоиска		- Строка			- Имя функции поиска значения
//
Функция ПолучитьПравилоЗагрузкиТипа(ПолноеИмяТипа)
	
	Правила = ПолучитьПравилаЗагрузкиТипов();
	
	Правило = Правила[ПолноеИмяТипа];
	
	Если Правило = Неопределено Тогда
		Правило = Новый Структура("ТипЗначения, ФункцияПоиска, Модуль", ПолноеИмяТипа, "НайтиЗначениеПоОписанию");
	КонецЕсли;
	
	Возврат Правило;
	
КонецФункции // ПолучитьПравилоЗагрузкиТипа()

// Добавляет правило преобразования данных из структуры для указанного типа значений
//
// Параметры:
//	ТипИсточника             - Строка                   - Имя типа преобразуемого значения
//	ТипПриемника             - Строка                   - Имя типа целевого значения
//	ФункцияПоиска            - Строка                   - Имя функции поиска значения
//  Модуль                   - УправляемаяФорма, Модуль - модуль, содержащий функцию поиска,
//                                                        Неопределено - функция будет вызвана
//                                                        из модуля обработки (этот модуль)
//
Процедура ДобавитьПравилоЗагрузкиТипа(ТипИсточника, ТипПриемника, ФункцияПоиска, Модуль = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(ПравилаЗагрузкиТипов) = Тип("Соответствие") Тогда
		ПравилаЗагрузкиТипов = Новый Соответствие();
	КонецЕсли;
	
	ПравилаЗагрузкиТипов.Вставить(ТипИсточника, Новый Структура("ТипЗначения, ФункцияПоиска, Модуль", ТипПриемника, ФункцияПоиска, Модуль));
	
КонецПроцедуры // ДобавитьПравилоЗагрузкиТипа()

// Переопределяемая процедура, позволяющая дополнить алгоритмы преобразования данных из структуры
//
// Параметры:
//
// Возвращаемое значение:
//   Соответствие(Структура)			- правила выгрузки типов
//		<ТипЗначения>			- Строка			- Имя типа значения преобразованных данных
//		ТипЗначения					- Строка			- Имя типа значения целевых данных
//		ФункцияПоиска				- Строка			- Имя функции поиска значения
//
Функция ПолучитьПравилаЗагрузкиТипов()
	
	Если НЕ ТипЗнч(ПравилаЗагрузкиТипов) = Тип("Соответствие") Тогда
		ПравилаЗагрузкиТипов = Новый Соответствие();
	КонецЕсли;
	
	Возврат ПравилаЗагрузкиТипов;
	
КонецФункции // ПолучитьПравилаЗагрузкиТипов()

// Функция поиска значений по структуре описания (шаблон процедуры поиска)
// Ищет значение по имени предопределенных данных, затем по полному иидентификатору, затем по представлению (наименованию)
//
// Параметры:
//		ОписаниеВида			- Структура				- Описание вида значения
//		МетаОбъект				- ОписаниеМетаданных	- Описание метаданных обрабатываемого типа значений
// 		ОписаниеЗначения		- Структура				- Структура значения для обработки
//
// Возвращаемое значение:
//   ЛюбаяСсылка			- найденное значение
//
//@skip-warning
Функция НайтиЗначениеПоОписанию(ОписаниеВида, МетаОбъект, ОписаниеЗначения)
	
	Коллекция = ОписаниеВида.Коллекция;
	
	Если ЗначениеЗаполнено(ОписаниеЗначения.ИмяПредопределенныхДанных) Тогда
		Если ВРег(ОписаниеВида.Имя) = ВРег("ПланОбмена")
		   И ВРег(ОписаниеЗначения.ИмяПредопределенныхДанных) = ВРег("ЭтотУзел") Тогда
			Возврат Коллекция[МетаОбъект.Имя].ЭтотУзел();
		Иначе
			Возврат Коллекция[МетаОбъект.Имя][ОписаниеЗначения.ИмяПредопределенныхДанных];
		КонецЕсли;
	Иначе
		ВремСсылка = ЗначениеИзСтрокиВнутр(ОписаниеЗначения.ИдПолный);
		Если ЗначениеЗаполнено(ВремСсылка) Тогда
			ВремОбъект = ВремСсылка.ПолучитьОбъект();
			Если НЕ ВремОбъект = Неопределено Тогда
				Возврат ВремСсылка;
			КонецЕсли;
		КонецЕсли;
		
		Если Найти(ОписаниеЗначения.ИдПолный, "00000000000000000000000000000000") = 0 Тогда
			ВремСсылка = Коллекция[МетаОбъект.Имя].ПолучитьСсылку(Новый УникальныйИдентификатор(ОписаниеЗначения.Ид));
			ВремОбъект = ВремСсылка.ПолучитьОбъект();
			Если НЕ ВремОбъект = Неопределено Тогда
				Возврат ВремСсылка;
			КонецЕсли;
		
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОписаниеЗначения.Представление)
	   И (ВРег(ОписаниеВида.Имя) = ВРег("Справочник")
			ИЛИ ВРег(ОписаниеВида.Имя) = ВРег("ПланВидовХарактеристик")
			ИЛИ ВРег(ОписаниеВида.Имя) = ВРег("ПланСчетов")
			ИЛИ ВРег(ОписаниеВида.Имя) = ВРег("ПланВидовРасчета")
			ИЛИ ВРег(ОписаниеВида.Имя) = ВРег("ПланОбмена")
			ИЛИ ВРег(ОписаниеВида.Имя) = ВРег("Задача")) Тогда
		
		ВремСсылка = Коллекция[МетаОбъект.Имя].НайтиПоНаименованию(ОписаниеЗначения.Представление, Истина); 
		Если НЕ ВремСсылка.Пустая() Тогда
			Возврат ВремСсылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Коллекция[МетаОбъект.Имя].ПустаяСсылка();
	
КонецФункции // НайтиЗначениеПоОписанию()

#КонецОбласти // ПолучениеЗначенийСлужебные

#Область ПреобразованияКоллекций

// Функция определяет тип значения, сохраненного в массив или структуру
// для преобразования в значение 1С
//
// Параметры:
//		СтруктураЗначения		- Структура, Массив		- Проверяемое значения
//
// Возвращаемое значение:
//   Тип			- Тип 1С (Массив, Структура, Соответствие, СписокЗначений, ТаблицаЗначений, ДеревоЗначений, ЛюбаяСсылка)
//
Функция СтруктураТипЗнч(СтруктураЗначения)
	
	Если ТипЗнч(СтруктураЗначения) = Тип("Массив") Тогда
		Если СтруктураЗначения.Количество() = 0 Тогда
			Возврат Тип("Массив");
		КонецЕсли;
		Если ТипЗнч(СтруктураЗначения[0]) = Тип("Структура") Тогда
			Если СтруктураЗначения[0].Свойство("Ключ")
			   И СтруктураЗначения[0].Свойство("Значение") Тогда
				Возврат Тип("Соответствие");
			ИначеЕсли СтруктураЗначения[0].Свойство("Представление")
			   И СтруктураЗначения[0].Свойство("Значение")
			   И СтруктураЗначения[0].Свойство("Пометка") Тогда
				Возврат Тип("СписокЗначений");
			Иначе
				Возврат Тип("ТаблицаЗначений");
			КонецЕсли;
		КонецЕсли;
		Возврат Тип("Массив");
	ИначеЕсли ТипЗнч(СтруктураЗначения) = Тип("Структура") Тогда
		Если СтруктураЗначения.Свойство("Тип")
		   И СтруктураЗначения.Свойство("Ид")
		   И СтруктураЗначения.Свойство("ИдПолный") Тогда
			Если СтруктураЗначения.Свойство("Ссылка") Тогда
				ПравилоЗагрузки = ПолучитьПравилоЗагрузкиТипа(СтруктураЗначения.Тип);
				Возврат Тип(СтрЗаменить(ПравилоЗагрузки.ТипЗначения, ".", "Ссылка."));
			Иначе
				ПравилоЗагрузки = ПолучитьПравилоЗагрузкиТипа(СтруктураЗначения.Ссылка.Тип);
				Возврат Тип(СтрЗаменить(ПравилоЗагрузки.ТипЗначения, ".", "Объект."));
			КонецЕсли;
		КонецЕсли;
		Если СтруктураЗначения.Свойство("Типы")
		   И СтруктураЗначения.Свойство("КвалификаторыСтроки")
		   И СтруктураЗначения.Свойство("КвалификаторыЧисла")
		   И СтруктураЗначения.Свойство("КвалификаторыДаты") Тогда
			Если ТипЗнч(СтруктураЗначения.Типы) = Тип("Массив") Тогда
				Возврат Тип("ОписаниеТипов");
			КонецЕсли;
		КонецЕсли;
		Если СтруктураЗначения.Свойство("Строки") Тогда
			Если ТипЗнч(СтруктураЗначения.Строки) = Тип("Массив") Тогда
				Возврат Тип("ДеревоЗначений");
			КонецЕсли;
		КонецЕсли;
		Возврат Тип("Структура");
	Иначе
		Возврат ТипЗнч(СтруктураЗначения);
	КонецЕсли;
	
КонецФункции // СтруктураТипЗнч()

// Функция рекурсивно преобразует структуру значений в структуру с "простыми" типами
//
// Параметры:
//		Значение		- Структура		- Значение для преобразования
//
// Возвращаемое значение:
//   Структура			- Результат преобразования
//
Функция СтруктураВСтруктуру(Значение)
	
	Если НЕ (ТипЗнч(Значение) = Тип("Структура")
		  ИЛИ ТипЗнч(Значение) = Тип("ФиксированнаяСтруктура")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВремСтруктура = Новый Структура();
	Для Каждого ТекЭлемент Из Значение Цикл
		ВремСтруктура.Вставить(ТекЭлемент.Ключ, ЗначениеВСтруктуру(ТекЭлемент.Значение));
	КонецЦикла;
	
	Возврат ВремСтруктура;
	
КонецФункции // СтруктураВСтруктуру()

// Функция рекурсивно преобразует структуру с "простыми" типами значений в структуру значений 1С
//
// Параметры:
//		СтруктураЗначения		- Структура		- Значение для преобразования
//
// Возвращаемое значение:
//   Структура			- Результат преобразования
//
Функция СтруктураИзСтруктуры(СтруктураЗначения)
	
	Если НЕ ТипЗнч(СтруктураЗначения) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВремСтруктура = Новый Структура();
	
	Для Каждого ТекЭлемент Из СтруктураЗначения Цикл
		ВремСтруктура.Вставить(ТекЭлемент.Ключ, ЗначениеИзСтруктуры(ТекЭлемент.Значение));
	КонецЦикла;
	
	Возврат ВремСтруктура;
	
КонецФункции // СтруктураИзСтруктуры()

// Функция рекурсивно преобразует массив значений в массив с "простыми" типами
//
// Параметры:
//		Значение		- Массив		- Значение для преобразования
//
// Возвращаемое значение:
//   Массив			- Результат преобразования
//
Функция МассивВСтруктуру(Значение)
	
	Если НЕ (ТипЗнч(Значение) = Тип("Массив")
		  ИЛИ ТипЗнч(Значение) = Тип("ФиксированныйМассив")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВремМассив = Новый Массив();
	Для Каждого ТекЗначение Из Значение Цикл
		ВремМассив.Добавить(ЗначениеВСтруктуру(ТекЗначение));
	КонецЦикла;
	
	Возврат ВремМассив;
	
КонецФункции // МассивВСтруктуру()

// Функция рекурсивно преобразует массив с "простыми" типами значений в массив значений 1С
//
// Параметры:
//		СтруктураЗначения		- Массив		- Значение для преобразования
//
// Возвращаемое значение:
//   Массив			- Результат преобразования
//
Функция МассивИзСтруктуры(СтруктураЗначения)
	
	Если НЕ ТипЗнч(СтруктураЗначения) = Тип("Массив") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВремМассив = Новый Массив();
	Для Каждого ТекЗначение Из СтруктураЗначения Цикл
		ВремМассив.Добавить(ЗначениеИзСтруктуры(ТекЗначение));
	КонецЦикла;
	
	Возврат ВремМассив;
	
КонецФункции // МассивИзСтруктуры()

// Функция рекурсивно преобразует соответствие значений в массив структур с "простыми" типами
//
// Параметры:
//		Значение		- Соответствие		- Значение для преобразования
//
// Возвращаемое значение:
//   Массив(Структура)			- Результат преобразования
//		Ключ						- Произвольный		- Ключ элемента соответствия
//		Значение					- Произвольный		- Значение элемента соответствия
//
Функция СоответствиеВСтруктуру(Значение)
	
	Если НЕ (ТипЗнч(Значение) = Тип("Соответствие")
	 ИЛИ ТипЗнч(Значение) = Тип("ФиксированноеСоответствие")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВремСоответствие = Новый Массив();
	
	Для Каждого ТекЭлемент Из Значение Цикл
		ВремСоответствие.Добавить(Новый Структура("Ключ,
												  |Значение",
												  ЗначениеВСтруктуру(ТекЭлемент.Ключ),
												  ЗначениеВСтруктуру(ТекЭлемент.Значение)));
	КонецЦикла;
	
	Возврат ВремСоответствие;
	
КонецФункции // СоответствиеВСтруктуру()

// Функция рекурсивно преобразует массив структур с "простыми" типами значений в соответствие значений 1С
//
// Параметры:
//		СтруктураЗначения		- Массив(Структура)		- Значение для преобразования
//			Ключ					- Произвольный			- Ключ элемента соответствия
//			Значение				- Произвольный			- Значение элемента соответствия
//
// Возвращаемое значение:
//   Соответствие			- Результат преобразования
//
Функция СоответствиеИзСтруктуры(СтруктураЗначения)
	
	Если НЕ ТипЗнч(СтруктураЗначения) = Тип("Массив") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураЗначения.Количество() = 0 Тогда
		Возврат Новый Соответствие();
	КонецЕсли;
	
	Если СтруктураЗначения[0].Свойство("Ключ")  = Неопределено Тогда
		Возврат Новый Соответствие();
	КонецЕсли;
	
	ВремСоответствие = Новый Соответствие();
	
	Для Каждого ТекЭлемент Из СтруктураЗначения Цикл
		ВремСоответствие.Вставить(ЗначениеИзСтруктуры(ТекЭлемент.Ключ), ЗначениеИзСтруктуры(ТекЭлемент.Значение));
	КонецЦикла;
	
	Возврат ВремСоответствие;
	
КонецФункции // СоответствиеИзСтруктуры()

// Функция рекурсивно преобразует список значений в массив структур с "простыми" типами
//
// Параметры:
//		Значение		- СписокЗначений		- Значение для преобразования
//
// Возвращаемое значение:
//   Массив(Структура)			- Результат преобразования
//		Значение					- Произвольный		- Значение элемента списка значений
//		Представление				- Строка			- Представление элемента списка значений
//		Пометка						- Булево			- Пометка элемента списка значений
//
Функция СписокЗначенийВСтруктуру(Значение)
	
	Если НЕ ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВремМассив = Новый Массив();
	Для Каждого ТекЭлемент Из Значение Цикл
		ВремЭлемент = Новый Структура("Значение, Представление, Пометка, Картинка"
									, ЗначениеВСтруктуру(ТекЭлемент.Значение)
									, ТекЭлемент.Представление
									, ТекЭлемент.Пометка
									, Неопределено);
		ВремМассив.Добавить(ВремЭлемент);
	КонецЦикла;
	
	Возврат ВремМассив;
	
КонецФункции // СписокЗначенийВСтруктуру()

// Функция рекурсивно преобразует массив структур с "простыми" типами значений в список значений 1С
//
// Параметры:
//		СтруктураЗначения		- Массив(Структура)		- Значение для преобразования
//			Значение				- Произвольный			- Значение элемента соответствия
//			Представление			- Строка				- Представление элемента списка значений
//			Пометка					- Булево				- Пометка элемента списка значений
//
// Возвращаемое значение:
//   СписокЗначений			- Результат преобразования
//
Функция СписокЗначенийИзСтруктуры(СтруктураЗначения)
	
	Если НЕ ТипЗнч(СтруктураЗначения) = Тип("Массив") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураЗначения.Количество() = 0 Тогда
		Возврат Новый СписокЗначений();
	КонецЕсли;
	
	Если СтруктураЗначения[0].Свойство("Значение")  = Неопределено Тогда
		Возврат Новый СписокЗначений();
	КонецЕсли;
	
	ВремСписок = Новый СписокЗначений();
	Для Каждого ТекЭлемент Из СтруктураЗначения Цикл
		ВремСписок.Добавить(ЗначениеИзСтруктуры(ТекЭлемент.Значение), ТекЭлемент.Представление, ТекЭлемент.Пометка);
	КонецЦикла;
	
	Возврат ВремСписок;
	
КонецФункции // СписокЗначенийИзСтруктуры()

// Функция рекурсивно преобразует строку таблицы/дерева значений в структуру с "простыми" типами
//
// Параметры:
//		СтрокаЗначений	- СтрокаТаблицыЗначений		- Строка для преобразования
//						  СтрокаДереваЗначений
//		СписокСвойств	- Массив(Строка)			- Список заполняемых полей строки
//
// Возвращаемое значение:
//   Структура			- Результат преобразования
//		<Имя колонки>			- Произвольный		- Значение поля строки таблицы/дерева
//
Функция СтрокаЗначенийВСтруктуру(СтрокаЗначений, СписокСвойств)
	
	ВремСтрока = Новый Структура();
	
	Для Каждого ТекСвойство Из СписокСвойств Цикл
		ВремСтрока.Вставить(ТекСвойство, ЗначениеВСтруктуру(СтрокаЗначений[ТекСвойство]));
	КонецЦикла;
	
	Возврат ВремСтрока;
	
КонецФункции // СтрокаЗначенийВСтруктуру()

// Процедура рекурсивно заполняет строку таблицы/дерева значений данными из структуры с "простыми" типами значений
//
// Параметры:
//		СтрокаЗначений		- СтрокаТаблицыЗначений		- Строка для преобразования
//							  СтрокаДереваЗначений
//		СтруктураЗначений	- Структура					- Значение для преобразования
//			<Имя колонки>		- Произвольный				- Значение поля строки таблицы/дерева
//		СписокСвойств		- Массив(Строка)			- Список заполняемых полей строки
//
Процедура СтрокаЗначенийИзСтруктуры(СтрокаЗначений, СтруктураЗначений, СписокСвойств)
	
	Для Каждого ТекСвойство Из СписокСвойств Цикл
		СтрокаЗначений[ТекСвойство] = ЗначениеИзСтруктуры(СтруктураЗначений[ТекСвойство]);
	КонецЦикла;
	
КонецПроцедуры // СтрокаЗначенийИзСтруктуры()

// Функция рекурсивно преобразует таблицу значений в массив структур с "простыми" типами
//
// Параметры:
//		Значение		- ТаблицаЗначений		- Значение для преобразования
//
// Возвращаемое значение:
//   Массив(Структура)			- Результат преобразования
//		<Имя колонки>				- Произвольный		- Значение поля строки таблицы значений
//
Функция ТаблицаЗначенийВСтруктуру(Значение, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено)
	
	Если НЕ ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВремТаб = Новый Массив();
	
	МассивКолонок = Новый Массив();
	Для Каждого ТекКолонка Из Значение.Колонки Цикл
		Если НЕ ИспользоватьСвойство(ТекКолонка.Имя, СписокСвойств, ИсключаяСвойства) Тогда
			Продолжить;
		КонецЕсли;
		МассивКолонок.Добавить(ТекКолонка.Имя);
	КонецЦикла;
	
	Для Каждого ТекСтрока Из Значение Цикл
		ВремТаб.Добавить(СтрокаЗначенийВСтруктуру(ТекСтрока, МассивКолонок));
	КонецЦикла;
	
	Возврат ВремТаб;
	
КонецФункции // ТаблицаЗначенийВСтруктуру()

// Функция рекурсивно преобразует массив структур с "простыми" типами значений в таблицу значений 1С
//
// Параметры:
//		СтруктураЗначения		- Массив(Структура)		- Значение для преобразования
//			<Имя колонки>			- Произвольный			- Значение поля строки таблицы значений
//
// Возвращаемое значение:
//   ТаблицаЗначений			- Результат преобразования
//
Функция ТаблицаЗначенийИзСтруктуры(СтруктураЗначения, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено)
	
	Если НЕ ТипЗнч(СтруктураЗначения) = Тип("Массив") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураЗначения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений();
	КонецЕсли;
	
	ВремТаб = Новый ТаблицаЗначений();
	МассивКолонок = Новый Массив();
	
	Для Каждого ТекЭлемент Из СтруктураЗначения[0] Цикл
		Если НЕ ИспользоватьСвойство(ТекЭлемент.Ключ, СписокСвойств, ИсключаяСвойства) Тогда
			Продолжить;
		КонецЕсли;
		ВремТаб.Колонки.Добавить(ТекЭлемент.Ключ);
		МассивКолонок.Добавить(ТекЭлемент.Ключ);
	КонецЦикла;
	
	Для Каждого ТекСтрока Из СтруктураЗначения Цикл
		НоваяСтрока = ВремТаб.Добавить();
		СтрокаЗначенийИзСтруктуры(НоваяСтрока, ТекСтрока, МассивКолонок);
	КонецЦикла;
	
	Возврат ВремТаб;
	
КонецФункции // ТаблицаЗначенийИзСтруктуры()

// Функция рекурсивно преобразует строки дерева значений в массив структур с "простыми" типами
//
// Параметры:
//		СтрокиДерева	- КоллекцияСтрокДереваЗначений		- Строки для преобразования
//		СписокСвойств	- Массив(Строка)					- Список заполняемых полей строки
//
// Возвращаемое значение:
//   Массив(Структура)		- Результат преобразования
//		<Имя колонки>			- Произвольный		- Значение поля строки дерева
//
Функция СтрокиДереваВСтруктуру(СтрокиДерева, СписокСвойств)
	
	ВремСтроки = Новый Массив();
	
	Для Каждого ТекСтрока Из СтрокиДерева Цикл
		ВремСтрока = СтрокаЗначенийВСтруктуру(ТекСтрока, СписокСвойств);
		ВремСтрока.Вставить("Строки", СтрокиДереваВСтруктуру(ТекСтрока.Строки, СписокСвойств));
		ВремСтроки.Добавить(ВремСТрока);
	КонецЦикла;
	
	Возврат ВремСтроки;
	
КонецФункции // СтрокиДереваВСтруктуру()

// Процедура рекурсивно заполняет строки дерева значений данными из массива структур с "простыми" типами значений
//
// Параметры:
//		СтрокиДерева		- КоллекцияСтрокДереваЗначений		- Строка для преобразования
//		СтруктураСтрок		- Массив(Структура)					- Значение для преобразования
//			<Имя колонки>		- Произвольный						- Значение поля строки дерева
//		СписокСвойств		- Массив(Строка)					- Список заполняемых полей строк
//
Процедура СтрокиДереваИзСтруктуры(СтрокиДерева, СтруктураСтрок, СписокСвойств)
	
	Для Каждого ТекСтрока Из СтруктураСтрок Цикл
		НоваяСтрока = СтрокиДерева.Добавить();
		СтрокаЗначенийИзСтруктуры(НоваяСтрока, ТекСтрока, СписокСвойств);
		СтрокиДереваИзСтруктуры(НоваяСтрока.Строки, ТекСтрока.Строки, СписокСвойств);
	КонецЦикла;
	
КонецПроцедуры // СтрокиДереваИзСтруктуры()

// Функция рекурсивно преобразует дерево значений в структуру с "простыми" типами
//
// Параметры:
//		Значение		- ДеревоЗначений		- Значение для преобразования
//
// Возвращаемое значение:
//   Структура			- Результат преобразования
//		Строки				- Массив(Структура)	- Строки дерева значений
//			<Имя колонки>		- Произвольный		- Значение поля строки дерева значений
//
Функция ДеревоЗначенийВСтруктуру(Значение, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено)
	
	Если НЕ ТипЗнч(Значение) = Тип("ДеревоЗначений") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивКолонок = Новый Массив();
	Для Каждого ТекКолонка Из Значение.Колонки Цикл
		Если НЕ ИспользоватьСвойство(ТекКолонка.Имя, СписокСвойств, ИсключаяСвойства) Тогда
			Продолжить;
		КонецЕсли;
		МассивКолонок.Добавить(ТекКолонка.Имя);
	КонецЦикла;
	
	ВремДерево = Новый Структура("Строки", СтрокиДереваВСтруктуру(Значение.Строки, МассивКолонок));
	
	Возврат ВремДерево;
	
КонецФункции // ДеревоЗначенийВСтруктуру()

// Функция рекурсивно преобразует структуру с "простыми" типами значений в дерево значений 1С
//
// Параметры:
//		СтруктураЗначения		- Структура				- Значение для преобразования
//			Строки					- Массив(Структура)		- Строки дерева значений
//				<Имя колонки>			- Произвольный			- Значение поля строки дерева значений
//
// Возвращаемое значение:
//   ДеревоЗначений			- Результат преобразования
//
Функция ДеревоЗначенийИзСтруктуры(СтруктураЗначения, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено)
	
	Если НЕ ТипЗнч(СтруктураЗначения) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ СтруктураЗначения.Свойство("Строки") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ТипЗнч(СтруктураЗначения.Строки) = Тип("Массив") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураЗначения.Строки.Количество() = 0 Тогда
		Возврат Новый ДеревоЗначений();
	КонецЕсли;
	
	ВремДерево = Новый ДеревоЗначений();
	
	МассивКолонок = Новый Массив();
	
	Для Каждого ТекЭлемент Из СтруктураЗначения.Строки[0] Цикл
		Если ТекЭлемент.Ключ = "Строки" Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ИспользоватьСвойство(ТекЭлемент.Ключ, СписокСвойств, ИсключаяСвойства) Тогда
			Продолжить;
		КонецЕсли;
		ВремДерево.Колонки.Добавить(ТекЭлемент.Ключ);
		МассивКолонок.Добавить(ТекЭлемент.Ключ);
	КонецЦикла;
	
	СтрокиДереваИзСтруктуры(ВремДерево.Строки, СтруктураЗначения.Строки, МассивКолонок);
	
	Возврат ВремДерево;
	
КонецФункции // ДеревоЗначенийИзСтруктуры()

#КонецОбласти // ПреобразованияКоллекций

#Область ПреобразованияОбъектовОбщие

// Преобразует значение ссылочного типа в структуру
//
// Параметры:
//  Объект				- Объект, ЛюбаяСсылка		- Преобразуемый объект
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
// Возвращаемое значение:
//   Структура				- результат преобразования
//		Ссылка			- Структура		- Описание ссылки на объект
//			Тип 						- Строка		- Текстовое описание типа объекта
//			Ид                          - Строка		- Уникальный идентификатор ссылки
//			ИдПолный					- Строка		- Преставление ссылки на объект, полученное функцией ЗначениеВСтрокуВнутр
//			Предопределенный			- Булево		- Истина - предопределенное значение; Ложь - в противном случае
//			ИмяПредопределенныхДанных	- Строка		- Имя предопределенного значения
//			Представление				- Строка		- Стандатрное строковое представление объекта
//			<имя поля>					- Произвольный	- Дополнительные поля добавленные при выгрузке
//		__ТЧ			- Массив		- Массив табличных частей объекта
//		<имя поля>						- Произвольный	- Значения реквизитов объекта
//
Функция ОбъектВСтруктуру(Объект, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	ОписаниеВида = ПолучитьОписаниеВидаОбъектов(ТипЗнч(Объект));
	
	Если ОписаниеВида = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураОбъекта = Неопределено;
	
	Если ВРег(ОписаниеВида.Имя) = ВРег("Справочник") Тогда
		СтруктураОбъекта = СправочникВСтруктуру(Объект, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("Документ") Тогда
		СтруктураОбъекта = ДокументВСтруктуру(Объект, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("ПланВидовХарактеристик") Тогда
		СтруктураОбъекта = ПланВидовХарактеристикВСтруктуру(Объект, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("ПланСчетов") Тогда
		СтруктураОбъекта = ПланСчетовВСтруктуру(Объект, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("ПланВидовРасчета") Тогда
		СтруктураОбъекта = ПланВидовРасчетаВСтруктуру(Объект, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("ПланОбмена") Тогда
		СтруктураОбъекта = ПланОбменаВСтруктуру(Объект, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("БизнесПроцесс") Тогда
		СтруктураОбъекта = БизнесПроцессВСтруктуру(Объект, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("Задача") Тогда
		СтруктураОбъекта = ЗадачаВСтруктуру(Объект, СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ОбъектВСтруктуру()

// Заполняет объект (ссылочного типа) из структуры
//
// Параметры:
//  Объект				- Объект					- Заполняемый объект
//  СтруктураОбъекта	- Структура					- Данные для заполнения объекта
//		Ссылка					- Структура				- Описание ссылки на объект
//			Тип 						- Строка			- Текстовое описание типа объекта
//			Ид                          - Строка			- Уникальный идентификатор ссылки
//			ИдПолный					- Строка			- Преставление ссылки на объект, полученное функцией ЗначениеВСтрокуВнутр
//			Предопределенный			- Булево			- Истина - предопределенное значение; Ложь - в противном случае
//			ИмяПредопределенныхДанных	- Строка			- Имя предопределенного значения
//			Представление				- Строка			- Стандатрное строковое представление объекта
//			<имя поля>					- Произвольный		- Дополнительные поля добавленные при выгрузке
//		__ТЧ					- Массив				- Массив табличных частей объекта
//		<имя поля>				- Произвольный			- Значения реквизитов объекта
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
Процедура ЗаполнитьОбъектИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	Попытка
		ОписаниеВида = ПолучитьОписаниеВидаОбъектов(СтруктураОбъекта.Ссылка.Тип);
	Исключение
		ВызватьИсключение СтрШаблон("Ошибка получения описания вида объекта ""%1"": %2%3",
		                            СтруктураОбъекта.Ссылка.Тип,
		                            Символы.ПС,
		                            ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если ВРег(ОписаниеВида.Имя) = ВРег("Справочник") Тогда
		СправочникИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("Документ") Тогда
		ДокументИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("ПланВидовХарактеристик") Тогда
		ПланВидовХарактеристикИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("ПланСчетов") Тогда
		ПланСчетовИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("ПланВидовРасчета") Тогда
		ПланВидовРасчетаИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("ПланОбмена") Тогда
		ПланОбменаИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("БизнесПроцесс") Тогда
		БизнесПроцессИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("Задача") Тогда
		ЗадачаИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОбъектИзСтруктуры()

// Создает объект (ссылочного типа) из структуры
//
// Параметры:
//  Объект				- Объект					- Заполняемый объект
//  СтруктураОбъекта	- Структура					- Данные для заполнения объекта
//		Ссылка					- Структура				- Описание ссылки на объект
//			Тип 						- Строка			- Текстовое описание типа объекта
//			Ид                          - Строка			- Уникальный идентификатор ссылки
//			ИдПолный					- Строка			- Преставление ссылки на объект, полученное функцией ЗначениеВСтрокуВнутр
//			Предопределенный			- Булево			- Истина - предопределенное значение; Ложь - в противном случае
//			ИмяПредопределенныхДанных	- Строка			- Имя предопределенного значения
//			Представление				- Строка			- Стандатрное строковое представление объекта
//			<имя поля>					- Произвольный		- Дополнительные поля добавленные при выгрузке
//		__ТЧ					- Массив				- Массив табличных частей объекта
//		<имя поля>				- Произвольный			- Значения реквизитов объекта
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
// Возвращаемое значение:
//   Объект				- созданный объект
//
Функция СоздатьОбъектИзСтруктуры(СтруктураОбъекта, УстановитьСсылку = Ложь, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	Попытка
		ОписаниеВида = ПолучитьОписаниеВидаОбъектов(СтруктураОбъекта.Ссылка.Тип);
	Исключение
		ВызватьИсключение СтрШаблон("Ошибка получения описания вида объекта ""%1"": %2%3",
		                            СтруктураОбъекта.Ссылка.Тип,
		                            Символы.ПС,
		                            ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	МетаОбъект = Метаданные.НайтиПоПолномуИмени(СтруктураОбъекта.Ссылка.Тип);
	Менеджер = ОписаниеВида.Коллекция[МетаОбъект.Имя];
	Конструктор = ОписаниеВида.Конструктор;
	
	Если ВРег(ОписаниеВида.Имя) = ВРег("Справочник") Тогда
		Если ОписаниеВида.МетаКоллекция[МетаОбъект.Имя].Иерархический
		   И ОписаниеВида.МетаКоллекция[МетаОбъект.Имя].ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			Если СтруктураОбъекта.ЭтоГруппа Тогда 
				Конструктор = ОписаниеВида.КонструкторАльт;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("ПланВидовХарактеристик") Тогда
		Если ОписаниеВида.МетаКоллекция[МетаОбъект.Имя].Иерархический Тогда
			Если СтруктураОбъекта.ЭтоГруппа Тогда 
				Конструктор = ОписаниеВида.КонструкторАльт;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Объект = Неопределено;
	
	Если ЗначениеЗаполнено(Конструктор) Тогда
		
		Объект = Вычислить("Менеджер." + Конструктор + "()");
		
		Если УстановитьСсылку Тогда
			Объект.УстановитьСсылкуНового(Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураОбъекта.Ссылка.Ид)));
		КонецЕсли;
		
		ЗаполнитьОбъектИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства);
		
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции // СоздатьОбъектИзСтруктуры()

// Преобразует набор записей регистра, полученный по указанному отбору, в структуру
//
// Параметры:
//  Регистр				- Строка					- Строковое представление типа регистра (например: РегистрСведений.КурсыВалют)
//  Отбор				- Структура					- Структура вида <Имя поля>: <Значение поля>, значения полей отбора
//
// Возвращаемое значение:
//   Структура				- результат преобразования
//		Отбор			- Структура				- Описание отбора записей регистра
//			<имя поля>		- Произвольный			- Значение отбора
//		Записи			- Массив(Структура)		- Массив записей регистра
//			<имя поля>		- Произвольный			- Значения измерений, ресурсов и реквизитов записи регистра
//
Функция РегистрПоОтборуВСтруктуру(Регистр, Отбор) Экспорт
	
	ОписаниеВида = ПолучитьОписаниеВидаОбъектов(Регистр);
	
	Если ОписаниеВида = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МетаОбъект = Метаданные.НайтиПоПолномуИмени(Регистр);
	
	НаборЗаписей = ОписаниеВида.Коллекция[МетаОбъект.Имя].СоздатьНаборЗаписей();
	Для Каждого ТекЭлемент Из Отбор Цикл
		НаборЗаписей.Отбор[ТекЭлемент.Ключ].Установить(ТекЭлемент.Значение);
	КонецЦикла;
	НаборЗаписей.Прочитать();
	
	СтруктураОбъекта = Неопределено;
	
	Если ВРег(ОписаниеВида.Имя) = ВРег("РегистрСведений") Тогда
		СтруктураОбъекта = НаборЗаписейРегистраСведенийВСтруктуру(НаборЗаписей);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("РегистрНакопления") Тогда
		СтруктураОбъекта = НаборЗаписейРегистраНакопленияВСтруктуру(НаборЗаписей);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("РегистрБухгалтерии") Тогда
		СтруктураОбъекта = НаборЗаписейРегистраБухгалтерииВСтруктуру(НаборЗаписей);
	ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("РегистрРасчета") Тогда
		СтруктураОбъекта = НаборЗаписейРегистраРасчетаВСтруктуру(НаборЗаписей);
	КонецЕсли;
	
	Возврат СтруктураОбъекта;
	
КонецФункции // РегистрПоОтборуВСтруктуру()

// Преобразует движения документа в структуру
//
// Параметры:
//  Объект				- ДокументСсылка			- Документ, для которого получаются движения
//  СписокРегистров		- Строка, Массив(Строка)	- Список обрабатываемых регистров (если пустой, то обрабатываются все регистры)
//  ИсключаяРегистры	- Строка, Массив(Строка)	- Список исключаемых регистров (если пустой, то обрабатываются все регистры)
//
// Возвращаемое значение:
//   Структура				- движения документа по регистрам
//		<Имя регистра>			- Структура				- Движения регистра
//			Отбор					- Структура				- Описание отбора записей регистра
//				<имя поля>				- Произвольный			- Значение отбора
//			Записи				- Массив(Структура)		- Массив записей регистра
//				<имя поля>			- Произвольный			- Значения измерений, ресурсов и реквизитов записи регистра
//
Функция ДвиженияДокументаВСтруктуру(Объект, СписокРегистров = Неопределено, ИсключаяРегистры = Неопределено) Экспорт
	
	МетаОбъект = Объект.Метаданные();
	
	Отбор = Новый Структура("Регистратор", Объект.Ссылка);
	
	СтруктураДвижений = Новый Структура();
	Для Каждого ТекДвижения Из МетаОбъект.Движения Цикл
		Если НЕ ИспользоватьСвойство(ТекДвижения.Имя, СписокРегистров, ИсключаяРегистры) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДвижений.Вставить(ТекДвижения.Имя, РегистрПоОтборуВСтруктуру(ТекДвижения.ПолноеИмя(), Отбор));
	КонецЦикла;
	
	Возврат СтруктураДвижений;
	
КонецФункции // ДвиженияДокументаВСтруктуру()

// Заполняет движения документа из структуры
//
// Параметры:
//  Объект				- ДокументОбъект			- Документ, для которого заполняются движения
//  СтруктураДвижений	- Структура					- Движения документа по регистрам
//		<Имя регистра>		- Структура				- Движения регистра
//			Отбор				- Структура				- Описание отбора записей регистра
//				<имя поля>			- Произвольный			- Значение отбора
//			Записи			- Массив(Структура)		- Массив записей регистра
//				<имя поля>		- Произвольный			- Значения измерений, ресурсов и реквизитов записи регистра
//  СписокРегистров		- Строка, Массив(Строка)	- Список обрабатываемых регистров (если пустой, то обрабатываются все регистры)
//  ИсключаяРегистры	- Строка, Массив(Строка)	- Список исключаемых регистров (если пустой, то обрабатываются все регистры)
//
// Возвращаемое значение:
//
Процедура ДвиженияДокументаИзСтруктуры(Объект, СтруктураДвижений, СписокРегистров = Неопределено, ИсключаяРегистры = Неопределено) Экспорт

	МетаОбъект = Объект.Метаданные();
	
	Для Каждого ТекДвижения Из МетаОбъект.Движения Цикл
		
		Если НЕ СтруктураДвижений.Свойство(ТекДвижения.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ИспользоватьСвойство(ТекДвижения.Имя, СписокРегистров, ИсключаяРегистры) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеВида = ПолучитьОписаниеВидаОбъектов(ТекДвижения.ПолноеИмя());
		
		Если ВРег(ОписаниеВида.Имя) = ВРег("РегистрСведений") Тогда
			НаборЗаписейРегистраСведенийИзСтруктуры(Объект.Движения[ТекДвижения.Имя], СтруктураДвижений[ТекДвижения.Имя]);
		ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("РегистрНакопления") Тогда
			НаборЗаписейРегистраНакопленияИзСтруктуры(Объект.Движения[ТекДвижения.Имя], СтруктураДвижений[ТекДвижения.Имя]);
		ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("РегистрБухгалтерии") Тогда
			НаборЗаписейРегистраБухгалтерииИзСтруктуры(Объект.Движения[ТекДвижения.Имя], СтруктураДвижений[ТекДвижения.Имя]);
		ИначеЕсли ВРег(ОписаниеВида.Имя) = ВРег("РегистрРасчета") Тогда
			НаборЗаписейРегистраРасчетаИзСтруктуры(Объект.Движения[ТекДвижения.Имя], СтруктураДвижений[ТекДвижения.Имя]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияДокументаИзСтруктуры()

#КонецОбласти // ПреобразованияОбъектовОбщие

#Область ПреобразованияОбъектовПоВидам

// Преобразует элемент справочника в структуру
//
// Параметры:
//  Объект				- Объект, ЛюбаяСсылка		- Преобразуемый объект
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
// Возвращаемое значение:
//   Структура				- результат преобразования
//		Ссылка			- Структура		- Описание ссылки на объект
//			Тип 						- Строка		- Текстовое описание типа объекта
//			Ид                          - Строка		- Уникальный идентификатор ссылки
//			ИдПолный					- Строка		- Преставление ссылки на объект, полученное функцией ЗначениеВСтрокуВнутр
//			Предопределенный			- Булево		- Истина - предопределенное значение; Ложь - в противном случае
//			ИмяПредопределенныхДанных	- Строка		- Имя предопределенного значения
//			Представление				- Строка		- Стандатрное строковое представление объекта
//			<имя поля>					- Произвольный	- Дополнительные поля добавленные при выгрузке
//		__ТЧ			- Массив		- Массив табличных частей объекта
//		<имя поля>						- Произвольный	- Значения реквизитов объекта
//
Функция СправочникВСтруктуру(Объект, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = Объект.Метаданные();
	
	СтруктураОбъекта.Вставить("Ссылка", ЗначениеВСтруктуру(Объект));
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ЭтоГруппа", СписокСвойств, ИсключаяСвойства);
	
	СтруктураОбъекта.Вставить("Родитель", Неопределено);
	Если МетаОбъект.Иерархический Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Родитель", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
			
	СтруктураОбъекта.Вставить("Владелец", Неопределено);
	Если МетаОбъект.Владельцы.Количество() > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Владелец", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Код", Неопределено);
	Если МетаОбъект.ДлинаКода > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Код", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Наименование", Неопределено);
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		Если МетаОбъект.Иерархический И МетаОбъект.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			Если (Объект.ЭтоГруппа И ТекРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
			 ИЛИ (НЕ Объект.ЭтоГруппа И ТекРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы)Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		Если МетаОбъект.Иерархический И МетаОбъект.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			Если (Объект.ЭтоГруппа И ТекТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
			 ИЛИ (НЕ Объект.ЭтоГруппа И ТекТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы)Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ТЧОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Возврат СтруктураОбъекта;
	
КонецФункции // СправочникВСтруктуру()

// Заполняет справочник из структуры
//
// Параметры:
//  Объект				- Объект					- Заполняемый объект
//  СтруктураОбъекта	- Структура					- Данные для заполнения объекта
//		Ссылка					- Структура				- Описание ссылки на объект
//			Тип 						- Строка			- Текстовое описание типа объекта
//			Ид                          - Строка			- Уникальный идентификатор ссылки
//			ИдПолный					- Строка			- Преставление ссылки на объект, полученное функцией ЗначениеВСтрокуВнутр
//			Предопределенный			- Булево			- Истина - предопределенное значение; Ложь - в противном случае
//			ИмяПредопределенныхДанных	- Строка			- Имя предопределенного значения
//			Представление				- Строка			- Стандатрное строковое представление объекта
//			<имя поля>					- Произвольный		- Дополнительные поля добавленные при выгрузке
//		__ТЧ					- Массив				- Массив табличных частей объекта
//		<имя поля>				- Произвольный			- Значения реквизитов объекта
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
Процедура СправочникИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = Объект.Метаданные();
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	
	Если МетаОбъект.Иерархический Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Родитель", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
			
	Если МетаОбъект.Владельцы.Количество() > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Владелец", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Если МетаОбъект.ДлинаКода > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Код", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		Если МетаОбъект.Иерархический И МетаОбъект.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			Если (Объект.ЭтоГруппа И ТекРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
			 ИЛИ (НЕ Объект.ЭтоГруппа И ТекРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы)Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		Если МетаОбъект.Иерархический И МетаОбъект.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			Если (Объект.ЭтоГруппа И ТекТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
			 ИЛИ (НЕ Объект.ЭтоГруппа И ТекТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы)Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ТЧОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
КонецПроцедуры // СправочникИзСтруктуры()

// Преобразует счет в структуру
//
// Параметры:
//  Объект				- Объект, ЛюбаяСсылка		- Преобразуемый объект
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
// Возвращаемое значение:
//   Структура				- результат преобразования
//		Ссылка			- Структура		- Описание ссылки на объект
//			Тип 						- Строка		- Текстовое описание типа объекта
//			Ид                          - Строка		- Уникальный идентификатор ссылки
//			ИдПолный					- Строка		- Преставление ссылки на объект, полученное функцией ЗначениеВСтрокуВнутр
//			Предопределенный			- Булево		- Истина - предопределенное значение; Ложь - в противном случае
//			ИмяПредопределенныхДанных	- Строка		- Имя предопределенного значения
//			Представление				- Строка		- Стандатрное строковое представление объекта
//			<имя поля>					- Произвольный	- Дополнительные поля добавленные при выгрузке
//		__ТЧ			- Массив		- Массив табличных частей объекта
//		<имя поля>						- Произвольный	- Значения реквизитов объекта
//
Функция ПланСчетовВСтруктуру(Объект, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = Объект.Метаданные();
	
	СтруктураОбъекта.Вставить("Ссылка", ЗначениеВСтруктуру(Объект));
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Забалансовый", СписокСвойств, ИсключаяСвойства);
	
	Если ИспользоватьСвойство("Вид", СписокСвойств, ИсключаяСвойства) Тогда
		СтруктураОбъекта.Вставить("Вид", ?(Объект.Вид = ВидСчета.Активный, "Активный",
										   ?(Объект.Вид = ВидСчета.Пассивный, "Пассивный",
											 "АктивноПассивный")));
	КонецЕсли;
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Родитель", СписокСвойств, ИсключаяСвойства);
			
	СтруктураОбъекта.Вставить("Код", Неопределено);
	Если МетаОбъект.ДлинаКода > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Код", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Порядок", Неопределено);
	Если МетаОбъект.ДлинаПорядка > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Порядок", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Наименование", Неопределено);
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Для Каждого ТекПризнак Из МетаОбъект.ПризнакиУчета Цикл
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекПризнак.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	СтруктураОбъекта.Вставить("ВидыСубконто", Новый Массив());
	Если ИспользоватьСвойство("ВидыСубконто", СписокСвойств, ИсключаяСвойства)
	   И МетаОбъект.МаксКоличествоСубконто > 0 Тогда
		й = 1;
		Для Каждого ТекСтрока Из Объект.ВидыСубконто Цикл
			СтрокаСубконто = Новый Структура("НомерСтроки, ВидСубконто, ТолькоОбороты"
											, й
											, ЗначениеВСтруктуру(ТекСтрока.ВидСубконто)
											, ТекСтрока.ТолькоОбороты);
			
			Для Каждого ТекПризнак Из МетаОбъект.ПризнакиУчетаСубконто Цикл
				СтрокаСубконто.Вставить(ТекПризнак.Имя, ТекСтрока[ТекПризнак.Имя]);
			КонецЦикла;
			СтруктураОбъекта.ВидыСубконто.Добавить(СтрокаСубконто);
			й = й + 1;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ПланСчетовВСтруктуру()

// Заполняет счет из структуры
//
// Параметры:
//  Объект				- Объект					- Заполняемый объект
//  СтруктураОбъекта	- Структура					- Данные для заполнения объекта
//		Ссылка					- Структура				- Описание ссылки на объект
//			Тип 						- Строка			- Текстовое описание типа объекта
//			Ид                          - Строка			- Уникальный идентификатор ссылки
//			ИдПолный					- Строка			- Преставление ссылки на объект, полученное функцией ЗначениеВСтрокуВнутр
//			Предопределенный			- Булево			- Истина - предопределенное значение; Ложь - в противном случае
//			ИмяПредопределенныхДанных	- Строка			- Имя предопределенного значения
//			Представление				- Строка			- Стандатрное строковое представление объекта
//			<имя поля>					- Произвольный		- Дополнительные поля добавленные при выгрузке
//		__ТЧ					- Массив				- Массив табличных частей объекта
//		<имя поля>				- Произвольный			- Значения реквизитов объекта
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
Процедура ПланСчетовИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = Объект.Метаданные();
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Забалансовый", СписокСвойств, ИсключаяСвойства);
	Если ИспользоватьСвойство("Вид", СписокСвойств, ИсключаяСвойства) Тогда
		Объект.Вид = Вычислить("ВидСчета." + СтруктураОбъекта.Вид);
	КонецЕсли;
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Родитель", СписокСвойств, ИсключаяСвойства);
			
	Если МетаОбъект.ДлинаКода > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Код", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Если МетаОбъект.ДлинаПорядка > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Порядок", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Для Каждого ТекПризнак Из МетаОбъект.ПризнакиУчета Цикл
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекПризнак.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Если СтруктураОбъекта.Свойство("ВидыСубконто")
	   И ИспользоватьСвойство("ВидыСубконто", СписокСвойств, ИсключаяСвойства)
	   И МетаОбъект.МаксКоличествоСубконто > 0 Тогда
		Объект.ВидыСубконто.Очистить();
		Для Каждого ТекСтрока Из СтруктураОбъекта.ВидыСубконто Цикл
			Если Объект.ВидыСубконто.Количество() >= МетаОбъект.МаксКоличествоСубконто Тогда
				Прервать;
			КонецЕсли;
			НоваяСтрока = Объект.ВидыСубконто.Добавить();
			НоваяСтрока.ВидСубконто		= ЗначениеИзСтруктуры(ТекСтрока.ВидСубконто);
			НоваяСтрока.ТолькоОбороты	= ТекСтрока.ТолькоОбороты;
			
			Для Каждого ТекПризнак Из МетаОбъект.ПризнакиУчетаСубконто Цикл
				Если НЕ ТекСтрока.Свойство(ТекПризнак.Имя) Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока[ТекПризнак.Имя] = ТекСтрока[ТекПризнак.Имя];
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
КонецПроцедуры // ПланСчетовИзСтруктуры()

// Преобразует элемент плана видов характеристик в структуру
//
// Параметры:
//  Объект				- Объект, ЛюбаяСсылка		- Преобразуемый объект
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
// Возвращаемое значение:
//   Структура				- результат преобразования
//		Ссылка			- Структура		- Описание ссылки на объект
//			Тип 						- Строка		- Текстовое описание типа объекта
//			Ид                          - Строка		- Уникальный идентификатор ссылки
//			ИдПолный					- Строка		- Преставление ссылки на объект, полученное функцией ЗначениеВСтрокуВнутр
//			Предопределенный			- Булево		- Истина - предопределенное значение; Ложь - в противном случае
//			ИмяПредопределенныхДанных	- Строка		- Имя предопределенного значения
//			Представление				- Строка		- Стандатрное строковое представление объекта
//			<имя поля>					- Произвольный	- Дополнительные поля добавленные при выгрузке
//		__ТЧ			- Массив		- Массив табличных частей объекта
//		<имя поля>						- Произвольный	- Значения реквизитов объекта
//
Функция ПланВидовХарактеристикВСтруктуру(Объект, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = Объект.Метаданные();
	
	СтруктураОбъекта.Вставить("Ссылка", ЗначениеВСтруктуру(Объект));
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ЭтоГруппа", СписокСвойств, ИсключаяСвойства);
	
	СтруктураОбъекта.Вставить("Родитель", Неопределено);
	Если МетаОбъект.Иерархический Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Родитель", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
			
	СтруктураОбъекта.Вставить("Код", Неопределено);
	Если МетаОбъект.ДлинаКода > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Код", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Наименование", Неопределено);
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("ТипЗначения", ОписаниеТиповВСтруктуру(Объект.ТипЗначения));

	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		Если МетаОбъект.Иерархический Тогда
			Если (Объект.ЭтоГруппа И ТекРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
			 ИЛИ (НЕ Объект.ЭтоГруппа И ТекРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы)Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		Если МетаОбъект.Иерархический Тогда
			Если (Объект.ЭтоГруппа И ТекТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
			 ИЛИ (НЕ Объект.ЭтоГруппа И ТекТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы)Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ТЧОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ПланВидовХарактеристикВСтруктуру()

// Заполняет элемент плана вида характеристик из структуры
//
// Параметры:
//  Объект				- Объект					- Заполняемый объект
//  СтруктураОбъекта	- Структура					- Данные для заполнения объекта
//		Ссылка					- Структура				- Описание ссылки на объект
//			Тип 						- Строка			- Текстовое описание типа объекта
//			Ид                          - Строка			- Уникальный идентификатор ссылки
//			ИдПолный					- Строка			- Преставление ссылки на объект, полученное функцией ЗначениеВСтрокуВнутр
//			Предопределенный			- Булево			- Истина - предопределенное значение; Ложь - в противном случае
//			ИмяПредопределенныхДанных	- Строка			- Имя предопределенного значения
//			Представление				- Строка			- Стандатрное строковое представление объекта
//			<имя поля>					- Произвольный		- Дополнительные поля добавленные при выгрузке
//		__ТЧ					- Массив				- Массив табличных частей объекта
//		<имя поля>				- Произвольный			- Значения реквизитов объекта
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
Процедура ПланВидовХарактеристикИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = Объект.Метаданные();
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	
	Если МетаОбъект.Иерархический Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Родитель", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
			
	Если МетаОбъект.ДлинаКода > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Код", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Если СтруктураОбъекта.ТипЗначения.Типы.Количество() > 0 Тогда
		Объект.ТипЗначения = ОписаниеТиповИзСтруктуры(СтруктураОбъекта.ТипЗначения);
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		Если МетаОбъект.Иерархический Тогда
			Если (Объект.ЭтоГруппа И ТекРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
			 ИЛИ (НЕ Объект.ЭтоГруппа И ТекРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы)Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		Если МетаОбъект.Иерархический Тогда
			Если (Объект.ЭтоГруппа И ТекТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
			 ИЛИ (НЕ Объект.ЭтоГруппа И ТекТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы)Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ТЧОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
КонецПроцедуры // ПланВидовХарактеристикИзСтруктуры()

// Преобразует вид расчета в структуру
//
// Параметры:
//  Объект				- Объект, ЛюбаяСсылка		- Преобразуемый объект
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
// Возвращаемое значение:
//   Структура				- результат преобразования
//		Ссылка			- Структура		- Описание ссылки на объект
//			Тип 						- Строка		- Текстовое описание типа объекта
//			Ид                          - Строка		- Уникальный идентификатор ссылки
//			ИдПолный					- Строка		- Преставление ссылки на объект, полученное функцией ЗначениеВСтрокуВнутр
//			Предопределенный			- Булево		- Истина - предопределенное значение; Ложь - в противном случае
//			ИмяПредопределенныхДанных	- Строка		- Имя предопределенного значения
//			Представление				- Строка		- Стандатрное строковое представление объекта
//			<имя поля>					- Произвольный	- Дополнительные поля добавленные при выгрузке
//		__ТЧ			- Массив		- Массив табличных частей объекта
//		<имя поля>						- Произвольный	- Значения реквизитов объекта
//
Функция ПланВидовРасчетаВСтруктуру(Объект, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = Объект.Метаданные();
	
	СтруктураОбъекта.Вставить("Ссылка", ЗначениеВСтруктуру(Объект));
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	
	СтруктураОбъекта.Вставить("БазовыеВидыРасчета", Новый Массив());
	Если НЕ МетаОбъект.ЗависимостьОтВидовРасчета = Метаданные.СвойстваОбъектов.ИспользованиеБазыПланаВидовРасчета.НеИспользовать
	   И ИспользоватьСвойство("БазовыеВидыРасчета", СписокСвойств, ИсключаяСвойства) Тогда
		Для Каждого ТекВР Из Объект.БазовыеВидыРасчета Цикл
			СтруктураОбъекта.БазовыеВидыРасчета.Добавить(ЗначениеВСтруктуру(ТекВР.ВидРасчета));
		КонецЦикла;
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("ВедущиеВидыРасчета", Новый Массив());
	Если ИспользоватьСвойство("ВедущиеВидыРасчета", СписокСвойств, ИсключаяСвойства) Тогда
		Для Каждого ТекВР Из Объект.ВедущиеВидыРасчета Цикл
			СтруктураОбъекта.ВедущиеВидыРасчета.Добавить(ЗначениеВСтруктуру(ТекВР.ВидРасчета));
		КонецЦикла;
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("ВытесняющиеВидыРасчета", Новый Массив());
	Если МетаОбъект.ИспользованиеПериодаДействия
	   И ИспользоватьСвойство("ВытесняющиеВидыРасчета", СписокСвойств, ИсключаяСвойства) Тогда
		Для Каждого ТекВР Из Объект.ВытесняющиеВидыРасчета Цикл
			СтруктураОбъекта.ВытесняющиеВидыРасчета.Добавить(ЗначениеВСтруктуру(ТекВР.ВидРасчета));
		КонецЦикла;
	КонецЕсли;
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ПериодДействияБазовый", СписокСвойств, ИсключаяСвойства);
	
	СтруктураОбъекта.Вставить("Код", Неопределено);
	Если МетаОбъект.ДлинаКода > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Код", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	СтруктураОбъекта.Вставить("Наименование", Неопределено);
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ПланВидовРасчетаВСтруктуру()

// Заполняет вид расчета из структуры
//
// Параметры:
//  Объект				- Объект					- Заполняемый объект
//  СтруктураОбъекта	- Структура					- Данные для заполнения объекта
//		Ссылка					- Структура				- Описание ссылки на объект
//			Тип 						- Строка			- Текстовое описание типа объекта
//			Ид                          - Строка			- Уникальный идентификатор ссылки
//			ИдПолный					- Строка			- Преставление ссылки на объект, полученное функцией ЗначениеВСтрокуВнутр
//			Предопределенный			- Булево			- Истина - предопределенное значение; Ложь - в противном случае
//			ИмяПредопределенныхДанных	- Строка			- Имя предопределенного значения
//			Представление				- Строка			- Стандатрное строковое представление объекта
//			<имя поля>					- Произвольный		- Дополнительные поля добавленные при выгрузке
//		__ТЧ					- Массив				- Массив табличных частей объекта
//		<имя поля>				- Произвольный			- Значения реквизитов объекта
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
Процедура ПланВидовРасчетаИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = Объект.Метаданные();
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	
	Если НЕ МетаОбъект.ЗависимостьОтВидовРасчета = Метаданные.СвойстваОбъектов.ИспользованиеБазыПланаВидовРасчета.НеИспользовать
	   И ИспользоватьСвойство("БазовыеВидыРасчета", СписокСвойств, ИсключаяСвойства) Тогда
		Объект.БазовыеВидыРасчета.Очистить();
		Для Каждого ТекВР Из СтруктураОбъекта.БазовыеВидыРасчета Цикл
			ВремВР = ЗначениеИзСтруктуры(ТекВР);
			Если НЕ ЗначениеЗаполнено(ВремВР) Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = Объект.БазовыеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = ВремВР;
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользоватьСвойство("ВедущиеВидыРасчета", СписокСвойств, ИсключаяСвойства) Тогда
		Объект.ВедущиеВидыРасчета.Очистить();
		Для Каждого ТекВР Из СтруктураОбъекта.ВедущиеВидыРасчета Цикл
			ВремВР = ЗначениеИзСтруктуры(ТекВР);
			Если НЕ ЗначениеЗаполнено(ВремВР) Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = Объект.ВедущиеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = ВремВР;
		КонецЦикла;
	КонецЕсли;
	
	Если МетаОбъект.ИспользованиеПериодаДействия
	   И ИспользоватьСвойство("ВытесняющиеВидыРасчета", СписокСвойств, ИсключаяСвойства) Тогда
		Объект.ВытесняющиеВидыРасчета.Очистить();
		Для Каждого ТекВР Из СтруктураОбъекта.ВытесняющиеВидыРасчета Цикл
			ВремВР = ЗначениеИзСтруктуры(ТекВР);
			Если НЕ ЗначениеЗаполнено(ВремВР) Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = Объект.ВытесняющиеВидыРасчета.Добавить();
			НоваяСтрока.ВидРасчета = ВремВР;
		КонецЦикла;
	КонецЕсли;
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "ПериодДействияБазовый", СписокСвойств, ИсключаяСвойства);
	
	Если МетаОбъект.ДлинаКода > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Код", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
КонецПроцедуры // ПланВидовРасчетаИзСтруктуры()

// Преобразует узел обмена в структуру
//
// Параметры:
//  Объект				- Объект, ЛюбаяСсылка		- Преобразуемый объект
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
// Возвращаемое значение:
//   Структура				- результат преобразования
//		Ссылка			- Структура		- Описание ссылки на объект
//			Тип 						- Строка		- Текстовое описание типа объекта
//			Ид                          - Строка		- Уникальный идентификатор ссылки
//			ИдПолный					- Строка		- Преставление ссылки на объект, полученное функцией ЗначениеВСтрокуВнутр
//			Предопределенный			- Булево		- Истина - предопределенное значение; Ложь - в противном случае
//			ИмяПредопределенныхДанных	- Строка		- Имя предопределенного значения
//			Представление				- Строка		- Стандатрное строковое представление объекта
//			<имя поля>					- Произвольный	- Дополнительные поля добавленные при выгрузке
//		__ТЧ			- Массив		- Массив табличных частей объекта
//		<имя поля>						- Произвольный	- Значения реквизитов объекта
//
Функция ПланОбменаВСтруктуру(Объект, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = Объект.Метаданные();
	
	СтруктураОбъекта.Вставить("Ссылка", ЗначениеВСтруктуру(Объект));
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	Если ИспользоватьСвойство("ЭтотУзел", СписокСвойств, ИсключаяСвойства) Тогда
		СтруктураОбъекта.Вставить("ЭтотУзел", ПланыОбмена[МетаОбъект.Имя].ЭтотУзел() = Объект.Ссылка);
	КонецЕсли;
	//СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ЭтотУзел", СписокСвойств, ИсключаяСвойства); Не совместимо со старыми версиями
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "НомерОтправленного", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "НомерПринятого", СписокСвойств, ИсключаяСвойства);
	
	СтруктураОбъекта.Вставить("Код", Неопределено);
	Если МетаОбъект.ДлинаКода > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Код", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Наименование", Неопределено);
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ПланОбменаВСтруктуру()

// Заполняет узел плана обмена из структуры
//
// Параметры:
//  Объект				- Объект					- Заполняемый объект
//  СтруктураОбъекта	- Структура					- Данные для заполнения объекта
//		Ссылка					- Структура				- Описание ссылки на объект
//			Тип 						- Строка			- Текстовое описание типа объекта
//			Ид                          - Строка			- Уникальный идентификатор ссылки
//			ИдПолный					- Строка			- Преставление ссылки на объект, полученное функцией ЗначениеВСтрокуВнутр
//			Предопределенный			- Булево			- Истина - предопределенное значение; Ложь - в противном случае
//			ИмяПредопределенныхДанных	- Строка			- Имя предопределенного значения
//			Представление				- Строка			- Стандатрное строковое представление объекта
//			<имя поля>					- Произвольный		- Дополнительные поля добавленные при выгрузке
//		__ТЧ					- Массив				- Массив табличных частей объекта
//		<имя поля>				- Произвольный			- Значения реквизитов объекта
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
Процедура ПланОбменаИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = Объект.Метаданные();
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	
	Если НЕ Объект.ЭтотУзел Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "НомерОтправленного", СписокСвойств, ИсключаяСвойства);
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "НомерПринятого", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Если МетаОбъект.ДлинаКода > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Код", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
КонецПроцедуры // ПланОбменаИзСтруктуры()

// Преобразует документ в структуру
//
// Параметры:
//  Объект				- Объект, ЛюбаяСсылка		- Преобразуемый объект
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
// Возвращаемое значение:
//   Структура				- результат преобразования
//		Ссылка			- Структура		- Описание ссылки на объект
//			Тип 						- Строка		- Текстовое описание типа объекта
//			Ид                          - Строка		- Уникальный идентификатор ссылки
//			ИдПолный					- Строка		- Преставление ссылки на объект, полученное функцией ЗначениеВСтрокуВнутр
//			Предопределенный			- Булево		- Истина - предопределенное значение; Ложь - в противном случае
//			ИмяПредопределенныхДанных	- Строка		- Имя предопределенного значения
//			Представление				- Строка		- Стандатрное строковое представление объекта
//			<имя поля>					- Произвольный	- Дополнительные поля добавленные при выгрузке
//		__ТЧ			- Массив		- Массив табличных частей объекта
//		<имя поля>						- Произвольный	- Значения реквизитов объекта
//
Функция ДокументВСтруктуру(Объект, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = Объект.Метаданные();
	
	СтруктураОбъекта.Вставить("Ссылка", ЗначениеВСтруктуру(Объект));
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Проведен", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Дата", СписокСвойств, ИсключаяСвойства);
	
	СтруктураОбъекта.Вставить("Номер", Неопределено);
	//TODO: Тут еще нужно проверить использование нумератора
	Если МетаОбъект.ДлинаНомера > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Номер", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Если ИспользоватьСвойство("Движения", СписокСвойств, ИсключаяСвойства) Тогда
		СтруктураОбъекта.Вставить("Движения", ДвиженияДокументаВСтруктуру(Объект, СписокСвойств, ИсключаяСвойства));
	КонецЕсли;
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ДокументВСтруктуру()

// Заполняет документ из структуры
//
// Параметры:
//  Объект				- Объект					- Заполняемый объект
//  СтруктураОбъекта	- Структура					- Данные для заполнения объекта
//		Ссылка					- Структура				- Описание ссылки на объект
//			Тип 						- Строка			- Текстовое описание типа объекта
//			Ид                          - Строка			- Уникальный идентификатор ссылки
//			ИдПолный					- Строка			- Преставление ссылки на объект, полученное функцией ЗначениеВСтрокуВнутр
//			Предопределенный			- Булево			- Истина - предопределенное значение; Ложь - в противном случае
//			ИмяПредопределенныхДанных	- Строка			- Имя предопределенного значения
//			Представление				- Строка			- Стандатрное строковое представление объекта
//			<имя поля>					- Произвольный		- Дополнительные поля добавленные при выгрузке
//		__ТЧ					- Массив				- Массив табличных частей объекта
//		<имя поля>				- Произвольный			- Значения реквизитов объекта
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
Процедура ДокументИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = Объект.Метаданные();
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Проведен", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Дата", СписокСвойств, ИсключаяСвойства);
	
	//TODO: Тут еще нужно проверить использование нумератора
	Если МетаОбъект.ДлинаНомера > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Номер", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Если ИспользоватьСвойство("Движения", СписокСвойств, ИсключаяСвойства) И СтруктураОбъекта.Свойство("Движения") Тогда
		ДвиженияДокументаИзСтруктуры(Объект, СтруктураОбъекта.Движения, СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
КонецПроцедуры // ДокументИзСтруктуры()

// Преобразует бизнес-процесс в структуру
//
// Параметры:
//  Объект				- Объект, ЛюбаяСсылка		- Преобразуемый объект
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
// Возвращаемое значение:
//   Структура				- результат преобразования
//		Ссылка			- Структура		- Описание ссылки на объект
//			Тип 						- Строка		- Текстовое описание типа объекта
//			Ид                          - Строка		- Уникальный идентификатор ссылки
//			ИдПолный					- Строка		- Преставление ссылки на объект, полученное функцией ЗначениеВСтрокуВнутр
//			Предопределенный			- Булево		- Истина - предопределенное значение; Ложь - в противном случае
//			ИмяПредопределенныхДанных	- Строка		- Имя предопределенного значения
//			Представление				- Строка		- Стандатрное строковое представление объекта
//			<имя поля>					- Произвольный	- Дополнительные поля добавленные при выгрузке
//		__ТЧ			- Массив		- Массив табличных частей объекта
//		<имя поля>						- Произвольный	- Значения реквизитов объекта
//
Функция БизнесПроцессВСтруктуру(Объект, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = Объект.Метаданные();
	
	СтруктураОбъекта.Вставить("Ссылка", ЗначениеВСтруктуру(Объект));
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Дата", СписокСвойств, ИсключаяСвойства);
	
	СтруктураОбъекта.Вставить("Номер", Неопределено);
	Если МетаОбъект.ДлинаНомера > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Номер", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Стартован", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Завершен", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ВедущаяЗадача", СписокСвойств, ИсключаяСвойства);
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Возврат СтруктураОбъекта;
	
КонецФункции // БизнесПроцессВСтруктуру()

// Заполняет бизнес-процесс из структуры
//
// Параметры:
//  Объект				- Объект					- Заполняемый объект
//  СтруктураОбъекта	- Структура					- Данные для заполнения объекта
//		Ссылка					- Структура				- Описание ссылки на объект
//			Тип 						- Строка			- Текстовое описание типа объекта
//			Ид                          - Строка			- Уникальный идентификатор ссылки
//			ИдПолный					- Строка			- Преставление ссылки на объект, полученное функцией ЗначениеВСтрокуВнутр
//			Предопределенный			- Булево			- Истина - предопределенное значение; Ложь - в противном случае
//			ИмяПредопределенныхДанных	- Строка			- Имя предопределенного значения
//			Представление				- Строка			- Стандатрное строковое представление объекта
//			<имя поля>					- Произвольный		- Дополнительные поля добавленные при выгрузке
//		__ТЧ					- Массив				- Массив табличных частей объекта
//		<имя поля>				- Произвольный			- Значения реквизитов объекта
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
Процедура БизнесПроцессИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = Объект.Метаданные();
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Дата", СписокСвойств, ИсключаяСвойства);
	
	Если МетаОбъект.ДлинаНомера > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Номер", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Стартован", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Завершен", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "ВедущаяЗадача", СписокСвойств, ИсключаяСвойства);
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
КонецПроцедуры // БизнесПроцессИзСтруктуры()

// Преобразует задачу в структуру
//
// Параметры:
//  Объект				- Объект, ЛюбаяСсылка		- Преобразуемый объект
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
// Возвращаемое значение:
//   Структура				- результат преобразования
//		Ссылка			- Структура		- Описание ссылки на объект
//			Тип 						- Строка		- Текстовое описание типа объекта
//			Ид                          - Строка		- Уникальный идентификатор ссылки
//			ИдПолный					- Строка		- Преставление ссылки на объект, полученное функцией ЗначениеВСтрокуВнутр
//			Предопределенный			- Булево		- Истина - предопределенное значение; Ложь - в противном случае
//			ИмяПредопределенныхДанных	- Строка		- Имя предопределенного значения
//			Представление				- Строка		- Стандатрное строковое представление объекта
//			<имя поля>					- Произвольный	- Дополнительные поля добавленные при выгрузке
//		__ТЧ			- Массив		- Массив табличных частей объекта
//		<имя поля>						- Произвольный	- Значения реквизитов объекта
//
Функция ЗадачаВСтруктуру(Объект, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = Объект.Метаданные();
	
	СтруктураОбъекта.Вставить("Ссылка", ЗначениеВСтруктуру(Объект));
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Дата", СписокСвойств, ИсключаяСвойства);
	
	СтруктураОбъекта.Вставить("Номер", Неопределено);
	Если МетаОбъект.ДлинаНомера > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Номер", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Наименование", Неопределено);
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "БизнесПроцесс", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "Выполнена", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, "ТочкаМаршрута", СписокСвойств, ИсключаяСвойства);
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаВСтруктуру(СтруктураОбъекта, Объект, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ЗадачаВСтруктуру()

// Заполняет задачу из структуры
//
// Параметры:
//  Объект				- Объект					- Заполняемый объект
//  СтруктураОбъекта	- Структура					- Данные для заполнения объекта
//		Ссылка					- Структура				- Описание ссылки на объект
//			Тип 						- Строка			- Текстовое описание типа объекта
//			Ид                          - Строка			- Уникальный идентификатор ссылки
//			ИдПолный					- Строка			- Преставление ссылки на объект, полученное функцией ЗначениеВСтрокуВнутр
//			Предопределенный			- Булево			- Истина - предопределенное значение; Ложь - в противном случае
//			ИмяПредопределенныхДанных	- Строка			- Имя предопределенного значения
//			Представление				- Строка			- Стандатрное строковое представление объекта
//			<имя поля>					- Произвольный		- Дополнительные поля добавленные при выгрузке
//		__ТЧ					- Массив				- Массив табличных частей объекта
//		<имя поля>				- Произвольный			- Значения реквизитов объекта
//  СписокСвойств		- Строка, Массив(Строка)	- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)	- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
Процедура ЗадачаИзСтруктуры(Объект, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = Объект.Метаданные();
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "ПометкаУдаления", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Дата", СписокСвойств, ИсключаяСвойства);
	
	Если МетаОбъект.ДлинаНомера > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Номер", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	Если МетаОбъект.ДлинаНаименования > 0 Тогда
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Наименование", СписокСвойств, ИсключаяСвойства);
	КонецЕсли;
	
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "БизнесПроцесс", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "Выполнена", СписокСвойств, ИсключаяСвойства);
	СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, "ТочкаМаршрута", СписокСвойств, ИсключаяСвойства);
	
	Для Каждого ТекРеквизит Из МетаОбъект.Реквизиты Цикл
		СвойствоОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекРеквизит.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
	Для Каждого ТекТЧ Из МетаОбъект.ТабличныеЧасти Цикл
		ТЧОбъектаИзСтруктуры(Объект, СтруктураОбъекта, ТекТЧ.Имя, СписокСвойств, ИсключаяСвойства);
	КонецЦикла;
	
КонецПроцедуры // ЗадачаИзСтруктуры()

// Преобразует набор записей регистра сведений в структуру
//
// Параметры:
//  НаборЗаписей        - РегистрСведенийНаборЗаписей    - набор записей регистра сведений для преобразования
//  СписокСвойств       - Строка, Массив(Строка)         - Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства    - Строка, Массив(Строка)         - Список исключаемых свойств (если пустой, то допустимы все свойства)
//
// Возвращаемое значение:
//   Структура       - результат преобразования
//		Отбор          - Структура            - Описание отбора записей регистра
//			<имя поля>     - Произвольный          - Значение отбора
//		Записи         - Массив(Структура)    - Массив записей регистра
//			<имя поля>     - Произвольный          - Значения измерений, ресурсов и реквизитов записи регистра
//
Функция НаборЗаписейРегистраСведенийВСтруктуру(НаборЗаписей, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = НаборЗаписей.Метаданные();
	
	СтруктураОбъекта.Вставить("Отбор", Новый Структура());
	
	Если МетаОбъект.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		СтруктураОбъекта.Отбор.Вставить("Регистратор", ЗначениеВСтруктуру(НаборЗаписей.Отбор.Регистратор.Значение));
	Иначе
		Если НЕ МетаОбъект.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			СтруктураОбъекта.Отбор.Вставить("Период", НаборЗаписей.Отбор.Период.Значение);
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из НаборЗаписей.Отбор Цикл
			Если НЕ ИспользоватьСвойство(ТекЭлемент.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураОбъекта.Отбор.Вставить(ТекЭлемент.Имя, ЗначениеВСтруктуру(ТекЭлемент.Значение));
		КонецЦикла;
	КонецЕсли;
	
	МассивСтрок = Новый Массив();
	
	//@skip-warning
	Для Каждого ТекСтрока Из НаборЗаписей Цикл
		
		СтруктураСтроки = Новый Структура();
		
		Если МетаОбъект.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
			СтруктураСтроки.Вставить("Регистратор", ЗначениеВСтруктуру(ТекСтрока.Регистратор));
			Если ИспользоватьСвойство("НомерСтроки", СписокСвойств, ИсключаяСвойства) Тогда
				СтруктураСтроки.Вставить("НомерСтроки", ТекСтрока.НомерСтроки);
			КонецЕсли;
			СтруктураСтроки.Вставить("Активность", ТекСтрока.Активность);
		КонецЕсли;
		
		Если НЕ МетаОбъект.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			СтруктураСтроки.Вставить("Период", ТекСтрока.Период);
		КонецЕсли;
		
		Для Каждого ТекПоле Из МетаОбъект.Измерения Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураСтроки.Вставить(ТекПоле.Имя, ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя]));
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Ресурсы Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураСтроки.Вставить(ТекПоле.Имя, ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя]));
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Реквизиты Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураСтроки.Вставить(ТекПоле.Имя, ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя]));
		КонецЦикла;
		
		МассивСтрок.Добавить(СтруктураСтроки);
		
	КонецЦикла;

	СтруктураОбъекта.Вставить("Записи", МассивСтрок);
	
	Возврат СтруктураОбъекта;
	
КонецФункции // НаборЗаписейРегистраСведенийВСтруктуру()

// Заполняет набор записей регистра сведений из структуры
//
// Параметры:
//  НаборЗаписей		- РегистрСведенийНаборЗаписей		- Набор записей регистра для заполнения
//  СтруктураОбъекта	- Структура							- Данные для заполнения объекта
//		Отбор				- Структура							- Описание отбора записей регистра
//			<имя поля>			- Произвольный						- Значение отбора
//		Записи				- Массив(Структура)					- Массив записей регистра
//			<имя поля>			- Произвольный						- Значения измерений, ресурсов и реквизитов записи регистра
//  СписокСвойств		- Строка, Массив(Строка)			- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)			- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
Процедура НаборЗаписейРегистраСведенийИзСтруктуры(НаборЗаписей, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = НаборЗаписей.Метаданные();
	
	Если МетаОбъект.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		НаборЗаписей.Отбор.Регистратор.Установить(ЗначениеИзСтруктуры(СтруктураОбъекта.Отбор.Регистратор));
	Иначе
		Если НЕ МетаОбъект.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			НаборЗаписей.Отбор.Период.Установить(ЗначениеИзСтруктуры(СтруктураОбъекта.Отбор.Период));
		КонецЕсли;
		
		Для Каждого ТекПоле Из МетаОбъект.Измерения Цикл
			Если НЕ (СтруктураОбъекта.Отбор.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			НаборЗаписей.Отбор[ТекПоле.Имя].Установить(ЗначениеИзСтруктуры(СтруктураОбъекта.Отбор[ТекПоле.Имя]));
		КонецЦикла;
	КонецЕсли;
		
	НаборЗаписей.Очистить();
	
	Для Каждого ТекЗапись Из СтруктураОбъекта.Записи Цикл
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		Если МетаОбъект.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
			НоваяЗапись.Регистратор = ЗначениеИзСтруктуры(ТекЗапись.Регистратор);
			НоваяЗапись.Активность = ЗначениеИзСтруктуры(ТекЗапись.Активность);
		КонецЕсли;
		
		Если НЕ МетаОбъект.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			НоваяЗапись.Период = ЗначениеИзСтруктуры(ТекЗапись.Период);
		КонецЕсли;
		
		Для Каждого ТекПоле Из МетаОбъект.Измерения Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись[ТекПоле.Имя] = ЗначениеИзСтруктуры(ТекЗапись[ТекПоле.Имя]);
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Ресурсы Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись[ТекПоле.Имя] = ЗначениеИзСтруктуры(ТекЗапись[ТекПоле.Имя]);
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Реквизиты Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись[ТекПоле.Имя] = ЗначениеИзСтруктуры(ТекЗапись[ТекПоле.Имя]);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // НаборЗаписейРегистраСведенийИзСтруктуры()

// Преобразует набор записей регистра накопления в структуру
//
// Параметры:
//  НаборЗаписей        - РегистрНакопленияНаборЗаписей    - набор записей регистра накопления для преобразования
//  СписокСвойств       - Строка, Массив(Строка)           - Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства    - Строка, Массив(Строка)           - Список исключаемых свойств (если пустой, то допустимы все свойства)
//
// Возвращаемое значение:
//   Структура       - результат преобразования
//		Отбор           - Структура            - Описание отбора записей регистра
//			<имя поля>      - Произвольный         - Значение отбора
//		Записи          - Массив(Структура)    - Массив записей регистра
//			<имя поля>      - Произвольный         - Значения измерений, ресурсов и реквизитов записи регистра
//
Функция НаборЗаписейРегистраНакопленияВСтруктуру(НаборЗаписей, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = НаборЗаписей.Метаданные();
	
	СтруктураОбъекта.Вставить("Отбор", Новый Структура());
	
	СтруктураОбъекта.Отбор.Вставить("Регистратор", ЗначениеВСтруктуру(НаборЗаписей.Отбор.Регистратор.Значение));
	
	МассивСтрок = Новый Массив();
	
	//@skip-warning
	Для Каждого ТекСтрока Из НаборЗаписей Цикл
		
		СтруктураСтроки = Новый Структура();
		
		СтруктураСтроки.Вставить("Регистратор", ЗначениеВСтруктуру(ТекСтрока.Регистратор));
		
		Если ИспользоватьСвойство("НомерСтроки", СписокСвойств, ИсключаяСвойства) Тогда
			СтруктураСтроки.Вставить("НомерСтроки", ТекСтрока.НомерСтроки);
		КонецЕсли;
	
		СтруктураСтроки.Вставить("Активность", ТекСтрока.Активность);
		
		Если МетаОбъект.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			СтруктураСтроки.Вставить("ВидДвижения", ?(ТекСтрока.ВидДвижения = ВидДвиженияНакопления.Приход, "Приход", "Расход"));
		КонецЕсли;
		
		СтруктураСтроки.Вставить("Период", ТекСтрока.Период);
		
		Для Каждого ТекПоле Из МетаОбъект.Измерения Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураСтроки.Вставить(ТекПоле.Имя, ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя]));
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Ресурсы Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураСтроки.Вставить(ТекПоле.Имя, ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя]));
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Реквизиты Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураСтроки.Вставить(ТекПоле.Имя, ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя]));
		КонецЦикла;
		
		МассивСтрок.Добавить(СтруктураСтроки);
		
	КонецЦикла;

	СтруктураОбъекта.Вставить("Записи", МассивСтрок);
	
	Возврат СтруктураОбъекта;
	
КонецФункции // НаборЗаписейРегистраНакопленияВСтруктуру()

// Заполняет набор записей регистра накопления из структуры
//
// Параметры:
//  НаборЗаписей		- РегистрСведенийНаборЗаписей		- Набор записей регистра для заполнения
//  СтруктураОбъекта	- Структура							- Данные для заполнения объекта
//		Отбор				- Структура							- Описание отбора записей регистра
//			<имя поля>			- Произвольный						- Значение отбора
//		Записи				- Массив(Структура)					- Массив записей регистра
//			<имя поля>			- Произвольный						- Значения измерений, ресурсов и реквизитов записи регистра
//  СписокСвойств		- Строка, Массив(Строка)			- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)			- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
Процедура НаборЗаписейРегистраНакопленияИзСтруктуры(НаборЗаписей, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = НаборЗаписей.Метаданные();
	
	НаборЗаписей.Отбор.Регистратор.Установить(ЗначениеИзСтруктуры(СтруктураОбъекта.Отбор.Регистратор));
	
	НаборЗаписей.Очистить();
	
	Для Каждого ТекЗапись Из СтруктураОбъекта.Записи Цикл
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.Регистратор = ЗначениеИзСтруктуры(ТекЗапись.Регистратор);
		
		НоваяЗапись.Активность = ЗначениеИзСтруктуры(ТекЗапись.Активность);
		
		Если МетаОбъект.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			НоваяЗапись.ВидДвижения = Вычислить("ВидДвиженияНакопления." + ТекЗапись.ВидДвижения);
		КонецЕсли;
		
		НоваяЗапись.Период = ЗначениеИзСтруктуры(ТекЗапись.Период);
		
		Для Каждого ТекПоле Из МетаОбъект.Измерения Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись[ТекПоле.Имя] = ЗначениеИзСтруктуры(ТекЗапись[ТекПоле.Имя]);
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Ресурсы Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись[ТекПоле.Имя] = ЗначениеИзСтруктуры(ТекЗапись[ТекПоле.Имя]);
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Реквизиты Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись[ТекПоле.Имя] = ЗначениеИзСтруктуры(ТекЗапись[ТекПоле.Имя]);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // НаборЗаписейРегистраНакопленияИзСтруктуры()

// Преобразует набор записей регистра бухгалтерии в структуру
//
// Параметры:
//  НаборЗаписей        - РегистрБухгалтерииНаборЗаписей    - набор записей регистра бухгалтерии для преобразования
//  СписокСвойств       - Строка, Массив(Строка)            - Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства    - Строка, Массив(Строка)            - Список исключаемых свойств (если пустой, то допустимы все свойства)
//
// Возвращаемое значение:
//   Структура       - результат преобразования
//		Отбор           - Структура            - Описание отбора записей регистра
//			<имя поля>      - Произвольный         - Значение отбора
//		Записи          - Массив(Структура)    - Массив записей регистра
//			<имя поля>      - Произвольный         - Значения измерений, ресурсов и реквизитов записи регистра
//
Функция НаборЗаписейРегистраБухгалтерииВСтруктуру(НаборЗаписей, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = НаборЗаписей.Метаданные();
	
	СтруктураОбъекта.Вставить("Отбор", Новый Структура());
	
	СтруктураОбъекта.Отбор.Вставить("Регистратор", ЗначениеВСтруктуру(НаборЗаписей.Отбор.Регистратор.Значение));
	
	МассивСтрок = Новый Массив();
	
	//@skip-warning
	Для Каждого ТекСтрока Из НаборЗаписей Цикл
		
		СтруктураСтроки = Новый Структура();
		
		СтруктураСтроки.Вставить("Регистратор", ЗначениеВСтруктуру(ТекСтрока.Регистратор));
		
		Если ИспользоватьСвойство("НомерСтроки", СписокСвойств, ИсключаяСвойства) Тогда
			СтруктураСтроки.Вставить("НомерСтроки", ТекСтрока.НомерСтроки);
		КонецЕсли;
	
		СтруктураСтроки.Вставить("Активность", ТекСтрока.Активность);
		
		СтруктураСтроки.Вставить("Период", ТекСтрока.Период);
		
		Если МетаОбъект.ДлинаУточненияПериода > 0
		   И ИспользоватьСвойство("УточнениеПериода", СписокСвойств, ИсключаяСвойства) Тогда
			СтруктураСтроки.Вставить("УточнениеПериода", ТекСтрока.УточнениеПериода);
		КонецЕсли;
		
		Если МетаОбъект.Корреспонденция Тогда
			СтруктураСтроки.Вставить("СчетДт", ЗначениеВСтруктуру(ТекСтрока.СчетДт));
			СтруктураСтроки.Вставить("СчетКт", ЗначениеВСтруктуру(ТекСтрока.СчетКт));
			
			СтруктураСтроки.Вставить("СубконтоДт", ЗначенияСубконтоЗаписиВСтруктуру(ТекСтрока, "Дт", СписокСвойств, ИсключаяСвойства));
			СтруктураСтроки.Вставить("СубконтоКт", ЗначенияСубконтоЗаписиВСтруктуру(ТекСтрока, "Кт", СписокСвойств, ИсключаяСвойства));
		Иначе
			СтруктураСтроки.Вставить("ВидДвижения", ?(ТекСтрока.ВидДвижения = ВидДвиженияБухгалтерии.Дебет, "Дебет", "Кредит"));
			
			СтруктураСтроки.Вставить("Счет", ЗначениеВСтруктуру(ТекСтрока.Счет));
			
			СтруктураСтроки.Вставить("Субконто", ЗначенияСубконтоЗаписиВСтруктуру(ТекСтрока, "", СписокСвойств, ИсключаяСвойства));
		КонецЕсли;
		
		Для Каждого ТекПоле Из МетаОбъект.Измерения Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			Если МетаОбъект.Корреспонденция И НЕ ТекПоле.Балансовый Тогда
				СтруктураСтроки.Вставить(ТекПоле.Имя + "Дт", ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя + "Дт"]));
				СтруктураСтроки.Вставить(ТекПоле.Имя + "Кт", ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя + "Кт"]));
			Иначе
				СтруктураСтроки.Вставить(ТекПоле.Имя, ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя]));
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Ресурсы Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			Если МетаОбъект.Корреспонденция И НЕ ТекПоле.Балансовый Тогда
				СтруктураСтроки.Вставить(ТекПоле.Имя + "Дт", ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя + "Дт"]));
				СтруктураСтроки.Вставить(ТекПоле.Имя + "Кт", ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя + "Кт"]));
			Иначе
				СтруктураСтроки.Вставить(ТекПоле.Имя, ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя]));
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Реквизиты Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураСтроки.Вставить(ТекПоле.Имя, ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя]));
		КонецЦикла;
		
		МассивСтрок.Добавить(СтруктураСтроки);
		
	КонецЦикла;

	СтруктураОбъекта.Вставить("Записи", МассивСтрок);
	
	Возврат СтруктураОбъекта;
	
КонецФункции // НаборЗаписейРегистраБухгалтерииВСтруктуру()

// Заполняет набор записей регистра бухгалтерии из структуры
//
// Параметры:
//  НаборЗаписей		- РегистрСведенийНаборЗаписей		- Набор записей регистра для заполнения
//  СтруктураОбъекта	- Структура							- Данные для заполнения объекта
//		Отбор				- Структура							- Описание отбора записей регистра
//			<имя поля>			- Произвольный						- Значение отбора
//		Записи				- Массив(Структура)					- Массив записей регистра
//			<имя поля>			- Произвольный						- Значения измерений, ресурсов и реквизитов записи регистра
//  СписокСвойств		- Строка, Массив(Строка)			- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)			- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
Процедура НаборЗаписейРегистраБухгалтерииИзСтруктуры(НаборЗаписей, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = НаборЗаписей.Метаданные();
	
	НаборЗаписей.Отбор.Регистратор.Установить(ЗначениеИзСтруктуры(СтруктураОбъекта.Отбор.Регистратор));
	
	НаборЗаписей.Очистить();
	
	Для Каждого ТекЗапись Из СтруктураОбъекта.Записи Цикл
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.Регистратор = ЗначениеИзСтруктуры(ТекЗапись.Регистратор);
		
		НоваяЗапись.Активность = ЗначениеИзСтруктуры(ТекЗапись.Активность);
		НоваяЗапись.Период = ЗначениеИзСтруктуры(ТекЗапись.Период);
		
		Если МетаОбъект.ДлинаУточненияПериода > 0
		   И ИспользоватьСвойство("УточнениеПериода", СписокСвойств, ИсключаяСвойства) Тогда
			НоваяЗапись.УточнениеПериода = ЗначениеИзСтруктуры(ТекЗапись.УточнениеПериода);
		КонецЕсли;
		
		Если МетаОбъект.Корреспонденция Тогда
			НоваяЗапись.СчетДт = ЗначениеИзСтруктуры(ТекЗапись.СчетДт);
			НоваяЗапись.СчетКт = ЗначениеИзСтруктуры(ТекЗапись.СчетКт);
			
			ЗначенияСубконтоЗаписиИзСтруктуры(НоваяЗапись, ТекЗапись, "Дт", СписокСвойств, ИсключаяСвойства);
			ЗначенияСубконтоЗаписиИзСтруктуры(НоваяЗапись, ТекЗапись, "Кт", СписокСвойств, ИсключаяСвойства);
		Иначе
			НоваяЗапись.ВидДвижения = Вычислить("ВидДвиженияБухгалтерии." + ТекЗапись.ВидДвижения);
			
			НоваяЗапись.Счет = ЗначениеИзСтруктуры(ТекЗапись.Счет);
			
			ЗначенияСубконтоЗаписиИзСтруктуры(НоваяЗапись, ТекЗапись, "", СписокСвойств, ИсключаяСвойства);
		КонецЕсли;
		
		Для Каждого ТекПоле Из МетаОбъект.Измерения Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			Если МетаОбъект.Корреспонденция И НЕ ТекПоле.Балансовый Тогда
				ЗаполнитьИзмерениеРегистраБухгалтерии(НоваяЗапись, ТекЗапись, ТекПоле, "Дт");
				ЗаполнитьИзмерениеРегистраБухгалтерии(НоваяЗапись, ТекЗапись, ТекПоле, "Кт");
			Иначе
				ЗаполнитьИзмерениеРегистраБухгалтерии(НоваяЗапись, ТекЗапись, ТекПоле, "");
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Ресурсы Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			Если МетаОбъект.Корреспонденция И НЕ ТекПоле.Балансовый Тогда
				ЗаполнитьРесурсРегистраБухгалтерии(НоваяЗапись, ТекЗапись, ТекПоле, "Дт");
				ЗаполнитьРесурсРегистраБухгалтерии(НоваяЗапись, ТекЗапись, ТекПоле, "Кт");
			Иначе
				ЗаполнитьРесурсРегистраБухгалтерии(НоваяЗапись, ТекЗапись, ТекПоле, "");
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Реквизиты Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись[ТекПоле.Имя] = ЗначениеИзСтруктуры(ТекЗапись[ТекПоле.Имя]);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // НаборЗаписейРегистраБухгалтерииИзСтруктуры()

// Преобразует набор записей регистра расчета в структуру
//
// Параметры:
//  НаборЗаписей        - РегистрРасчетаНаборЗаписей    - набор записей регистра расчета для преобразования
//  СписокСвойств       - Строка, Массив(Строка)        - Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства    - Строка, Массив(Строка)        - Список исключаемых свойств (если пустой, то допустимы все свойства)
//
// Возвращаемое значение:
//   Структура       - результат преобразования
//		Отбор           - Структура            - Описание отбора записей регистра
//			<имя поля>      - Произвольный         - Значение отбора
//		Записи          - Массив(Структура)    - Массив записей регистра
//			<имя поля>      - Произвольный         - Значения измерений, ресурсов и реквизитов записи регистра
//
Функция НаборЗаписейРегистраРасчетаВСтруктуру(НаборЗаписей, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МетаОбъект = НаборЗаписей.Метаданные();
	
	СтруктураОбъекта.Вставить("Отбор", Новый Структура());
	
	СтруктураОбъекта.Отбор.Вставить("Регистратор", ЗначениеВСтруктуру(НаборЗаписей.Отбор.Регистратор.Значение));
	
	Для Каждого ТекЭлемент Из НаборЗаписей.Отбор Цикл
		Если НЕ ИспользоватьСвойство(ТекЭлемент.Имя, СписокСвойств, ИсключаяСвойства) Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОбъекта.Отбор.Вставить(ТекЭлемент.Имя, ЗначениеВСтруктуру(ТекЭлемент.Значение));
	КонецЦикла;
	
	МассивСтрок = Новый Массив();
	
	//@skip-warning
	Для Каждого ТекСтрока Из НаборЗаписей Цикл
		
		СтруктураСтроки = Новый Структура();
		
		СтруктураСтроки.Вставить("Регистратор", ЗначениеВСтруктуру(ТекСтрока.Регистратор));
		
		Если ИспользоватьСвойство("НомерСтроки", СписокСвойств, ИсключаяСвойства) Тогда
			СтруктураСтроки.Вставить("НомерСтроки", ТекСтрока.НомерСтроки);
		КонецЕсли;
	
		СтруктураСтроки.Вставить("Активность"		, ТекСтрока.Активность);
		
		СтруктураСтроки.Вставить("ВидРасчета"		, ЗначениеВСтруктуру(ТекСтрока.ВидРасчета));
		
		СтруктураСтроки.Вставить("Сторно"			, ТекСтрока.Сторно);
		
		СтруктураСтроки.Вставить("ПериодРегистрации", ТекСтрока.ПериодРегистрации);
		
		Если МетаОбъект.БазовыйПериод Тогда
			СтруктураСтроки.Вставить("БазовыйПериодНачало"	, ТекСтрока.БазовыйПериодНачало);
			СтруктураСтроки.Вставить("БазовыйПериодКонец"	, ТекСтрока.БазовыйПериодКонец);
		КонецЕсли;
		
		Если МетаОбъект.ПериодДействия Тогда
			СтруктураСтроки.Вставить("ПериодДействия"		, ТекСтрока.ПериодДействия);
			СтруктураСтроки.Вставить("ПериодДействияНачало"	, ТекСтрока.ПериодДействияНачало);
			СтруктураСтроки.Вставить("ПериодДействияКонец"	, ТекСтрока.ПериодДействияКонец);
			
			МассивПериодов = Новый Массив();
			
			Для Каждого ТекПериод Из ТекСтрока.ФактическийПериодДействия Цикл
				МассивПериодов.Добавить(Новый Структура("ДатаНачала, ДатаОкончания", ТекПериод.ДатаНачала, ТекПериод.ДатаОкончания));
			КонецЦикла;
			СтруктураСтроки.Вставить("ФактическийПериодДействия", МассивПериодов);
		КонецЕсли;
		
		Для Каждого ТекПоле Из МетаОбъект.Измерения Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураСтроки.Вставить(ТекПоле.Имя, ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя]));
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Ресурсы Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураСтроки.Вставить(ТекПоле.Имя, ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя]));
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Реквизиты Цикл
			Если НЕ ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураСтроки.Вставить(ТекПоле.Имя, ЗначениеВСтруктуру(ТекСтрока[ТекПоле.Имя]));
		КонецЦикла;
		
		МассивСтрок.Добавить(СтруктураСтроки);
		
	КонецЦикла;

	СтруктураОбъекта.Вставить("Записи", МассивСтрок);
	
	Возврат СтруктураОбъекта;
	
КонецФункции // НаборЗаписейРегистраРасчетаВСтруктуру()

// Заполняет набор записей регистра расчета из структуры
//
// Параметры:
//  НаборЗаписей		- РегистрСведенийНаборЗаписей		- Набор записей регистра для заполнения
//  СтруктураОбъекта	- Структура							- Данные для заполнения объекта
//		Отбор				- Структура							- Описание отбора записей регистра
//			<имя поля>			- Произвольный						- Значение отбора
//		Записи				- Массив(Структура)					- Массив записей регистра
//			<имя поля>			- Произвольный						- Значения измерений, ресурсов и реквизитов записи регистра
//  СписокСвойств		- Строка, Массив(Строка)			- Список допустимых свойств (если пустой, то допустимы все свойства)
//  ИсключаяСвойства	- Строка, Массив(Строка)			- Список исключаемых свойств (если пустой, то допустимы все свойства)
//
Процедура НаборЗаписейРегистраРасчетаИзСтруктуры(НаборЗаписей, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	МетаОбъект = НаборЗаписей.Метаданные();
	
	НаборЗаписей.Отбор.Регистратор.Установить(ЗначениеИзСтруктуры(СтруктураОбъекта.Отбор.Регистратор));
	
	Для Каждого ТекПоле Из МетаОбъект.Измерения Цикл
		Если НЕ (СтруктураОбъекта.Отбор.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
			Продолжить;
		КонецЕсли;
		НаборЗаписей.Отбор[ТекПоле.Имя].Установить(ЗначениеИзСтруктуры(СтруктураОбъекта.Отбор[ТекПоле.Имя]));
	КонецЦикла;
	
	НаборЗаписей.Очистить();
	
	Для Каждого ТекЗапись Из СтруктураОбъекта.Записи Цикл
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.Регистратор = ЗначениеИзСтруктуры(ТекЗапись.Регистратор);
		
		НоваяЗапись.Активность 			= ЗначениеИзСтруктуры(ТекЗапись.Активность);
		
		НоваяЗапись.ВидРасчета			= ЗначениеИзСтруктуры(ТекЗапись.ВидРасчета);
		
		НоваяЗапись.Сторно				= ЗначениеИзСтруктуры(ТекЗапись.Сторно);
		
		НоваяЗапись.ПериодРегистрации	= ЗначениеИзСтруктуры(ТекЗапись.ПериодРегистрации);
		
		Если МетаОбъект.БазовыйПериод Тогда
			НоваяЗапись.БазовыйПериодНачало	= ЗначениеИзСтруктуры(ТекЗапись.БазовыйПериодНачало);
			НоваяЗапись.БазовыйПериодКонец	= ЗначениеИзСтруктуры(ТекЗапись.БазовыйПериодКонец);
		КонецЕсли;
		
		Если МетаОбъект.ПериодДействия Тогда
			НоваяЗапись.ПериодДействияНачало	= ЗначениеИзСтруктуры(ТекЗапись.ПериодДействияНачало);
			НоваяЗапись.ПериодДействияКонец		= ЗначениеИзСтруктуры(ТекЗапись.ПериодДействияКонец);
		КонецЕсли;
		
		Для Каждого ТекПоле Из МетаОбъект.Измерения Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись[ТекПоле.Имя] = ЗначениеИзСтруктуры(ТекЗапись[ТекПоле.Имя]);
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Ресурсы Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись[ТекПоле.Имя] = ЗначениеИзСтруктуры(ТекЗапись[ТекПоле.Имя]);
		КонецЦикла;
		
		Для Каждого ТекПоле Из МетаОбъект.Реквизиты Цикл
			Если НЕ (ТекЗапись.Свойство(ТекПоле.Имя) И ИспользоватьСвойство(ТекПоле.Имя, СписокСвойств, ИсключаяСвойства)) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись[ТекПоле.Имя] = ЗначениеИзСтруктуры(ТекЗапись[ТекПоле.Имя]);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // НаборЗаписейРегистраРасчетаИзСтруктуры()

#КонецОбласти // ПреобразованияОбъектовПоВидам

#Область ПреобразованияСКД

Функция ВариантНастроекСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ВариантНастроекКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Имя"          , Объект.Имя);
	СтруктураОбъекта.Вставить("Настройки"    , НастройкиСКДВСтруктуру(Объект.Настройки));
	СтруктураОбъекта.Вставить("Представление", Объект.Представление);

	Возврат СтруктураОбъекта;
	
КонецФункции // ВариантНастроекСКДВСтруктуру()

Процедура ВариантНастроекСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ВариантНастроекКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Имя") Тогда
		Объект.Имя = СтруктураОбъекта.Имя;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Настройки") Тогда
		НастройкиСКДИзСтруктуры(Объект.Настройки, СтруктураОбъекта.Настройки);
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Представление") Тогда
		Объект.Представление = СтруктураОбъекта.Представление;
	КонецЕсли;
	
КонецПроцедуры // ВариантНастроекСКДИзСтруктуры()

Функция ВложеннаяСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ВложеннаяСхемаКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Заголовок", Объект.Заголовок);
	СтруктураОбъекта.Вставить("Имя"      , Объект.Имя);
	СтруктураОбъекта.Вставить("Настройки", НастройкиСКДВСтруктуру(Объект.Настройки));
	СтруктураОбъекта.Вставить("Схема"    , СКДВСтруктуру(Объект.Схема));

	Возврат СтруктураОбъекта;
	
КонецФункции // ВложеннаяСКДВСтруктуру()

Процедура ВложеннаяСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ВложеннаяСхемаКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Имя") Тогда
		Объект.Имя = СтруктураОбъекта.Имя;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Заголовок") Тогда
		Объект.Заголовок = СтруктураОбъекта.Заголовок;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Настройки") Тогда
		НастройкиСКДИзСтруктуры(Объект.Настройки, СтруктураОбъекта.Настройки);
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Схема") Тогда
		СКДИзСтруктуры(Объект.Схема, СтруктураОбъекта.Схема);
	КонецЕсли;
	
КонецПроцедуры // ВложеннаяСКДИзСтруктуры()

Функция ВычисляемоеПолеСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ВычисляемоеПолеСхемыКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Выражение"               , Объект.Выражение);
	СтруктураОбъекта.Вставить("ВыражениеПредставления"  , Объект.ВыражениеПредставления);

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.ВыраженияУпорядочивания Цикл
		МассивЭлементов.Добавить(ВыражениеУпорядочиванияСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("ВыраженияУпорядочивания" , МассивЭлементов);
	
	СтруктураОбъекта.Вставить("Заголовок"               , Объект.Заголовок);
	СтруктураОбъекта.Вставить("ОграничениеИспользования",
	                          ОграничениеИспользованияПоляСКДВСтруктуру(Объект.ОграничениеИспользования));
	СтруктураОбъекта.Вставить("Оформление"              , ОформлениеСКДВСтруктуру(Объект.Оформление));
	СтруктураОбъекта.Вставить("ПараметрыРедактирования" ,
	                          ПараметрыРедактированияСКДВСтруктуру(Объект.ПараметрыРедактирования));
	СтруктураОбъекта.Вставить("ПутьКДанным"             , Объект.ПутьКДанным);
	СтруктураОбъекта.Вставить("ТипЗначения"             , ЗначениеВСтруктуру(Объект.ТипЗначения));

	Возврат СтруктураОбъекта;
	
КонецФункции // ВычисляемоеПолеСКДВСтруктуру()

Процедура ВычисляемоеПолеСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ВычисляемоеПолеСхемыКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Выражение") Тогда
		Объект.Выражение = СтруктураОбъекта.Выражение;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ВыражениеПредставления") Тогда
		Объект.ВыражениеПредставления = СтруктураОбъекта.ВыражениеПредставления;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ВыраженияУпорядочивания") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.ВыраженияУпорядочивания Цикл
			НовыйЭлемент = Объект.ВыраженияУпорядочивания.Добавить();
			ВыражениеУпорядочиванияСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Заголовок") Тогда
		Объект.Заголовок = СтруктураОбъекта.Заголовок;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ОграничениеИспользования") Тогда
		ОграничениеИспользованияПоляСКДИзСтруктуры(Объект.ОграничениеИспользования,
		                                           СтруктураОбъекта.ОграничениеИспользования);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Оформление") Тогда
		ОформлениеСКДИзСтруктуры(Объект.Оформление, СтруктураОбъекта.Оформление);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПараметрыРедактирования") Тогда
		ПараметрыРедактированияСКДИзСтруктуры(Объект.ПараметрыРедактирования,
		                                      СтруктураОбъекта.ПараметрыРедактирования);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПутьКДанным") Тогда
		Объект.ПутьКДанным = СтруктураОбъекта.ПутьКДанным;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ТипЗначения") Тогда
		Объект.ТипЗначения = ЗначениеИзСтруктуры(СтруктураОбъекта.ТипЗначения);
	КонецЕсли;

КонецПроцедуры // ВычисляемоеПолеСКДИзСтруктуры()

Функция ИсточникДанныхСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ИсточникДанныхСхемыКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Имя"               , Объект.Имя);
	СтруктураОбъекта.Вставить("СтрокаСоединения"  , Объект.СтрокаСоединения);
	СтруктураОбъекта.Вставить("ТипИсточникаДанных", Объект.ТипИсточникаДанных);

	Возврат СтруктураОбъекта;
	
КонецФункции // ИсточникДанныхСКДВСтруктуру()

Процедура ИсточникДанныхСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ИсточникДанныхСхемыКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Имя") Тогда
		Объект.Имя = СтруктураОбъекта.Имя;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("СтрокаСоединения") Тогда
		Объект.СтрокаСоединения = СтруктураОбъекта.СтрокаСоединения;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ТипИсточникаДанных") Тогда
		Объект.ТипИсточникаДанных = СтруктураОбъекта.ТипИсточникаДанных;
	КонецЕсли;
	
КонецПроцедуры // ИсточникДанныхСКДИзСтруктуры()

Функция МакетСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ОписаниеМакетаСхемыКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Имя"    , Объект.Имя);

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Макет Цикл
		МассивЭлементов.Добавить(СтрокаТаблицыОбластиСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Макет" , МассивЭлементов);

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Параметры Цикл
		МассивЭлементов.Добавить(ПараметрОбластиСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Параметры" , МассивЭлементов);

	Возврат СтруктураОбъекта;
	
КонецФункции // МакетСКДВСтруктуру()

Процедура МакетСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ОписаниеМакетаСхемыКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Имя") Тогда
		Объект.Имя = СтруктураОбъекта.Имя;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Макет") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Макет Цикл
			НовыйЭлемент = Объект.ВыраженияУпорядочивания.Добавить();
			СтрокаТаблицыОбластиСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Параметры") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Параметры Цикл
			НовыйЭлемент = Объект.Параметры.Добавить(Тип(ТекЭлемент.Тип));
			ПараметрОбластиСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // МакетСКДИзСтруктуры()

Функция МакетГруппировкиСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("МакетГруппировкиСхемыКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("ИмяГруппировки", Объект.ИмяГруппировки);
	СтруктураОбъекта.Вставить("Макет"         , Объект.Макет);

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.ПоляГруппировки Цикл
		МассивЭлементов.Добавить(СокрЛП(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("ПоляГруппировки", МассивЭлементов);
	
	СтруктураОбъекта.Вставить("ТипМакета" , ТипМакетаОбластиКомпоновкиДанныхВСтроку(Объект.ТипМакета));
	
	Возврат СтруктураОбъекта;
	
КонецФункции // МакетГруппировкиСКДВСтруктуру()

Процедура МакетГруппировкиСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("МакетГруппировкиСхемыКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ИмяГруппировки") Тогда
		Объект.ИмяГруппировки = СтруктураОбъекта.ИмяГруппировки;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Макет") Тогда
		Объект.Макет = СтруктураОбъекта.Макет;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПоляГруппировки") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.ПоляГруппировки Цикл
			Объект.ПоляГруппировки.Добавить(Новый ПолеКомпоновкиДанных(ТекЭлемент));
		КонецЦикла;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ТипМакета") Тогда
		Объект.ТипМакета = ТипМакетаОбластиКомпоновкиДанных[СтруктураОбъекта.ТипМакета];
	КонецЕсли;

КонецПроцедуры // МакетГруппировкиСКДИзСтруктуры()

Функция МакетПоляСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("МакетПоляСхемыКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Макет", Объект.Макет);
	СтруктураОбъекта.Вставить("Поле" , Объект.Поле);

	Возврат СтруктураОбъекта;
	
КонецФункции // МакетПоляСКДВСтруктуру()

Процедура МакетПоляСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("МакетПоляСхемыКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Макет") Тогда
		Объект.Макет = СтруктураОбъекта.Макет;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Поле") Тогда
		Объект.Поле = СтруктураОбъекта.Поле;
	КонецЕсли;

КонецПроцедуры // МакетПоляСКДИзСтруктуры()

Функция МакетПолейИтогаСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("МакетПолейИтогаСхемыКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("ИмяГруппировки1", Объект.ИмяГруппировки1);
	СтруктураОбъекта.Вставить("ИмяГруппировки2", Объект.ИмяГруппировки2);
	СтруктураОбъекта.Вставить("Макет" , Объект.Макет);

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.ПоляГруппировки1 Цикл
		МассивЭлементов.Добавить(СокрЛП(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("ПоляГруппировки1", МассивЭлементов);
	
	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.ПоляГруппировки2 Цикл
		МассивЭлементов.Добавить(СокрЛП(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("ПоляГруппировки2", МассивЭлементов);
	
	СтруктураОбъекта.Вставить("ТипМакета1" , ТипМакетаОбластиКомпоновкиДанныхВСтроку(Объект.ТипМакета1));
	СтруктураОбъекта.Вставить("ТипМакета2" , ТипМакетаОбластиКомпоновкиДанныхВСтроку(Объект.ТипМакета2));

	Возврат СтруктураОбъекта;
	
КонецФункции // МакетПолейИтогаСКДВСтруктуру()

Процедура МакетПолейИтогаСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("МакетПолейИтогаСхемыКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ИмяГруппировки1") Тогда
		Объект.ИмяГруппировки1 = СтруктураОбъекта.ИмяГруппировки1;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ИмяГруппировки2") Тогда
		Объект.ИмяГруппировки2 = СтруктураОбъекта.ИмяГруппировки2;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Макет") Тогда
		Объект.Макет = СтруктураОбъекта.Макет;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПоляГруппировки1") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.ПоляГруппировки1 Цикл
			Объект.ПоляГруппировки1.Добавить(Новый ПолеКомпоновкиДанных(ТекЭлемент));
		КонецЦикла;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПоляГруппировки2") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.ПоляГруппировки2 Цикл
			Объект.ПоляГруппировки2.Добавить(Новый ПолеКомпоновкиДанных(ТекЭлемент));
		КонецЦикла;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ТипМакета1") Тогда
		Объект.ТипМакета1 = ТипМакетаОбластиКомпоновкиДанных[СтруктураОбъекта.ТипМакета1];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ТипМакета2") Тогда
		Объект.ТипМакета2 = ТипМакетаОбластиКомпоновкиДанных[СтруктураОбъекта.ТипМакета2];
	КонецЕсли;

КонецПроцедуры // МакетПолейИтогаСКДИзСтруктуры()

Функция НаборДанныхЗапросСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Тип", "НаборДанныхЗапросСхемыКомпоновкиДанных");

	СтруктураОбъекта.Вставить("АвтозаполнениеДоступныхПолей", Объект.АвтозаполнениеДоступныхПолей);
	СтруктураОбъекта.Вставить("Запрос"                      , Объект.Запрос);
	СтруктураОбъекта.Вставить("Имя"                         , Объект.Имя);
	СтруктураОбъекта.Вставить("ИсточникДанных"              , Объект.ИсточникДанных);

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Поля Цикл
		МассивЭлементов.Добавить(ПолеНабораДанныхСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Поля", МассивЭлементов);

	Возврат СтруктураОбъекта;
	
КонецФункции // НаборДанныхЗапросСКДВСтруктуру()

Процедура НаборДанныхЗапросСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("АвтозаполнениеДоступныхПолей") Тогда
		Объект.АвтозаполнениеДоступныхПолей = СтруктураОбъекта.АвтозаполнениеДоступныхПолей;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Запрос") Тогда
		Объект.Запрос = СтруктураОбъекта.Запрос;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Имя") Тогда
		Объект.Имя = СтруктураОбъекта.Имя;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ИсточникДанных") Тогда
		Объект.ИсточникДанных = СтруктураОбъекта.ИсточникДанных;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Поля") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Поля Цикл
			НовыйЭлемент = Объект.Поля.Добавить(Тип(ТекЭлемент.Тип));
			ПолеНабораДанныхСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // НаборДанныхЗапросСКДИзСтруктуры()

Функция НаборДанныхОбъектСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Тип", "НаборДанныхОбъектСхемыКомпоновкиДанных");

	СтруктураОбъекта.Вставить("Имя"           , Объект.Имя);
	СтруктураОбъекта.Вставить("ИмяОбъекта"    , Объект.ИмяОбъекта);
	СтруктураОбъекта.Вставить("ИсточникДанных", Объект.ИсточникДанных);

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Поля Цикл
		МассивЭлементов.Добавить(ПолеНабораДанныхСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Поля", МассивЭлементов);

	Возврат СтруктураОбъекта;
	
КонецФункции // НаборДанныхОбъектСКДВСтруктуру()

Процедура НаборДанныхОбъектСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Имя") Тогда
		Объект.Имя = СтруктураОбъекта.Имя;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ИмяОбъекта") Тогда
		Объект.ИмяОбъекта = СтруктураОбъекта.ИмяОбъекта;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ИсточникДанных") Тогда
		Объект.ИсточникДанных = СтруктураОбъекта.ИсточникДанных;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Поля") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Поля Цикл
			НовыйЭлемент = Объект.Поля.Добавить(Тип(ТекЭлемент.Тип));
			ПолеНабораДанныхСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // НаборДанныхОбъектСКДИзСтруктуры()

Функция НаборДанныхОбъединениеСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Тип", "НаборДанныхОбъединениеСхемыКомпоновкиДанных");

	СтруктураОбъекта.Вставить("Имя"           , Объект.Имя);

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Поля Цикл
		МассивЭлементов.Добавить(ПолеНабораДанныхСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Поля", МассивЭлементов);
	
	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Элементы Цикл
		МассивЭлементов.Добавить(НаборДанныхСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Элементы", МассивЭлементов);
	
	Возврат СтруктураОбъекта;
	
КонецФункции // НаборДанныхОбъединениеСКДВСтруктуру()

Процедура НаборДанныхОбъединениеСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Имя") Тогда
		Объект.Имя = СтруктураОбъекта.Имя;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Поля") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Поля Цикл
			НовыйЭлемент = Объект.Поля.Добавить(Тип(ТекЭлемент.Тип));
			ПолеНабораДанныхСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Элементы") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Элементы Цикл
			НовыйЭлемент = Объект.Элементы.Добавить(Тип(ТекЭлемент.Тип));
			НаборДанныхСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // НаборДанныхОбъединениеСКДИзСтруктуры()

Функция НаборДанныхСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если ТипЗнч(Объект) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
		Возврат НаборДанныхЗапросСКДВСтруктуру(Объект);		
	ИначеЕсли ТипЗнч(Объект) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
		Возврат НаборДанныхОбъектСКДВСтруктуру(Объект);		
	ИначеЕсли ТипЗнч(Объект) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
		Возврат НаборДанныхОбъединениеСКДВСтруктуру(Объект);		
	Иначе
		Возврат СтруктураОбъекта;
	КонецЕсли;
	
КонецФункции // НаборДанныхСКДВСтруктуру()

Процедура НаборДанныхСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если ТипЗнч(Объект) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
		НаборДанныхЗапросСКДИзСтруктуры(Объект, СтруктураОбъекта);		
	ИначеЕсли ТипЗнч(Объект) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") Тогда
		НаборДанныхОбъектСКДИзСтруктуры(Объект, СтруктураОбъекта);		
	ИначеЕсли ТипЗнч(Объект) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
		НаборДанныхОбъединениеСКДИзСтруктуры(Объект, СтруктураОбъекта);		
	КонецЕсли;
	
КонецПроцедуры // НаборДанныхСКДИзСтруктуры()

Функция НастройкиСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Выбор"                 , ВыбранныеПоляСКДВСтруктуру(Объект.Выбор));
	СтруктураОбъекта.Вставить("ДополнительныеСвойства", ЗначениеВСтруктуру(Объект.ДополнительныеСвойства));
	СтруктураОбъекта.Вставить("ДоступныеОбъекты",
	                          ДоступныеОбъектыНастройкиСКДВСтруктуру(Объект.ДоступныеОбъекты));
	СтруктураОбъекта.Вставить("ДоступныеПоляВыбора",
	                          ДоступныеПоляСКДВСтруктуру(Объект.ДоступныеПоляВыбора));
	СтруктураОбъекта.Вставить("ДоступныеПоляГруппировок",
	                          ДоступныеПоляСКДВСтруктуру(Объект.ДоступныеПоляГруппировок));
	СтруктураОбъекта.Вставить("ДоступныеПоляДополнительныхОтборов",
	                          ДоступныеПоляСКДВСтруктуру(Объект.ДоступныеПоляДополнительныхОтборов));
	СтруктураОбъекта.Вставить("ДоступныеПоляОтбора",
	                          ДоступныеПоляСКДВСтруктуру(Объект.ДоступныеПоляОтбора));
	СтруктураОбъекта.Вставить("ДоступныеПоляОтбораЭлементовСтруктуры",
	                          ДоступныеПоляСКДВСтруктуру(Объект.ДоступныеПоляОтбораЭлементовСтруктуры));
	СтруктураОбъекта.Вставить("ДоступныеПоляПараметровДанных",
	                          ДоступныеПоляСКДВСтруктуру(Объект.ДоступныеПоляПараметровДанных));
	СтруктураОбъекта.Вставить("ДоступныеПоляПорядка",
	                          ДоступныеПоляСКДВСтруктуру(Объект.ДоступныеПоляПорядка));
	СтруктураОбъекта.Вставить("Отбор",
	                          ОтборСКДВСтруктуру(Объект.Отбор));
	СтруктураОбъекта.Вставить("ПараметрыВывода",
	                          ЗначенияПараметровВыводаСКДВСтруктуру(Объект.ПараметрыВывода));
	СтруктураОбъекта.Вставить("ПараметрыДанных",
	                          ЗначенияПараметровДанныхСКДВСтруктуру(Объект.ПараметрыДанных));
	СтруктураОбъекта.Вставить("ПользовательскиеПоля",
	                          ПользовательскиеПоляСКДВСтруктуру(Объект.ПользовательскиеПоля));
	СтруктураОбъекта.Вставить("Порядок",
	                          ПорядокСКДВСтруктуру(Объект.Порядок));

	СтруктураОбъекта.Вставить("Родитель", Неопределено); //TODO: Разбраться с родителем

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Структура Цикл
		МассивЭлементов.Добавить(ЭлементСтруктурыНастроекСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Структура", МассивЭлементов);
	
	СтруктураОбъекта.Вставить("УсловноеОформление",
	                          УсловноеОформлениеСКДВСтруктуру(Объект.УсловноеОформление));
	
	Возврат СтруктураОбъекта;
	
КонецФункции // НастройкиСКДВСтруктуру()

Процедура НастройкиСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Выбор") Тогда
		ВыбранныеПоляСКДИзСтруктуры(Объект.Выбор, СтруктураОбъекта.Выбор);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ДополнительныеСвойства") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.ДополнительныеСвойства Цикл
			Объект.ДополнительныеСвойства.Вставить(ТекЭлемент.Ключ, ЗначениеИзСтруктуры(ТекЭлемент.Значение));
		КонецЦикла;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ДоступныеОбъекты") Тогда
		ДоступныеОбъектыНастройкиСКДИзСтруктуры(Объект.ДоступныеПоляВыбора, СтруктураОбъекта.ДоступныеПоляВыбора);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ДоступныеПоляВыбора") Тогда
		ДоступныеПоляСКДИзСтруктуры(Объект.ДоступныеПоляВыбора, СтруктураОбъекта.ДоступныеПоляВыбора);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ДоступныеПоляГруппировок") Тогда
		ДоступныеПоляСКДИзСтруктуры(Объект.ДоступныеПоляГруппировок, СтруктураОбъекта.ДоступныеПоляГруппировок);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ДоступныеПоляДополнительныхОтборов") Тогда
		ДоступныеПоляСКДИзСтруктуры(Объект.ДоступныеПоляДополнительныхОтборов,
		                            СтруктураОбъекта.ДоступныеПоляДополнительныхОтборов);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ДоступныеПоляОтбора") Тогда
		ДоступныеПоляСКДИзСтруктуры(Объект.ДоступныеПоляОтбора, СтруктураОбъекта.ДоступныеПоляОтбора);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ДоступныеПоляОтбораЭлементовСтруктуры") Тогда
		ДоступныеПоляСКДИзСтруктуры(Объект.ДоступныеПоляОтбораЭлементовСтруктуры,
		                            СтруктураОбъекта.ДоступныеПоляОтбораЭлементовСтруктуры);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ДоступныеПоляПараметровДанных") Тогда
		ДоступныеПоляСКДИзСтруктуры(Объект.ДоступныеПоляПараметровДанных,
		                            СтруктураОбъекта.ДоступныеПоляПараметровДанных);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ДоступныеПоляПорядка") Тогда
		ДоступныеПоляСКДИзСтруктуры(Объект.ДоступныеПоляПорядка, СтруктураОбъекта.ДоступныеПоляПорядка);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Отбор") Тогда
		ОтборСКДИзСтруктуры(Объект.Отбор, СтруктураОбъекта.Отбор);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПараметрыВывода") Тогда
		ЗначенияПараметровВыводаСКДИзСтруктуры(Объект.ПараметрыВывода, СтруктураОбъекта.ПараметрыВывода);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПараметрыДанных") Тогда
		ЗначенияПараметровДанныхСКДИзСтруктуры(Объект.ПараметрыДанных, СтруктураОбъекта.ПараметрыДанных);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПользовательскиеПоля") Тогда
		ПользовательскиеПоляСКДИзСтруктуры(Объект.ПользовательскиеПоля, СтруктураОбъекта.ПользовательскиеПоля);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Порядок") Тогда
		ПорядокСКДИзСтруктуры(Объект.Порядок, СтруктураОбъекта.Порядок);
	КонецЕсли;

	//TODO: Разобраться с родителем
	
	Если СтруктураОбъекта.Свойство("Структура") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Структура Цикл
			НовыйЭлемент = Объект.Элементы.Добавить(Тип(ТекЭлемент.Тип));
			ЭлементСтруктурыНастроекСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("УсловноеОформление") Тогда
		УсловноеОформлениеСКДИзСтруктуры(Объект.УсловноеОформление, СтруктураОбъекта.УсловноеОформление);
	КонецЕсли;

КонецПроцедуры // НастройкиСКДИзСтруктуры()

Функция ПараметрСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ПараметрСхемыКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("ВключатьВДоступныеПоля"        , Объект.ВключатьВДоступныеПоля);
	СтруктураОбъекта.Вставить("Выражение"                     , Объект.Выражение);
	СтруктураОбъекта.Вставить("ДоступенСписокЗначений"        , Объект.ДоступенСписокЗначений);
	СтруктураОбъекта.Вставить("Заголовок"                     , Объект.Заголовок);
	СтруктураОбъекта.Вставить("ЗапрещатьНезаполненныеЗначения", Объект.ЗапрещатьНезаполненныеЗначения);
	СтруктураОбъекта.Вставить("Значение"                      , ЗначениеВСтруктуру(Объект.Значение));
	СтруктураОбъекта.Вставить("Имя"                           , Объект.Имя);
	
	СтруктураОбъекта.Вставить("Использование",
	                          ИспользованиеПараметраКомпоновкиДанныхВСтроку(Объект.Использование));
	
	СтруктураОбъекта.Вставить("ОграничениеИспользования"      , Объект.ОграничениеИспользования);
	СтруктураОбъекта.Вставить("ПараметрФункциональныхОпций"   , Объект.ПараметрФункциональныхОпций);
	
	СтруктураОбъекта.Вставить("ПараметрыРедактирования",
	                          ПараметрыРедактированияСКДВСтруктуру(Объект.ПараметрыРедактирования));
	                          
	СтруктураОбъекта.Вставить("ТипЗначения"                   , ЗначениеВСтруктуру(Объект.ТипЗначения));

	Возврат СтруктураОбъекта;
	
КонецФункции // ПараметрСКДВСтруктуру()

Процедура ПараметрСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ПараметрСхемыКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ВключатьВДоступныеПоля") Тогда
		Объект.ВключатьВДоступныеПоля = СтруктураОбъекта.ВключатьВДоступныеПоля;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Выражение") Тогда
		Объект.Выражение = СтруктураОбъекта.Выражение;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ДоступенСписокЗначений") Тогда
		Объект.ДоступенСписокЗначений = СтруктураОбъекта.ДоступенСписокЗначений;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Заголовок") Тогда
		Объект.Заголовок = СтруктураОбъекта.Заголовок;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ЗапрещатьНезаполненныеЗначения") Тогда
		Объект.ЗапрещатьНезаполненныеЗначения = СтруктураОбъекта.ЗапрещатьНезаполненныеЗначения;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Значение") Тогда
		Объект.Значение = ЗначениеИзСтруктуры(СтруктураОбъекта.Значение);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Имя") Тогда
		Объект.Имя = СтруктураОбъекта.Имя;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Использование") Тогда
		Объект.Использование = ИспользованиеПараметраКомпоновкиДанных[СтруктураОбъекта.Использование];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ОграничениеИспользования") Тогда
		Объект.ОграничениеИспользования = СтруктураОбъекта.ОграничениеИспользования;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПараметрФункциональныхОпций") Тогда
		Объект.ПараметрФункциональныхОпций = СтруктураОбъекта.ПараметрФункциональныхОпций;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПараметрыРедактирования") Тогда
		ПараметрыРедактированияСКДИзСтруктуры(Объект.ПараметрыРедактирования, СтруктураОбъекта.ПараметрыРедактирования);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ТипЗначения") Тогда
		Объект.ТипЗначения = ЗначениеИзСтруктуры(СтруктураОбъекта.ТипЗначения);
	КонецЕсли;

КонецПроцедуры // ПараметрСКДИзСтруктуры()

Функция ПолеИтогаСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ПолеИтогаСхемыКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Выражение"  , Объект.Выражение);

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Группировки Цикл
		МассивЭлементов.Добавить(СокрЛП(ТекЭлемент)); // TODO: Проверить тип элемента массива группировок
	КонецЦикла;
	СтруктураОбъекта.Вставить("Группировки", МассивЭлементов);
	
	СтруктураОбъекта.Вставить("ПутьКДанным", Объект.ПутьКДанным);

	Возврат СтруктураОбъекта;
	
КонецФункции // ПолеИтогаСКДВСтруктуру()

Процедура ПолеИтогаСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ПолеИтогаСхемыКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Выражение") Тогда
		Объект.Выражение = СтруктураОбъекта.Выражение;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Группировки") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Группировки Цикл
			Объект.Группировки.Добавить(ТекЭлемент);
		КонецЦикла;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПутьКДанным") Тогда
		Объект.ПутьКДанным = СтруктураОбъекта.ПутьКДанным;
	КонецЕсли;

КонецПроцедуры // ПолеИтогаСКДИзСтруктуры()

Функция СвязьНаборовДанныхСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ПолеИтогаСхемыКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("ВыражениеИсточник"       , Объект.ВыражениеИсточник);
	СтруктураОбъекта.Вставить("ВыражениеПриемник"       , Объект.ВыражениеПриемник);
	СтруктураОбъекта.Вставить("НаборДанныхИсточник"     , Объект.НаборДанныхИсточник);
	СтруктураОбъекта.Вставить("НаборДанныхПриемник"     , Объект.НаборДанныхПриемник);
	СтруктураОбъекта.Вставить("НачальноеВыражение"      , Объект.НачальноеВыражение);
	СтруктураОбъекта.Вставить("Обязательная"            , Объект.Обязательная);
	СтруктураОбъекта.Вставить("Параметр"                , Объект.Параметр);
	СтруктураОбъекта.Вставить("РазрешенСписокПараметров", Объект.РазрешенСписокПараметров);
	СтруктураОбъекта.Вставить("УсловиеСвязи"            , Объект.УсловиеСвязи);
	
	Возврат СтруктураОбъекта;
	
КонецФункции // СвязьНаборовДанныхСКДВСтруктуру()

Процедура СвязьНаборовДанныхСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ПолеИтогаСхемыКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ВыражениеИсточник") Тогда
		Объект.ВыражениеИсточник = СтруктураОбъекта.ВыражениеИсточник;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ВыражениеПриемник") Тогда
		Объект.ВыражениеПриемник = СтруктураОбъекта.ВыражениеПриемник;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("НаборДанныхИсточник") Тогда
		Объект.НаборДанныхИсточник = СтруктураОбъекта.НаборДанныхИсточник;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("НаборДанныхПриемник") Тогда
		Объект.НаборДанныхПриемник = СтруктураОбъекта.НаборДанныхПриемник;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("НачальноеВыражение") Тогда
		Объект.НачальноеВыражение = СтруктураОбъекта.НачальноеВыражение;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Обязательная") Тогда
		Объект.Обязательная = СтруктураОбъекта.Обязательная;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Параметр") Тогда
		Объект.Параметр = СтруктураОбъекта.Параметр;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("РазрешенСписокПараметров") Тогда
		Объект.РазрешенСписокПараметров = СтруктураОбъекта.РазрешенСписокПараметров;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("УсловиеСвязи") Тогда
		Объект.УсловиеСвязи = СтруктураОбъекта.УсловиеСвязи;
	КонецЕсли;

КонецПроцедуры // СвязьНаборовДанныхСКДИзСтруктуры()

Функция ВыражениеУпорядочиванияСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ВыражениеУпорядочиванияКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Автоупорядочивание", Объект.Автоупорядочивание);
	СтруктураОбъекта.Вставить("Выражение"         , Объект.Выражение);
	СтруктураОбъекта.Вставить("ТипУпорядочивания",
	                          НаправлениеСортировкиКомпоновкиДанныхВСтроку(Объект.ТипУпорядочивания));

	Возврат СтруктураОбъекта;
	
КонецФункции // ВыражениеУпорядочиванияСКДВСтруктуру()

Процедура ВыражениеУпорядочиванияСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ВыражениеУпорядочиванияКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Автоупорядочивание") Тогда
		Объект.Автоупорядочивание = СтруктураОбъекта.Автоупорядочивание;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Выражение") Тогда
		Объект.Выражение = СтруктураОбъекта.Выражение;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ТипУпорядочивания") Тогда
		Объект.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных[СтруктураОбъекта.ТипУпорядочивания];
	КонецЕсли;

КонецПроцедуры // ВыражениеУпорядочиванияСКДИзСтруктуры()

Функция ОграничениеИспользованияПоляСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ОграничениеИспользованияПоляСхемыКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Группировка", Объект.Группировка);
	СтруктураОбъекта.Вставить("Поле"       , Объект.Поле);
	СтруктураОбъекта.Вставить("Порядок"    , Объект.Порядок);
	СтруктураОбъекта.Вставить("Условие"    , Объект.Условие);

	Возврат СтруктураОбъекта;
	
КонецФункции // ОграничениеИспользованияПоляСКДВСтруктуру()

Процедура ОграничениеИспользованияПоляСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ОграничениеИспользованияПоляСхемыКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Группировка") Тогда
		Объект.Группировка = СтруктураОбъекта.Группировка;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Поле") Тогда
		Объект.Поле = СтруктураОбъекта.Поле;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Порядок") Тогда
		Объект.Порядок = СтруктураОбъекта.Порядок;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Условие") Тогда
		Объект.Условие = СтруктураОбъекта.Условие;
	КонецЕсли;

КонецПроцедуры // ОграничениеИспользованияПоляСКДИзСтруктуры()

Функция ОформлениеСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ОформлениеКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("ДоступныеПараметры"     , ДоступныеПараметрыСКДВСтруктуру(Объект.ДоступныеПараметры));
	СтруктураОбъекта.Вставить("ДоступныеПоляПараметров", ДоступныеПоляСКДВСтруктуру(Объект.ДоступныеПоляПараметров));

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Элементы Цикл
		МассивЭлементов.Добавить(ЗначениеПараметраСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Элементы", МассивЭлементов);
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ОформлениеСКДВСтруктуру()

Процедура ОформлениеСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ОформлениеКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ДоступныеПараметры") Тогда
		ДоступныеПараметрыСКДИзСтруктуры(Объект.ДоступныеПараметры, СтруктураОбъекта.ДоступныеПараметры);
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ДоступныеПоляПараметров") Тогда
		ДоступныеПоляСКДИзСтруктуры(Объект.ДоступныеПоляПараметров, СтруктураОбъекта.ДоступныеПоляПараметров);
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Элементы") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Элементы Цикл
			НовыйЭлемент = Объект.Элементы.Добавить();
			ЗначениеПараметраСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ОформлениеСКДИзСтруктуры()

Функция ЗначениеПараметраНастроекСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Значение", ЗначениеВСтруктуру(Объект.Значение));

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.ЗначенияВложенныхПараметров Цикл
		МассивЭлементов.Добавить(ЗначениеПараметраСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("ЗначенияВложенныхПараметров", МассивЭлементов);

	СтруктураОбъекта.Вставить("Использование", Объект.Использование);
	СтруктураОбъекта.Вставить("Параметр", СокрЛП(Объект.Параметр));

	СтруктураОбъекта.Вставить("ИдентификаторПользовательскойНастройки",
	                          Объект.ИдентификаторПользовательскойНастройки);
	СтруктураОбъекта.Вставить("ПредставлениеПользовательскойНастройки",
	                          Объект.ПредставлениеПользовательскойНастройки);
	СтруктураОбъекта.Вставить("РежимОтображения",
	                          РежимОтображенияЭлементаНастройкиКомпоновкиДанныхВСтроку(Объект.РежимОтображения));
	
	//TODO: Проверить как работает родитель
	Возврат СтруктураОбъекта;
	
КонецФункции // ЗначениеПараметраНастроекСКДВСтруктуру()

Процедура ЗначениеПараметраНастроекСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Значение") Тогда
		Объект.Значение = ЗначениеИзСтруктуры(СтруктураОбъекта.Значение);
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ЗначенияВложенныхПараметров") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.ЗначенияВложенныхПараметров Цикл
			НовыйЭлемент = Объект.ЗначенияВложенныхПараметров.Добавить();
			ЗначениеПараметраСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Использование") Тогда
		Объект.Использование = СтруктураОбъекта.Использование;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Параметр") Тогда
		Объект.Параметр = Новый ПараметрКомпоновкиДанных(СтруктураОбъекта.Параметр);
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ИдентификаторПользовательскойНастройки") Тогда
		Объект.ИдентификаторПользовательскойНастройки = СтруктураОбъекта.ИдентификаторПользовательскойНастройки;
	КонецЕсли;
	Если СтруктураОбъекта.Свойство("ПредставлениеПользовательскойНастройки") Тогда
		Объект.ПредставлениеПользовательскойНастройки = СтруктураОбъекта.ПредставлениеПользовательскойНастройки;
	КонецЕсли;
	Если СтруктураОбъекта.Свойство("РежимОтображения") Тогда
		Объект.РежимОтображения =
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных[СтруктураОбъекта.РежимОтображения];
	КонецЕсли;
	
КонецПроцедуры // ЗначениеПараметраНастроекСКДИзСтруктуры()

Функция ЗначениеПараметраСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если ТипЗнч(Объект) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		Возврат ЗначениеПараметраНастроекСКДВСтруктуру(Объект);
	КонецЕсли;

	Если НЕ ТипЗнч(Объект) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Значение", ЗначениеВСтруктуру(Объект.Значение));

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.ЗначенияВложенныхПараметров Цикл
		МассивЭлементов.Добавить(ЗначениеПараметраСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("ЗначенияВложенныхПараметров", МассивЭлементов);

	СтруктураОбъекта.Вставить("Использование", Объект.Использование);
	СтруктураОбъекта.Вставить("Параметр", СокрЛП(Объект.Параметр));

	//TODO: Проверить как работает родитель
	Возврат СтруктураОбъекта;
	
КонецФункции // ЗначениеПараметраСКДВСтруктуру()

Процедура ЗначениеПараметраСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ЗначениеПараметраНастроекСКДИзСтруктуры(Объект, СтруктураОбъекта);
		Возврат;
	КонецЕсли;

	Если НЕ ТипЗнч(Объект) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Значение") Тогда
		Объект.Значение = ЗначениеИзСтруктуры(СтруктураОбъекта.Значение);
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ЗначенияВложенныхПараметров") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.ЗначенияВложенныхПараметров Цикл
			НовыйЭлемент = Объект.ЗначенияВложенныхПараметров.Добавить();
			ЗначениеПараметраСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Использование") Тогда
		Объект.Использование = СтруктураОбъекта.Использование;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Параметр") Тогда
		Объект.Параметр = Новый ПараметрКомпоновкиДанных(СтруктураОбъекта.Параметр);
	КонецЕсли;
	
КонецПроцедуры // ЗначениеПараметраСКДИзСтруктуры()

Функция ПараметрыРедактированияСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ПараметрыРедактированияКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("ДоступныеПараметры"     , ДоступныеПараметрыСКДВСтруктуру(Объект.ДоступныеПараметры));
	СтруктураОбъекта.Вставить("ДоступныеПоляПараметров", ДоступныеПоляСКДВСтруктуру(Объект.ДоступныеПоляПараметров));

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Элементы Цикл
		МассивЭлементов.Добавить(ЗначениеПараметраСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Элементы", МассивЭлементов);

	Возврат СтруктураОбъекта;
	
КонецФункции // ПараметрыРедактированияСКДВСтруктуру()

Процедура ПараметрыРедактированияСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ПараметрыРедактированияКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ДоступныеПараметры") Тогда
		ДоступныеПараметрыСКДИзСтруктуры(Объект.ДоступныеПараметры, СтруктураОбъекта.ДоступныеПараметры);
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ДоступныеПоляПараметров") Тогда
		ДоступныеПоляСКДИзСтруктуры(Объект.ДоступныеПоляПараметров, СтруктураОбъекта.ДоступныеПоляПараметров);
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Элементы") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Элементы Цикл
			НовыйЭлемент = Объект.Элементы.Добавить();
			ЗначениеПараметраСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПараметрыРедактированияСКДИзСтруктуры()

Функция СтрокаТаблицыОбластиСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("СтрокаТаблицыОбластиКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("ИдентификаторТаблицы", Объект.ИдентификаторТаблицы);

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Ячейки Цикл
		МассивЭлементов.Добавить(ЯчейкаТаблицыОбластиСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Ячейки", МассивЭлементов);

	Возврат СтруктураОбъекта;
	
КонецФункции // СтрокаТаблицыОбластиСКДВСтруктуру()

Процедура СтрокаТаблицыОбластиСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("СтрокаТаблицыОбластиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ИдентификаторТаблицы") Тогда
		Объект.ИдентификаторТаблицы = СтруктураОбъекта.ИдентификаторТаблицы;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Ячейки") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Ячейки Цикл
			НовыйЭлемент = Объект.Ячейки.Добавить();
			ЯчейкаТаблицыОбластиСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // СтрокаТаблицыОбластиСКДИзСтруктуры()

Функция ЯчейкаТаблицыОбластиСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ЯчейкаТаблицыОбластиКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Оформление", ОформлениеЯчейкиТаблицыОбластиСКДВСтруктуру(Объект.Оформление));

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Элементы Цикл
		МассивЭлементов.Добавить(ПолеОбластиСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Элементы", МассивЭлементов);

	Возврат СтруктураОбъекта;
	
КонецФункции // ЯчейкаТаблицыОбластиСКДВСтруктуру()

Процедура ЯчейкаТаблицыОбластиСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ЯчейкаТаблицыОбластиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Оформление") Тогда
		ОформлениеЯчейкиТаблицыОбластиСКДИзСтруктуры(Объект.Оформление, СтруктураОбъекта.Оформление);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Элементы") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Элементы Цикл
			НовыйЭлемент = Объект.Элементы.Добавить();
			ПолеОбластиСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ЯчейкаТаблицыОбластиСКДИзСтруктуры()

Функция ОформлениеЯчейкиТаблицыОбластиСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ОформлениеЯчейкиТаблицыОбластиКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("ДоступныеПараметры", ДоступныеПараметрыСКДВСтруктуру(Объект.ДоступныеПараметры));

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Элементы Цикл
		МассивЭлементов.Добавить(ЗначениеПараметраСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Элементы", МассивЭлементов);

	Возврат СтруктураОбъекта;
	
КонецФункции // ОформлениеЯчейкиТаблицыОбластиСКДВСтруктуру()

Процедура ОформлениеЯчейкиТаблицыОбластиСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ОформлениеЯчейкиТаблицыОбластиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ДоступныеПараметры") Тогда
		ЗначениеПараметраСКДИзСтруктуры(Объект.ДоступныеПараметры, СтруктураОбъекта.ДоступныеПараметры);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Элементы") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Элементы Цикл
			НовыйЭлемент = Объект.Элементы.Добавить();
			ПолеОбластиСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ОформлениеЯчейкиТаблицыОбластиСКДИзСтруктуры()

Функция ОформлениеПоляОбластиСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ОформлениеПоляОбластиКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("ДоступныеПараметры", ДоступныеПараметрыСКДВСтруктуру(Объект.ДоступныеПараметры));

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Элементы Цикл
		МассивЭлементов.Добавить(ЗначениеПараметраСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Элементы", МассивЭлементов);

	Возврат СтруктураОбъекта;
	
КонецФункции // ОформлениеПоляОбластиСКДВСтруктуру()

Процедура ОформлениеПоляОбластиСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ОформлениеПоляОбластиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ДоступныеПараметры") Тогда
		ЗначениеПараметраСКДИзСтруктуры(Объект.ДоступныеПараметры, СтруктураОбъекта.ДоступныеПараметры);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Элементы") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Элементы Цикл
			НовыйЭлемент = Объект.Элементы.Добавить();
			ПолеОбластиСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ОформлениеПоляОбластиСКДИзСтруктуры()

Функция ПараметрОбластиВыражениеСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ПараметрОбластиВыражениеКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Имя"      , Объект.Имя);
	СтруктураОбъекта.Вставить("Выражение", Объект.Выражение);

	Возврат СтруктураОбъекта;
	
КонецФункции // ПараметрОбластиВыражениеСКДВСтруктуру()

Процедура ПараметрОбластиВыражениеСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ПараметрОбластиВыражениеКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Имя") Тогда
		Объект.Имя = СтруктураОбъекта.Имя;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Выражение") Тогда
		Объект.Выражение = СтруктураОбъекта.Выражение;
	КонецЕсли;
	
КонецПроцедуры // ПараметрОбластиВыражениеСКДИзСтруктуры()

Функция ПараметрОбластиРасшифровкаСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Имя", Объект.Имя);

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.ВыраженияПолей Цикл
		МассивЭлементов.Добавить(ВыражениеПоляПараметраРасшифровкиСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("ВыраженияПолей", МассивЭлементов);

	СтруктураОбъекта.Вставить("ОсновноеДействие",
	                          ДействиеОбработкиРасшифровкиКомпоновкиДанныхВСтроку(Объект.ОсновноеДействие));

	Возврат СтруктураОбъекта;
	
КонецФункции // ПараметрОбластиРасшифровкаСКДВСтруктуру()

Процедура ПараметрОбластиРасшифровкаСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Имя") Тогда
		Объект.Имя = СтруктураОбъекта.Имя;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ВыраженияПолей") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.ВыраженияПолей Цикл
			НовыйЭлемент = Объект.ВыраженияПолей.Добавить();
			ВыражениеПоляПараметраРасшифровкиСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ОсновноеДействие") Тогда
		Объект.ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных[СтруктураОбъекта.ОсновноеДействие];
	КонецЕсли;
	
КонецПроцедуры // ПараметрОбластиРасшифровкаСКДИзСтруктуры()

Функция ПараметрОбластиСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если ТипЗнч(Объект) = Тип("ПараметрОбластиВыражениеКомпоновкиДанных") Тогда
		Возврат ПараметрОбластиВыражениеСКДВСтруктуру(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных") Тогда
		Возврат ПараметрОбластиРасшифровкаСКДВСтруктуру(Объект);
	Иначе
		Возврат СтруктураОбъекта;
	КонецЕсли;

КонецФункции // ПараметрОбластиСКДВСтруктуру()

Процедура ПараметрОбластиСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ПараметрОбластиВыражениеКомпоновкиДанных") Тогда
		ПараметрОбластиВыражениеСКДИзСтруктуры(Объект, СтруктураОбъекта);
	ИначеЕсли ТипЗнч(Объект) = Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных") Тогда
		ПараметрОбластиРасшифровкаСКДИзСтруктуры(Объект, СтруктураОбъекта);
	КонецЕсли;
	
КонецПроцедуры // ПараметрОбластиСКДИзСтруктуры()

Функция ВыражениеПоляПараметраРасшифровкиСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ВыражениеПоляПараметраОбластиРасшифровкаКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Выражение", Объект.Выражение);
	СтруктураОбъекта.Вставить("Поле"     , Объект.Поле);

	Возврат СтруктураОбъекта;
	
КонецФункции // ВыражениеПоляПараметраРасшифровкиСКДВСтруктуру()

Процедура ВыражениеПоляПараметраРасшифровкиСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ВыражениеПоляПараметраОбластиРасшифровкаКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Выражение") Тогда
		Объект.Выражение = СтруктураОбъекта.Выражение;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Поле") Тогда
		Объект.Поле = СтруктураОбъекта.Поле;
	КонецЕсли;
	
КонецПроцедуры // ВыражениеПоляПараметраРасшифровкиСКДИзСтруктуры()

Функция ПолеОбластиСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ПолеОбластиКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Значение"  , ЗначениеВСтруктуру(Объект.Значение));
	СтруктураОбъекта.Вставить("Оформление", ОформлениеПоляОбластиСКДВСтруктуру(Объект.Оформление));

	Возврат СтруктураОбъекта;
	
КонецФункции // ПолеОбластиСКДВСтруктуру()

Процедура ПолеОбластиСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ПолеОбластиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Значение") Тогда
		Объект.Значение = ЗначениеИзСтруктуры(СтруктураОбъекта.Значение);
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Оформление") Тогда
		ОформлениеПоляОбластиСКДИзСтруктуры(Объект.Оформление, СтруктураОбъекта.Оформление);
	КонецЕсли;
	
КонецПроцедуры // ПолеОбластиСКДИзСтруктуры()

Функция ТипМакетаОбластиКомпоновкиДанныхВСтроку(Значение)

	Если Значение = ТипМакетаОбластиКомпоновкиДанных.Заголовок Тогда
		Возврат "Заголовок";
	ИначеЕсли Значение = ТипМакетаОбластиКомпоновкиДанных.ЗаголовокИерархии Тогда
		Возврат "ЗаголовокИерархии";
	ИначеЕсли Значение = ТипМакетаОбластиКомпоновкиДанных.ОбщийИтогЗаголовок Тогда
		Возврат "ОбщийИтогЗаголовок";
	ИначеЕсли Значение = ТипМакетаОбластиКомпоновкиДанных.ОбщийИтогПодвал Тогда
		Возврат "ОбщийИтогПодвал";
	ИначеЕсли Значение = ТипМакетаОбластиКомпоновкиДанных.Подвал Тогда
		Возврат "Подвал";
	ИначеЕсли Значение = ТипМакетаОбластиКомпоновкиДанных.ПодвалИерархии Тогда
		Возврат "ПодвалИерархии";
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ТипМакетаОбластиКомпоновкиДанныхВСтроку()

Функция ИспользованиеПараметраКомпоновкиДанныхВСтроку(Значение)

	Если Значение = ИспользованиеПараметраКомпоновкиДанных.Авто Тогда
		Возврат "Авто";
	ИначеЕсли Значение = ИспользованиеПараметраКомпоновкиДанных.Всегда Тогда
		Возврат "Всегда";
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ИспользованиеПараметраКомпоновкиДанныхВСтроку()

Функция НаправлениеСортировкиКомпоновкиДанныхВСтроку(Значение)

	Если Значение = НаправлениеСортировкиКомпоновкиДанных.Возр Тогда
		Возврат "Возр";
	ИначеЕсли Значение = НаправлениеСортировкиКомпоновкиДанных.Убыв Тогда
		Возврат "Убыв";
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // НаправлениеСортировкиКомпоновкиДанныхВСтроку()

Функция РежимОтображенияЭлементаНастройкиКомпоновкиДанныхВСтроку(Значение)

	Если Значение = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто Тогда
		Возврат "Авто";
	ИначеЕсли Значение = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ Тогда
		Возврат "БыстрыйДоступ";
	ИначеЕсли Значение = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		Возврат "Недоступный";
	ИначеЕсли Значение = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный Тогда
		Возврат "Обычный";
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // РежимОтображенияЭлементаНастройкиКомпоновкиДанныхВСтроку()

Функция ТипПримененияОтбораКомпоновкиДанныхВСтроку(Значение)

	Если Значение = ТипПримененияОтбораКомпоновкиДанных.Иерархия Тогда
		Возврат "Иерархия";
	ИначеЕсли Значение = ТипПримененияОтбораКомпоновкиДанных.ТолькоИерархия Тогда
		Возврат "ТолькоИерархия";
	ИначеЕсли Значение = ТипПримененияОтбораКомпоновкиДанных.Элементы Тогда
		Возврат "Элементы";
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ТипПримененияОтбораКомпоновкиДанныхВСтроку()

Функция ТипГруппыЭлементовОтбораКомпоновкиДанныхВСтроку(Значение)

	Если Значение = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
		Возврат "ГруппаИ";
	ИначеЕсли Значение = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
		Возврат "ГруппаИли";
	ИначеЕсли Значение = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
		Возврат "ГруппаНе";
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ТипГруппыЭлементовОтбораКомпоновкиДанныхВСтроку()


Функция ДействиеОбработкиРасшифровкиКомпоновкиДанныхВСтроку(Значение)

	Если Значение = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда
		Возврат "Нет";
	ИначеЕсли Значение = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		Возврат "ОткрытьЗначение";
	ИначеЕсли Значение = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Отфильтровать Тогда
		Возврат "Отфильтровать";
	ИначеЕсли Значение = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Оформить Тогда
		Возврат "Оформить";
	ИначеЕсли Значение = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать Тогда
		Возврат "Расшифровать";
	ИначеЕсли Значение = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Сгруппировать Тогда
		Возврат "Сгруппировать";
	ИначеЕсли Значение = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Упорядочить Тогда
		Возврат "Упорядочить";
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ДействиеОбработкиРасшифровкиКомпоновкиДанныхВСтроку()

Функция РасположениеПоляКомпоновкиДанныхВСтроку(Значение)

	Если Значение = РасположениеПоляКомпоновкиДанных.Авто Тогда
		Возврат "Авто";
	ИначеЕсли Значение = РасположениеПоляКомпоновкиДанных.Вертикально Тогда
		Возврат "Вертикально";
	ИначеЕсли Значение = РасположениеПоляКомпоновкиДанных.Вместе Тогда
		Возврат "Вместе";
	ИначеЕсли Значение = РасположениеПоляКомпоновкиДанных.Горизонтально Тогда
		Возврат "Горизонтально";
	ИначеЕсли Значение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка Тогда
		Возврат "ОтдельнаяКолонка";
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // РасположениеПоляКомпоновкиДанныхВСтроку()

Функция ТипБухгалтерскогоОстаткаКомпоновкиДанныхВСтроку(Значение)

	Если Значение = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Дебет Тогда
		Возврат "Дебет";
	ИначеЕсли Значение = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Кредит Тогда
		Возврат "Кредит";
	ИначеЕсли Значение = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Нет Тогда
		Возврат "Нет";
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ТипБухгалтерскогоОстаткаКомпоновкиДанныхВСтроку()

Функция ТипОстаткаКомпоновкиДанныхВСтроку(Значение)

	Если Значение = ТипОстаткаКомпоновкиДанных.КонечныйОстаток Тогда
		Возврат "КонечныйОстаток";
	ИначеЕсли Значение = ТипОстаткаКомпоновкиДанных.НачальныйОстаток Тогда
		Возврат "НачальныйОстаток";
	ИначеЕсли Значение = ТипОстаткаКомпоновкиДанных.Нет Тогда
		Возврат "Нет";
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ТипОстаткаКомпоновкиДанныхВСтроку()

Функция ТипПериодаКомпоновкиДанныхВСтроку(Значение)

	Если Значение = ТипПериодаКомпоновкиДанных.Дополнительный Тогда
		Возврат "Дополнительный";
	ИначеЕсли Значение = ТипПериодаКомпоновкиДанных.Основной Тогда
		Возврат "Основной";
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ТипПериодаКомпоновкиДанныхВСтроку()

Функция СостояниеЭлементаНастройкиКомпоновкиДанныхВСтроку(Значение)

	Если Значение = СостояниеЭлементаНастройкиКомпоновкиДанных.Включен Тогда
		Возврат "Включен";
	ИначеЕсли Значение = СостояниеЭлементаНастройкиКомпоновкиДанных.Отключен Тогда
		Возврат "Отключен";
	ИначеЕсли Значение = СостояниеЭлементаНастройкиКомпоновкиДанных.УдаленПользователем Тогда
		Возврат "УдаленПользователем";
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // СостояниеЭлементаНастройкиКомпоновкиДанныхВСтроку()

Функция ТипГруппировкиКомпоновкиДанныхВСтроку(Значение)

	Если Значение = ТипГруппировкиКомпоновкиДанных.Иерархия Тогда
		Возврат "Иерархия";
	ИначеЕсли Значение = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия Тогда
		Возврат "ТолькоИерархия";
	ИначеЕсли Значение = ТипГруппировкиКомпоновкиДанных.Элементы Тогда
		Возврат "Элементы";
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // СостояниеЭлементаНастройкиКомпоновкиДанныхВСтроку()

Функция ТипДополненияПериодаКомпоновкиДанныхВСтроку(Значение)

	Если Значение = ТипДополненияПериодаКомпоновкиДанных.БезДополнения Тогда
		Возврат "БезДополнения";
	ИначеЕсли Значение = ТипДополненияПериодаКомпоновкиДанных.Год Тогда
		Возврат "Год";
	ИначеЕсли Значение = ТипДополненияПериодаКомпоновкиДанных.ГодОтНачалаПериода Тогда
		Возврат "ГодОтНачалаПериода";
	ИначеЕсли Значение = ТипДополненияПериодаКомпоновкиДанных.ГодОтНачалаПериода445 Тогда
		Возврат "ГодОтНачалаПериода445";
	ИначеЕсли Значение = ТипДополненияПериодаКомпоновкиДанных.Декада Тогда
		Возврат "Декада";
	ИначеЕсли Значение = ТипДополненияПериодаКомпоновкиДанных.День Тогда
		Возврат "День";
	ИначеЕсли Значение = ТипДополненияПериодаКомпоновкиДанных.ДеньОтНачалаПериода Тогда
		Возврат "ДеньОтНачалаПериода";
	ИначеЕсли Значение = ТипДополненияПериодаКомпоновкиДанных.Квартал Тогда
		Возврат "Квартал";
	ИначеЕсли Значение = ТипДополненияПериодаКомпоновкиДанных.КварталОтНачалаПериода Тогда
		Возврат "КварталОтНачалаПериода";
	ИначеЕсли Значение = ТипДополненияПериодаКомпоновкиДанных.КварталОтНачалаПериода445 Тогда
		Возврат "КварталОтНачалаПериода445";
	ИначеЕсли Значение = ТипДополненияПериодаКомпоновкиДанных.Месяц Тогда
		Возврат "Месяц";
	ИначеЕсли Значение = ТипДополненияПериодаКомпоновкиДанных.МесяцОтНачалаПериода Тогда
		Возврат "МесяцОтНачалаПериода";
	ИначеЕсли Значение = ТипДополненияПериодаКомпоновкиДанных.МесяцОтНачалаПериода445 Тогда
		Возврат "МесяцОтНачалаПериода445";
	ИначеЕсли Значение = ТипДополненияПериодаКомпоновкиДанных.Минута Тогда
		Возврат "Минута";
	ИначеЕсли Значение = ТипДополненияПериодаКомпоновкиДанных.МинутаОтНачалаПериода Тогда
		Возврат "МинутаОтНачалаПериода";
	ИначеЕсли Значение = ТипДополненияПериодаКомпоновкиДанных.Неделя Тогда
		Возврат "Неделя";
	ИначеЕсли Значение = ТипДополненияПериодаКомпоновкиДанных.НеделяОтНачалаПериода Тогда
		Возврат "НеделяОтНачалаПериода";
	ИначеЕсли Значение = ТипДополненияПериодаКомпоновкиДанных.Полугодие Тогда
		Возврат "Полугодие";
	ИначеЕсли Значение = ТипДополненияПериодаКомпоновкиДанных.ПолугодиеОтНачалаПериода Тогда
		Возврат "ПолугодиеОтНачалаПериода";
	ИначеЕсли Значение = ТипДополненияПериодаКомпоновкиДанных.ПолугодиеОтНачалаПериода445 Тогда
		Возврат "ПолугодиеОтНачалаПериода445";
	ИначеЕсли Значение = ТипДополненияПериодаКомпоновкиДанных.Секунда Тогда
		Возврат "Секунда";
	ИначеЕсли Значение = ТипДополненияПериодаКомпоновкиДанных.Час Тогда
		Возврат "Час";
	ИначеЕсли Значение = ТипДополненияПериодаКомпоновкиДанных.ЧасОтНачалаПериода Тогда
		Возврат "ЧасОтНачалаПериода";
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // СостояниеЭлементаНастройкиКомпоновкиДанныхВСтроку()

Функция ИспользованиеУсловногоОформленияКомпоновкиДанныхВСтроку(Значение)

	Если Значение = ИспользованиеУсловногоОформленияКомпоновкиДанных.Использовать Тогда
		Возврат "Использовать";
	ИначеЕсли Значение = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать Тогда
		Возврат "НеИспользовать";
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // СостояниеЭлементаНастройкиКомпоновкиДанныхВСтроку()

Функция ПолеНабораДанныхПолеСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("ВыражениеПредставления", Объект.ВыражениеПредставления);

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.ВыраженияУпорядочивания Цикл
		МассивЭлементов.Добавить(ВыражениеУпорядочиванияСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("ВыраженияУпорядочивания", МассивЭлементов);
	
	СтруктураОбъекта.Вставить("Заголовок"                  , Объект.Заголовок);
	СтруктураОбъекта.Вставить("НаборДанныхПроверкиИерархии", Объект.НаборДанныхПроверкиИерархии);
	
	СтруктураОбъекта.Вставить("ОграничениеИспользования",
	                          ОграничениеИспользованияПоляСКДВСтруктуру(Объект.ОграничениеИспользования));
	СтруктураОбъекта.Вставить("ОграничениеИспользованияРеквизитов",
	                          ОграничениеИспользованияПоляСКДВСтруктуру(Объект.ОграничениеИспользованияРеквизитов));
	                          
	СтруктураОбъекта.Вставить("Оформление", ОформлениеСКДВСтруктуру(Объект.Оформление));
	СтруктураОбъекта.Вставить("ПараметрНабораДанныхПроверкиИерархии", Объект.ПараметрНабораДанныхПроверкиИерархии);
	
	СтруктураОбъекта.Вставить("ПараметрыРедактирования",
	                          ПараметрыРедактированияСКДВСтруктуру(Объект.ПараметрыРедактирования));
	                          
	СтруктураОбъекта.Вставить("Поле"       , Объект.Поле);
	СтруктураОбъекта.Вставить("ПутьКДанным", Объект.ПутьКДанным);
	СтруктураОбъекта.Вставить("Роль"       , РольПоляНабораДанныхСКДВСтруктуру(Объект.Роль));
	СтруктураОбъекта.Вставить("ТипЗначения", ЗначениеВСтруктуру(Объект.ТипЗначения));
	 
	Возврат СтруктураОбъекта;
	
КонецФункции // ПолеНабораДанныхПолеСКДВСтруктуру()

Процедура ПолеНабораДанныхПолеСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ВыражениеПредставления") Тогда
		Объект.ВыражениеПредставления = СтруктураОбъекта.ВыражениеПредставления;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ВыраженияУпорядочивания") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.ВыраженияУпорядочивания Цикл
			НовыйЭлемент = Объект.ВыраженияУпорядочивания.Добавить();
			ВыражениеУпорядочиванияСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Заголовок") Тогда
		Объект.Заголовок = СтруктураОбъекта.Заголовок;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("НаборДанныхПроверкиИерархии") Тогда
		Объект.НаборДанныхПроверкиИерархии = СтруктураОбъекта.НаборДанныхПроверкиИерархии;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ОграничениеИспользования") Тогда
		ОграничениеИспользованияПоляСКДИзСтруктуры(Объект.ОграничениеИспользования,
		                                           СтруктураОбъекта.ОграничениеИспользования);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ОграничениеИспользованияРеквизитов") Тогда
		ОграничениеИспользованияПоляСКДИзСтруктуры(Объект.ОграничениеИспользованияРеквизитов,
		                                           СтруктураОбъекта.ОграничениеИспользованияРеквизитов);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Оформление") Тогда
		ОформлениеСКДИзСтруктуры(Объект.Оформление, СтруктураОбъекта.Оформление);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПараметрНабораДанныхПроверкиИерархии") Тогда
		Объект.ПараметрНабораДанныхПроверкиИерархии = СтруктураОбъекта.ПараметрНабораДанныхПроверкиИерархии;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПараметрыРедактирования") Тогда
		ПараметрыРедактированияСКДИзСтруктуры(Объект.ПараметрыРедактирования, СтруктураОбъекта.ПараметрыРедактирования);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Поле") Тогда
		Объект.Поле = СтруктураОбъекта.Поле;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПутьКДанным") Тогда
		Объект.ПутьКДанным = СтруктураОбъекта.ПутьКДанным;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Роль") Тогда
		РольПоляНабораДанныхСКДИзСтруктуры(Объект.Роль, СтруктураОбъекта.Роль);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ТипЗначения") Тогда
		Объект.ТипЗначения = ЗначениеИзСтруктуры(СтруктураОбъекта.ТипЗначения);
	КонецЕсли;

КонецПроцедуры // ПолеНабораДанныхПолеСКДИзСтруктуры()

Функция ПолеНабораДанныхПапкаСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Заголовок", Объект.Заголовок);
	
	СтруктураОбъекта.Вставить("ОграничениеИспользования",
	                          ОграничениеИспользованияПоляСКДВСтруктуру(Объект.ОграничениеИспользования));

	СтруктураОбъекта.Вставить("ПутьКДанным", Объект.ПутьКДанным);
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ПолеНабораДанныхПапкаСКДВСтруктуру()

Процедура ПолеНабораДанныхПапкаСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Заголовок") Тогда
		Объект.Заголовок = СтруктураОбъекта.Заголовок;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ОграничениеИспользования") Тогда
		ОграничениеИспользованияПоляСКДИзСтруктуры(Объект.ОграничениеИспользования,
		                                           СтруктураОбъекта.ОграничениеИспользования);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПутьКДанным") Тогда
		Объект.ПутьКДанным = СтруктураОбъекта.ПутьКДанным;
	КонецЕсли;

КонецПроцедуры // ПолеНабораДанныхПапкаСКДИзСтруктуры()

Функция ПолеНабораДанныхВложенныйНаборСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ВложенныйНаборДанныхСхемыКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Заголовок"  , Объект.Заголовок);
	СтруктураОбъекта.Вставить("Поле"       , Объект.Поле);
	СтруктураОбъекта.Вставить("ПутьКДанным", Объект.ПутьКДанным);
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ПолеНабораДанныхВложенныйНаборСКДВСтруктуру()

Процедура ПолеНабораДанныхВложенныйНаборСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ВложенныйНаборДанныхСхемыКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Заголовок") Тогда
		Объект.Заголовок = СтруктураОбъекта.Заголовок;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Поле") Тогда
		Объект.Поле = СтруктураОбъекта.Поле;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПутьКДанным") Тогда
		Объект.ПутьКДанным = СтруктураОбъекта.ПутьКДанным;
	КонецЕсли;

КонецПроцедуры // ПолеНабораДанныхВложенныйНаборСКДИзСтруктуры()

Функция ПолеНабораДанныхСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если ТипЗнч(Объект) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
		Возврат ПолеНабораДанныхПолеСКДВСтруктуру(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных") Тогда
		Возврат ПолеНабораДанныхПапкаСКДВСтруктуру(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("ВложенныйНаборДанныхСхемыКомпоновкиДанных") Тогда
		Возврат ПолеНабораДанныхВложенныйНаборСКДВСтруктуру(Объект);
	Иначе
		Возврат СтруктураОбъекта;
	КонецЕсли;
	
КонецФункции // ПолеНабораДанныхСКДВСтруктуру()

Процедура ПолеНабораДанныхСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
		ПолеНабораДанныхПолеСКДИзСтруктуры(Объект, СтруктураОбъекта);
	ИначеЕсли ТипЗнч(Объект) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных") Тогда
		ПолеНабораДанныхПапкаСКДИзСтруктуры(Объект, СтруктураОбъекта);
	ИначеЕсли ТипЗнч(Объект) = Тип("ВложенныйНаборДанныхСхемыКомпоновкиДанных") Тогда
		ПолеНабораДанныхВложенныйНаборСКДИзСтруктуры(Объект, СтруктураОбъекта);
	КонецЕсли;
	
КонецПроцедуры // ПолеНабораДанныхСКДИзСтруктуры()

Функция ВыбранныеПоляСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("ДоступныеПоляВыбора",
	                          ДоступныеПоляСКДВСтруктуру(Объект.ДоступныеПоляВыбора));
	СтруктураОбъекта.Вставить("ИдентификаторПользовательскойНастройки",
	                          Объект.ИдентификаторПользовательскойНастройки);
	СтруктураОбъекта.Вставить("ПредставлениеПользовательскойНастройки",
	                          Объект.ПредставлениеПользовательскойНастройки);
	СтруктураОбъекта.Вставить("РежимОтображения",
	                          РежимОтображенияЭлементаНастройкиКомпоновкиДанныхВСтроку(Объект.РежимОтображения));
	                          
	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Элементы Цикл
		МассивЭлементов.Добавить(ВыбранноеПолеСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Элементы", МассивЭлементов);

	Возврат СтруктураОбъекта;
	
КонецФункции // ВыбранныеПоляСКДВСтруктуру()

Процедура ВыбранныеПоляСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ДоступныеПоляВыбора") Тогда
		ДоступныеПоляСКДИзСтруктуры(Объект.ДоступныеПоляВыбора, СтруктураОбъекта.ДоступныеПоляВыбора);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ИдентификаторПользовательскойНастройки") Тогда
		Объект.ИдентификаторПользовательскойНастройки = СтруктураОбъекта.ИдентификаторПользовательскойНастройки;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПредставлениеПользовательскойНастройки") Тогда
		Объект.ПредставлениеПользовательскойНастройки = СтруктураОбъекта.ПредставлениеПользовательскойНастройки;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("РежимОтображения") Тогда
		Объект.РежимОтображения =
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных[СтруктураОбъекта.РежимОтображения];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Элементы") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Элементы Цикл
			НовыйЭлемент = Объект.Элементы.Добавить(Тип(ТекЭлемент.Тип));
			ВыбранноеПолеСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ВыбранныеПоляСКДИзСтруктуры()

Функция ГруппаВыбранныхПолейСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Тип"    , "ГруппаВыбранныхПолейКомпоновкиДанных");

	СтруктураОбъекта.Вставить("Заголовок"    , Объект.Заголовок);
	СтруктураОбъекта.Вставить("Использование", Объект.Использование);
	СтруктураОбъекта.Вставить("Поле"         , СокрЛП(Объект.Поле));
	СтруктураОбъекта.Вставить("Расположение" , РасположениеПоляКомпоновкиДанныхВСтроку(Объект.Расположение));
	СтруктураОбъекта.Вставить("РежимОтображения",
	                          РежимОтображенияЭлементаНастройкиКомпоновкиДанныхВСтроку(Объект.РежимОтображения));
	// TODO: проверить родителя
	                          
	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Элементы Цикл
		МассивЭлементов.Добавить(ВыбранноеПолеСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Элементы", МассивЭлементов);

	Возврат СтруктураОбъекта;
	
КонецФункции // ГруппаВыбранныхПолейСКДВСтруктуру()

Процедура ГруппаВыбранныхПолейСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Заголовок") Тогда
		Объект.Заголовок = СтруктураОбъекта.Заголовок;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Использование") Тогда
		Объект.Использование = СтруктураОбъекта.Использование;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Поле") Тогда
		Объект.Поле = Новый ПолеКомпоновкиДанных(СтруктураОбъекта.Поле);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Расположение") Тогда
		Объект.Расположение = РасположениеПоляКомпоновкиДанных[СтруктураОбъекта.Расположение];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("РежимОтображения") Тогда
		Объект.РежимОтображения =
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных[СтруктураОбъекта.РежимОтображения];
	КонецЕсли;
	// TODO: проверить родителя

	Если СтруктураОбъекта.Свойство("Элементы") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Элементы Цикл
			НовыйЭлемент = Объект.Элементы.Добавить(Тип(ТекЭлемент.Тип));
			ВыбранноеПолеСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ГруппаВыбранныхПолейСКДИзСтруктуры()

Функция АвтоВыбранноеПолеСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Тип"    , "АвтоВыбранноеПолеКомпоновкиДанных");

	СтруктураОбъекта.Вставить("Использование", Объект.Использование);
	// TODO: проверить родителя
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ВыбранноеПолеСКДВСтруктуру()

Процедура АвтоВыбранноеПолеСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Использование") Тогда
		Объект.Использование = СтруктураОбъекта.Использование;
	КонецЕсли;
	// TODO: проверить родителя

КонецПроцедуры // АвтоВыбранноеПолеСКДИзСтруктуры()

Функция ВыбранноеПолеСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если ТипЗнч(Объект) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
		Возврат ГруппаВыбранныхПолейСКДВСтруктуру(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
		Возврат АвтоВыбранноеПолеСКДВСтруктуру(Объект);
	КонецЕсли;

	Если НЕ ТипЗнч(Объект) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Тип"    , "ГруппаВыбранныхПолейКомпоновкиДанных");

	СтруктураОбъекта.Вставить("Заголовок"    , Объект.Заголовок);
	СтруктураОбъекта.Вставить("Использование", Объект.Использование);
	СтруктураОбъекта.Вставить("Поле"         , СокрЛП(Объект.Поле));
	СтруктураОбъекта.Вставить("РежимОтображения",
	                          РежимОтображенияЭлементаНастройкиКомпоновкиДанныхВСтроку(Объект.РежимОтображения));
	// TODO: проверить родителя

	Возврат СтруктураОбъекта;
	
КонецФункции // ВыбранноеПолеСКДВСтруктуру()

Процедура ВыбранноеПолеСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
		ГруппаВыбранныхПолейСКДИзСтруктуры(Объект, СтруктураОбъекта);
		Возврат;
	ИначеЕсли ТипЗнч(Объект) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
		АвтоВыбранноеПолеСКДИзСтруктуры(Объект, СтруктураОбъекта);
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(Объект) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Заголовок") Тогда
		Объект.Заголовок = СтруктураОбъекта.Заголовок;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Использование") Тогда
		Объект.Использование = СтруктураОбъекта.Использование;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Поле") Тогда
		Объект.Поле = Новый ПолеКомпоновкиДанных(СтруктураОбъекта.Поле);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("РежимОтображения") Тогда
		Объект.РежимОтображения =
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных[СтруктураОбъекта.РежимОтображения];
	КонецЕсли;
	// TODO: проверить родителя

КонецПроцедуры // ВыбранноеПолеСКДИзСтруктуры()

Функция РольПоляНабораДанныхСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("РольПоляНабораДанныхКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("ВыражениеВидаСчета"      , Объект.ВыражениеВидаСчета);
	СтруктураОбъекта.Вставить("ГруппаОстатка"           , Объект.ГруппаОстатка);
	СтруктураОбъекта.Вставить("ИгнорироватьЗначенияNULL", Объект.ИгнорироватьЗначенияNULL);
	СтруктураОбъекта.Вставить("Измерение"               , Объект.Измерение);
	СтруктураОбъекта.Вставить("НомерПериода"            , Объект.НомерПериода);
	СтруктураОбъекта.Вставить("Обязательное"            , Объект.Обязательное);
	СтруктураОбъекта.Вставить("Остаток"                 , Объект.Остаток);
	СтруктураОбъекта.Вставить("ПолеСчета"               , Объект.ПолеСчета);
	СтруктураОбъекта.Вставить("РеквизитИзмерения"       , Объект.РеквизитИзмерения);
	СтруктураОбъекта.Вставить("РодительскоеИзмерение"   , Объект.РодительскоеИзмерение);
	СтруктураОбъекта.Вставить("Счет"                    , Объект.Счет);
	СтруктураОбъекта.Вставить("ТипБухгалтерскогоОстатка",
	                          ТипБухгалтерскогоОстаткаКомпоновкиДанныхВСтроку(Объект.ТипБухгалтерскогоОстатка));
	СтруктураОбъекта.Вставить("ТипОстатка"    , ТипОстаткаКомпоновкиДанныхВСтроку(Объект.ТипОстатка));
	СтруктураОбъекта.Вставить("ТипПериода"    , ТипПериодаКомпоновкиДанныхВСтроку(Объект.ТипПериода));
	
	Возврат СтруктураОбъекта;

КонецФункции // РольПоляНабораДанныхСКДВСтруктуру()

Процедура РольПоляНабораДанныхСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("РольПоляНабораДанныхКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ВыражениеВидаСчета") Тогда
		Объект.ВыражениеВидаСчета = СтруктураОбъекта.ВыражениеВидаСчета;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ГруппаОстатка") Тогда
		Объект.ГруппаОстатка = СтруктураОбъекта.ГруппаОстатка;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ИгнорироватьЗначенияNULL") Тогда
		Объект.ИгнорироватьЗначенияNULL = СтруктураОбъекта.ИгнорироватьЗначенияNULL;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Измерение") Тогда
		Объект.Измерение = СтруктураОбъекта.Измерение;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("НомерПериода") Тогда
		Объект.НомерПериода = СтруктураОбъекта.НомерПериода;
	КонецЕсли;

	// TODO: проверить свойство "Обязательное"

	Если СтруктураОбъекта.Свойство("Остаток") Тогда
		Объект.Остаток = СтруктураОбъекта.Остаток;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПолеСчета") Тогда
		Объект.ПолеСчета = СтруктураОбъекта.ПолеСчета;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("РеквизитИзмерения") Тогда
		Объект.РеквизитИзмерения = СтруктураОбъекта.РеквизитИзмерения;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("РодительскоеИзмерение") Тогда
		Объект.РодительскоеИзмерение = СтруктураОбъекта.РодительскоеИзмерение;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Счет") Тогда
		Объект.Счет = СтруктураОбъекта.Счет;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ТипБухгалтерскогоОстатка") Тогда
		Объект.ТипБухгалтерскогоОстатка =
			ТипБухгалтерскогоОстаткаКомпоновкиДанных[СтруктураОбъекта.ТипБухгалтерскогоОстатка];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ТипОстатка") Тогда
		Объект.ТипОстатка = ТипОстаткаКомпоновкиДанных[СтруктураОбъекта.ТипОстатка];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ТипПериода") Тогда
		Объект.ТипПериода = ТипПериодаКомпоновкиДанных[СтруктураОбъекта.ТипПериода];
	КонецЕсли;

КонецПроцедуры // РольПоляНабораДанныхСКДИзСтруктуры()

Функция ДоступныйОбъектНастройкиСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ДоступныйОбъектНастройкиКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Заголовок", Объект.Заголовок);

	Возврат СтруктураОбъекта;
	
КонецФункции // ДоступныйОбъектНастройкиСКДВСтруктуру()

Процедура ДоступныйОбъектНастройкиСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ДоступныйОбъектНастройкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ДоступныйОбъектНастройкиСКДИзСтруктуры()

Функция ДоступныеОбъектыНастройкиСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ДоступныеОбъектыНастройкиКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Элементы Цикл
		МассивЭлементов.Добавить(ДоступныйОбъектНастройкиСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Элементы", МассивЭлементов);

	Возврат СтруктураОбъекта;
	
КонецФункции // ДоступныйОбъектНастройкиСКДВСтруктуру()

Процедура ДоступныеОбъектыНастройкиСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ДоступныеОбъектыНастройкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ДоступныеОбъектыНастройкиСКДИзСтруктуры()

// TODO: возможно все объекты начинающиеся с "Доступный(-ое, -ая) не нужно восстанавливать,
// они будут заполнены автоматически из настроек СКД
Функция ДоступноеПолеОтбораСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ДоступноеПолеОтбораКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Тип"                   , "ДоступноеПолеОтбораКомпоновкиДанных");

	СтруктураОбъекта.Вставить("БыстрыйВыбор"          , Объект.БыстрыйВыбор); // только чтение
	//СтруктураОбъекта.Вставить("ВыборГруппИЭлементов",
	//                          ИспользованиеГруппИЭлементовВСтроку(Объект.ВыборГруппИЭлементов)); // только чтение
	СтруктураОбъекта.Вставить("ДоступныеВидыСравнения", ЗначениеВСтруктуру(Объект.ДоступныеЗначения));
	СтруктураОбъекта.Вставить("ДоступныеЗначения"     , ЗначениеВСтруктуру(Объект.ДоступныеЗначения));
	СтруктураОбъекта.Вставить("Заголовок"             , Объект.Заголовок); // только чтение
	СтруктураОбъекта.Вставить("Маска"                 , Объект.Маска); // только чтение
	СтруктураОбъекта.Вставить("Папка"                 , Объект.Папка); // только чтение
	СтруктураОбъекта.Вставить("Поле"                  , СокрЛП(Объект.Поле)); // только чтение
	СтруктураОбъекта.Вставить("Ресурс"                , Объект.Ресурс); // только чтение
	// TODO: проверить родителя
	//СтруктураОбъекта.Вставить("СвязьПоТипу"           , СвязьПоТипуСКДВСтруктуру(Объект.СвязьПоТипу)); // только чтение
	СтруктураОбъекта.Вставить("Таблица"               , Объект.Таблица); // только чтение
	СтруктураОбъекта.Вставить("ТипЗначения"           , ЗначениеВСтруктуру(Объект.ТипЗначения)); // только чтение
	СтруктураОбъекта.Вставить("ФормаВыбора"           , Объект.ФормаВыбора); // только чтение
	СтруктураОбъекта.Вставить("ФорматРедактирования"  , Объект.ФорматРедактирования); // только чтение

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Элементы Цикл
		МассивЭлементов.Добавить(ДоступноеПолеСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Элементы", МассивЭлементов);
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ДоступноеПолеОтбораСКДВСтруктуру()

Процедура ДоступноеПолеОтбораСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ДоступноеПолеОтбораКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ДоступноеПолеОтбораСКДИзСтруктуры()

Функция ДоступноеПолеСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если ТипЗнч(Объект) = Тип("ДоступноеПолеОтбораКомпоновкиДанных") Тогда
		Возврат ДоступноеПолеОтбораСКДВСтруктуру(Объект);
	КонецЕсли;

	Если НЕ ТипЗнч(Объект) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Тип", "ДоступноеПолеКомпоновкиДанных");
	
	СтруктураОбъекта.Вставить("Заголовок"             , Объект.Заголовок); // только чтение
	СтруктураОбъекта.Вставить("Папка"                 , Объект.Папка); // только чтение
	СтруктураОбъекта.Вставить("Поле"                  , СокрЛП(Объект.Поле)); // только чтение
	СтруктураОбъекта.Вставить("Ресурс"                , Объект.Ресурс); // только чтение
	// TODO: проверить родителя
	СтруктураОбъекта.Вставить("Таблица"               , Объект.Таблица); // только чтение
	СтруктураОбъекта.Вставить("ТипЗначения"           , ЗначениеВСтруктуру(Объект.ТипЗначения)); // только чтение

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Элементы Цикл
		МассивЭлементов.Добавить(ДоступноеПолеСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Элементы", МассивЭлементов);
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ДоступноеПолеСКДВСтруктуру()

Процедура ДоступноеПолеСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ДоступноеПолеОтбораКомпоновкиДанных") Тогда
		ДоступноеПолеОтбораСКДИзСтруктуры(Объект, СтруктураОбъекта);
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(Объект) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ДоступноеПолеСКДИзСтруктуры()

Функция ДоступныеПоляСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ДоступныеПоляКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Элементы Цикл
		МассивЭлементов.Добавить(ДоступноеПолеСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Элементы", МассивЭлементов);
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ДоступныеПоляСКДВСтруктуру()

Процедура ДоступныеПоляСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ДоступныеПоляКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ДоступныеПоляСКДИзСтруктуры()

Функция ГруппаЭлементовОтбораСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Тип", "ГруппаЭлементовОтбораКомпоновкиДанных");
	
	СтруктураОбъекта.Вставить("ИдентификаторПользовательскойНастройки",
	                          Объект.ИдентификаторПользовательскойНастройки);
	СтруктураОбъекта.Вставить("Использование"   , Объект.Использование);
	СтруктураОбъекта.Вставить("Представление"   , Объект.Представление);
	СтруктураОбъекта.Вставить("ПредставлениеПользовательскойНастройки",
	                          Объект.ПредставлениеПользовательскойНастройки);
	СтруктураОбъекта.Вставить("Применение",
	                          ТипПримененияОтбораКомпоновкиДанныхВСтроку(Объект.Применение));
	СтруктураОбъекта.Вставить("РежимОтображения",
	                          РежимОтображенияЭлементаНастройкиКомпоновкиДанныхВСтроку(Объект.РежимОтображения));
	// TODO: проверить родителя
	СтруктураОбъекта.Вставить("ТипГруппы",
	                          ТипГруппыЭлементовОтбораКомпоновкиДанныхВСтроку(Объект.ТипГруппы));

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Элементы Цикл
		МассивЭлементов.Добавить(ЭлементОтбораСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Элементы", МассивЭлементов);
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ГруппаЭлементовОтбораСКДВСтруктуру()

Процедура ГруппаЭлементовОтбораСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ИдентификаторПользовательскойНастройки") Тогда
		Объект.ИдентификаторПользовательскойНастройки = СтруктураОбъекта.ИдентификаторПользовательскойНастройки;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Использование") Тогда
		Объект.Использование = СтруктураОбъекта.Использование;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Представление") Тогда
		Объект.Представление = СтруктураОбъекта.Представление;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПредставлениеПользовательскойНастройки") Тогда
		Объект.ПредставлениеПользовательскойНастройки = СтруктураОбъекта.ПредставлениеПользовательскойНастройки;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Применение") Тогда
		Объект.Применение = ТипПримененияОтбораКомпоновкиДанных[СтруктураОбъекта.Применение];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("РежимОтображения") Тогда
		Объект.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных[СтруктураОбъекта.РежимОтображения];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ТипГруппы") Тогда
		Объект.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных[СтруктураОбъекта.ТипГруппы];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Элементы") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Элементы Цикл
			НовыйЭлемент = Объект.Элементы.Добавить(Тип(ТекЭлемент.Тип));
			ЭлементОтбораСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ГруппаЭлементовОтбораСКДИзСтруктуры()

Функция ЭлементОтбораСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если ТипЗнч(Объект) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		Возврат ГруппаЭлементовОтбораСКДВСтруктуру(Объект);
	КонецЕсли;

	Если НЕ ТипЗнч(Объект) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Тип", "ЭлементОтбораКомпоновкиДанных");
	
	СтруктураОбъекта.Вставить("ИдентификаторПользовательскойНастройки",
	                          Объект.ИдентификаторПользовательскойНастройки);
	СтруктураОбъекта.Вставить("Использование"   , Объект.Использование);
	СтруктураОбъекта.Вставить("ЛевоеЗначение"   , СокрЛП(Объект.ЛевоеЗначение));
	СтруктураОбъекта.Вставить("ПравоеЗначение"  , ЗначениеВСтруктуру(Объект.Представление));
	СтруктураОбъекта.Вставить("Представление"   , Объект.Представление);
	СтруктураОбъекта.Вставить("ПредставлениеПользовательскойНастройки",
	                          Объект.ПредставлениеПользовательскойНастройки);
	СтруктураОбъекта.Вставить("Применение",
	                          ТипПримененияОтбораКомпоновкиДанныхВСтроку(Объект.Применение));
	СтруктураОбъекта.Вставить("РежимОтображения",
	                          РежимОтображенияЭлементаНастройкиКомпоновкиДанныхВСтроку(Объект.РежимОтображения));
	// TODO: проверить родителя

	Возврат СтруктураОбъекта;
	
КонецФункции // ЭлементОтбораСКДВСтруктуру()

Процедура ЭлементОтбораСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		ГруппаЭлементовОтбораСКДИзСтруктуры(Объект, СтруктураОбъекта);
		Возврат;
	КонецЕсли;

	Если НЕ ТипЗнч(Объект) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ИдентификаторПользовательскойНастройки") Тогда
		Объект.ИдентификаторПользовательскойНастройки = СтруктураОбъекта.ИдентификаторПользовательскойНастройки;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Использование") Тогда
		Объект.Использование = СтруктураОбъекта.Использование;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ЛевоеЗначение") Тогда
		Объект.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтруктураОбъекта.ЛевоеЗначение);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПравоеЗначение") Тогда
		Объект.ПравоеЗначение = ЗначениеИзСтруктуры(СтруктураОбъекта.Представление);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Представление") Тогда
		Объект.Представление = СтруктураОбъекта.Представление;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПредставлениеПользовательскойНастройки") Тогда
		Объект.ПредставлениеПользовательскойНастройки = СтруктураОбъекта.ПредставлениеПользовательскойНастройки;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Применение") Тогда
		Объект.Применение = ТипПримененияОтбораКомпоновкиДанных[СтруктураОбъекта.Применение];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("РежимОтображения") Тогда
		Объект.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных[СтруктураОбъекта.РежимОтображения];
	КонецЕсли;

КонецПроцедуры // ЭлементОтбораСКДИзСтруктуры()

Функция ОтборСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ОтборКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("ИдентификаторПользовательскойНастройки",
	                          Объект.ИдентификаторПользовательскойНастройки);
	СтруктураОбъекта.Вставить("ПредставлениеПользовательскойНастройки",
	                          Объект.ПредставлениеПользовательскойНастройки);
	СтруктураОбъекта.Вставить("РежимОтображения",
	                          РежимОтображенияЭлементаНастройкиКомпоновкиДанныхВСтроку(Объект.РежимОтображения));

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Элементы Цикл
		МассивЭлементов.Добавить(ЭлементОтбораСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Элементы", МассивЭлементов);
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ОтборСКДВСтруктуру()

Процедура ОтборСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ОтборКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ИдентификаторПользовательскойНастройки") Тогда
		Объект.ИдентификаторПользовательскойНастройки = СтруктураОбъекта.ИдентификаторПользовательскойНастройки;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПредставлениеПользовательскойНастройки") Тогда
		Объект.ПредставлениеПользовательскойНастройки = СтруктураОбъекта.ПредставлениеПользовательскойНастройки;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("РежимОтображения") Тогда
		Объект.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных[СтруктураОбъекта.РежимОтображения];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Элементы") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Элементы Цикл
			НовыйЭлемент = Объект.Элементы.Добавить(Тип(ТекЭлемент.Тип));
			ЭлементОтбораСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОтборСКДИзСтруктуры()

Функция ЗначенияПараметровВыводаСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ЗначенияПараметровВыводаКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Элементы Цикл
		МассивЭлементов.Добавить(ЗначениеПараметраСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Элементы", МассивЭлементов);

	Возврат СтруктураОбъекта;
	
КонецФункции // ЗначенияПараметровВыводаСКДВСтруктуру()

Процедура ЗначенияПараметровВыводаСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ЗначенияПараметровВыводаКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Элементы") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Элементы Цикл
			НовыйЭлемент = Объект.Элементы.Добавить();
			ЭлементОтбораСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗначенияПараметровВыводаСКДИзСтруктуры()

Функция ЗначенияПараметровДанныхСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ЗначенияПараметровДанныхКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Элементы Цикл
		МассивЭлементов.Добавить(ЗначениеПараметраСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Элементы", МассивЭлементов);

	Возврат СтруктураОбъекта;
	
КонецФункции // ЗначенияПараметровДанныхСКДВСтруктуру()

Процедура ЗначенияПараметровДанныхСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ЗначенияПараметровДанныхКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Элементы") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Элементы Цикл
			НовыйЭлемент = Объект.Элементы.Добавить();
			ЭлементОтбораСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗначенияПараметровДанныхСКДИзСтруктуры()

Функция ПользовательскоеПолеВыражениеСКДВСтруктуру(Объект) Экспорт

	// TODO: Добавить работу с выражениями

	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Заголовок"    , Объект.Заголовок);
	СтруктураОбъекта.Вставить("Использование", Объект.Использование);
	СтруктураОбъекта.Вставить("ПутьКДанным"  , Объект.ПутьКДанным);
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ПользовательскоеПолеВыражениеСКДВСтруктуру()

Процедура ПользовательскоеПолеВыражениеСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Заголовок") Тогда
		Объект.Заголовок = СтруктураОбъекта.Заголовок;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Использование") Тогда
		Объект.Использование = СтруктураОбъекта.Использование;
	КонецЕсли;

КонецПроцедуры // ПользовательскоеПолеВыражениеСКДИзСтруктуры()

Функция ПользовательскоеПолеВыборСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Заголовок"    , Объект.Заголовок);
	СтруктураОбъекта.Вставить("Использование", Объект.Использование);
	СтруктураОбъекта.Вставить("ПутьКДанным"  , Объект.ПутьКДанным);

	СтруктураОбъекта.Вставить("Варианты"     , ВариантыПользовательскогоПоляВыбораСКДВСтруктуру(Объект.Варианты));
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ПользовательскоеПолеВыборСКДВСтруктуру()

Процедура ПользовательскоеПолеВыборСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Заголовок") Тогда
		Объект.Заголовок = СтруктураОбъекта.Заголовок;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Использование") Тогда
		Объект.Использование = СтруктураОбъекта.Использование;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Варианты") Тогда
		ВариантыПользовательскогоПоляВыбораСКДИзСтруктуры(Объект.Варианты, СтруктураОбъекта.Варианты);
	КонецЕсли;

КонецПроцедуры // ПользовательскоеПолеВыборСКДИзСтруктуры()

Функция ПользовательскоеПолеСКДВСтруктуру(Объект) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
		Возврат ПользовательскоеПолеВыражениеСКДВСтруктуру(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
		Возврат ПользовательскоеПолеВыборСКДВСтруктуру(Объект);
	КонецЕсли;
	
КонецФункции // ПользовательскоеПолеСКДВСтруктуру()

Процедура ПользовательскоеПолеСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
		ПользовательскоеПолеВыражениеСКДИзСтруктуры(Объект, СтруктураОбъекта);
	ИначеЕсли ТипЗнч(Объект) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
		ПользовательскоеПолеВыборСКДИзСтруктуры(Объект, СтруктураОбъекта);
	КонецЕсли;
	
КонецПроцедуры // ПользовательскоеПолеСКДИзСтруктуры()

Функция ПользовательскиеПоляСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ПользовательскиеПоляКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Элементы Цикл
		МассивЭлементов.Добавить(ПользовательскоеПолеСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Элементы", МассивЭлементов);

	Возврат СтруктураОбъекта;
	
КонецФункции // ПользовательскиеПоляСКДВСтруктуру()

Процедура ПользовательскиеПоляСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ПользовательскиеПоляКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Элементы") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Элементы Цикл
			НовыйЭлемент = Объект.Элементы.Добавить(Тип(ТекЭлемент.Тип));
			ПользовательскоеПолеСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПользовательскиеПоляСКДИзСтруктуры()

Функция ВариантПользовательскогоПоляВыбораСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ВариантПользовательскогоПоляВыборКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Значение"     , ЗначениеВСтруктуру(Объект.Значение));
	СтруктураОбъекта.Вставить("Использование", Объект.Использование);
	СтруктураОбъекта.Вставить("Представление", Объект.Представление);
	СтруктураОбъекта.Вставить("Отбор"        , ОтборСКДВСтруктуру(Объект));

	Возврат СтруктураОбъекта;
	
КонецФункции // ВариантПользовательскогоПоляВыбораСКДВСтруктуру()

Процедура ВариантПользовательскогоПоляВыбораСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ВариантПользовательскогоПоляВыборКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Значение") Тогда
		Объект.Значение = ЗначениеИзСтруктуры(СтруктураОбъекта.Значение);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Использование") Тогда
		Объект.Использование = СтруктураОбъекта.Использование;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Представление") Тогда
		Объект.Представление = СтруктураОбъекта.Представление;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Отбор") Тогда
		ОтборСКДИзСтруктуры(Объект.Отбор, СтруктураОбъекта.Отбор);
	КонецЕсли;

КонецПроцедуры // ВариантПользовательскогоПоляВыбораСКДИзСтруктуры()

Функция ВариантыПользовательскогоПоляВыбораСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ПользовательскиеПоляКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Элементы Цикл
		МассивЭлементов.Добавить(ВариантПользовательскогоПоляВыбораСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Элементы", МассивЭлементов);

	Возврат СтруктураОбъекта;
	
КонецФункции // ВариантыПользовательскогоПоляВыбораСКДВСтруктуру()

Процедура ВариантыПользовательскогоПоляВыбораСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ПользовательскиеПоляКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Элементы") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Элементы Цикл
			НовыйЭлемент = Объект.Элементы.Добавить();
			ВариантПользовательскогоПоляВыбораСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ВариантыПользовательскогоПоляВыбораСКДИзСтруктуры()

Функция АвтоЭлементПорядкаСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Тип"   , "АвтоЭлементПорядкаКомпоновкиДанных");

	СтруктураОбъекта.Вставить("Использование"   , Объект.Использование);

	Возврат СтруктураОбъекта;
	
КонецФункции // АвтоЭлементПорядкаСКДВСтруктуру()

Процедура АвтоЭлементПорядкаСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Использование") Тогда
		Объект.Использование = СтруктураОбъекта.Использование;
	КонецЕсли;

КонецПроцедуры // АвтоЭлементПорядкаСКДИзСтруктуры()

Функция ЭлементПорядкаСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если ТипЗнч(Объект) = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
		Возврат АвтоЭлементПорядкаСКДВСтруктуру(Объект);
	КонецЕсли;

	Если НЕ ТипЗнч(Объект) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Тип"   , "ЭлементПорядкаКомпоновкиДанных");

	СтруктураОбъекта.Вставить("Использование"   , Объект.Использование);
	СтруктураОбъекта.Вставить("Поле"            , СокрЛП(Объект.Поле));
	СтруктураОбъекта.Вставить("РежимОтображения",
	                          РежимОтображенияЭлементаНастройкиКомпоновкиДанныхВСтроку(Объект.РежимОтображения));
	СтруктураОбъекта.Вставить("ТипУпорядочивания",
	                          НаправлениеСортировкиКомпоновкиДанныхВСтроку(Объект.ТипУпорядочивания));

	Возврат СтруктураОбъекта;
	
КонецФункции // ЭлементПорядкаСКДВСтруктуру()

Процедура ЭлементПорядкаСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если ТипЗнч(Объект) = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
		АвтоЭлементПорядкаСКДИзСтруктуры(Объект, СтруктураОбъекта);
		Возврат;
	КонецЕсли;

	Если НЕ ТипЗнч(Объект) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Использование") Тогда
		Объект.Использование = СтруктураОбъекта.Использование;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Поле") Тогда
		Объект.Поле = Новый ПолеКомпоновкиДанных(СтруктураОбъекта.Поле);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("РежимОтображения") Тогда
		Объект.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных[СтруктураОбъекта.РежимОтображения];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ТипУпорядочивания") Тогда
		Объект.ТипУпорядочивания =  НаправлениеСортировкиКомпоновкиДанных[СтруктураОбъекта.ТипУпорядочивания];
	КонецЕсли;

КонецПроцедуры // ЭлементПорядкаСКДИзСтруктуры()

Функция ПорядокСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ПорядокКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("ИдентификаторПользовательскойНастройки",
	                          Объект.ИдентификаторПользовательскойНастройки);
	СтруктураОбъекта.Вставить("ПредставлениеПользовательскойНастройки",
	                          Объект.ПредставлениеПользовательскойНастройки);
	СтруктураОбъекта.Вставить("РежимОтображения",
	                          РежимОтображенияЭлементаНастройкиКомпоновкиДанныхВСтроку(Объект.РежимОтображения));

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Элементы Цикл
		МассивЭлементов.Добавить(ЭлементПорядкаСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Элементы", МассивЭлементов);

	Возврат СтруктураОбъекта;
	
КонецФункции // ПорядокСКДВСтруктуру()

Процедура ПорядокСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ПорядокКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ИдентификаторПользовательскойНастройки") Тогда
		Объект.ИдентификаторПользовательскойНастройки = СтруктураОбъекта.ИдентификаторПользовательскойНастройки;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПредставлениеПользовательскойНастройки") Тогда
		Объект.ПредставлениеПользовательскойНастройки = СтруктураОбъекта.ПредставлениеПользовательскойНастройки;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("РежимОтображения") Тогда
		Объект.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных[СтруктураОбъекта.РежимОтображения];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Элементы") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Элементы Цикл
			НовыйЭлемент = Объект.Элементы.Добавить(Тип(ТекЭлемент.Тип));
			ЭлементПорядкаСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПорядокСКДИзСтруктуры()

Функция НастройкиВложенногоОбъектаСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Идентификатор"       , Объект.Идентификатор);
	СтруктураОбъекта.Вставить("ИдентификаторОбъекта", Объект.ИдентификаторОбъекта);
	СтруктураОбъекта.Вставить("Имя"                 , Объект.Имя);
	СтруктураОбъекта.Вставить("Использование"       , Объект.Использование);
	
	СтруктураОбъекта.Вставить("ИдентификаторПользовательскойНастройки",
	                          Объект.ИдентификаторПользовательскойНастройки);
	СтруктураОбъекта.Вставить("ПредставлениеПользовательскойНастройки",
	                          Объект.ПредставлениеПользовательскойНастройки);
	СтруктураОбъекта.Вставить("РежимОтображения",
	                          РежимОтображенияЭлементаНастройкиКомпоновкиДанныхВСтроку(Объект.РежимОтображения));
	// TODO: проверить родителя
	СтруктураОбъекта.Вставить("Настройки", НастройкиСКДВСтруктуру(Объект.Настройки));
	
	Возврат СтруктураОбъекта;
	
КонецФункции // НастройкиВложенногоОбъектаСКДВСтруктуру()

Процедура НастройкиВложенногоОбъектаСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Имя") Тогда
		Объект.Имя = СтруктураОбъекта.Имя;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Использование") Тогда
		Объект.Использование = СтруктураОбъекта.Использование;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ИдентификаторПользовательскойНастройки") Тогда
		Объект.ИдентификаторПользовательскойНастройки = СтруктураОбъекта.ИдентификаторПользовательскойНастройки;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПредставлениеПользовательскойНастройки") Тогда
		Объект.ПредставлениеПользовательскойНастройки = СтруктураОбъекта.ПредставлениеПользовательскойНастройки;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("РежимОтображения") Тогда
		Объект.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных[СтруктураОбъекта.РежимОтображения];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Настройки") Тогда
		НастройкиСКДИзСтруктуры(Объект.Настройки, СтруктураОбъекта.Настройки);
	КонецЕсли;

КонецПроцедуры // НастройкиВложенногоОбъектаСКДИзСтруктуры()

Функция ГруппировкаСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ГруппировкаКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Тип"             , "ГруппировкаКомпоновкиДанных");

	СтруктураОбъекта.Вставить("Выбор"           , ВыбранныеПоляСКДВСтруктуру(Объект.Выбор));
	СтруктураОбъекта.Вставить("Идентификатор"   , Объект.Идентификатор);
	СтруктураОбъекта.Вставить("Имя"             , Объект.Имя);
	СтруктураОбъекта.Вставить("Использование"   , Объект.Использование);
	
	СтруктураОбъекта.Вставить("ИдентификаторПользовательскойНастройки",
	                          Объект.ИдентификаторПользовательскойНастройки);
	СтруктураОбъекта.Вставить("ПредставлениеПользовательскойНастройки",
	                          Объект.ПредставлениеПользовательскойНастройки);
	СтруктураОбъекта.Вставить("РежимОтображения",
	                          РежимОтображенияЭлементаНастройкиКомпоновкиДанныхВСтроку(Объект.РежимОтображения));
	СтруктураОбъекта.Вставить("Отбор",
	                          ОтборСКДВСтруктуру(Объект.Отбор));
	СтруктураОбъекта.Вставить("ПараметрыВывода",
	                          ЗначенияПараметровВыводаГруппировкиСКДВСтруктуру(Объект.ПараметрыВывода));
	СтруктураОбъекта.Вставить("ПоляГруппировки",
	                          ПоляГруппировкиСКДВСтруктуру(Объект.ПоляГруппировки));
	СтруктураОбъекта.Вставить("Порядок",
	                          ПорядокСКДВСтруктуру(Объект.Порядок));

	// TODO: проверить родителя
	СтруктураОбъекта.Вставить("Состояние",
	                          СостояниеЭлементаНастройкиКомпоновкиДанныхВСтроку(Объект.Состояние));
	                          
	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Структура Цикл
		МассивЭлементов.Добавить(ЭлементСтруктурыНастроекСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Структура", МассивЭлементов);
	
	СтруктураОбъекта.Вставить("УсловноеОформление",
	                          УсловноеОформлениеСКДВСтруктуру(Объект.УсловноеОформление));

 	Возврат СтруктураОбъекта;
	
КонецФункции // ГруппировкаСКДВСтруктуру()

Процедура ГруппировкаСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ГруппировкаКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Имя") Тогда
		Объект.Имя = СтруктураОбъекта.Имя;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Использование") Тогда
		Объект.Использование = СтруктураОбъекта.Использование;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ИдентификаторПользовательскойНастройки") Тогда
		Объект.ИдентификаторПользовательскойНастройки = СтруктураОбъекта.ИдентификаторПользовательскойНастройки;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПредставлениеПользовательскойНастройки") Тогда
		Объект.ПредставлениеПользовательскойНастройки = СтруктураОбъекта.ПредставлениеПользовательскойНастройки;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("РежимОтображения") Тогда
		Объект.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных[СтруктураОбъекта.РежимОтображения];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Отбор") Тогда
		ОтборСКДИзСтруктуры(Объект.Отбор, СтруктураОбъекта.Отбор);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПараметрыВывода") Тогда
		ЗначенияПараметровВыводаГруппировкиСКДИзСтруктуры(Объект.ПараметрыВывода, СтруктураОбъекта.ПараметрыВывода);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПоляГруппировки") Тогда
		ПоляГруппировкиСКДИзСтруктуры(Объект.ПоляГруппировки, СтруктураОбъекта.ПоляГруппировки);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Порядок") Тогда
		ПорядокСКДИзСтруктуры(Объект.Порядок, СтруктураОбъекта.Порядок);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Состояние") Тогда
		Объект.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных[СтруктураОбъекта.Состояние];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Структура") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Структура Цикл
			НовыйЭлемент = Объект.Структура.Добавить(Тип(ТекЭлемент.Тип));
			ЭлементПорядкаСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("УсловноеОформление") Тогда
		УсловноеОформлениеСКДИзСтруктуры(Объект.УсловноеОформление, СтруктураОбъекта.УсловноеОформление);
	КонецЕсли;

КонецПроцедуры // ГруппировкаСКДИзСтруктуры()

Функция ТаблицаСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ТаблицаКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Тип"             , "ТаблицаКомпоновкиДанных");
	
	СтруктураОбъекта.Вставить("Выбор"           , ВыбранныеПоляСКДВСтруктуру(Объект.Выбор));
	СтруктураОбъекта.Вставить("Идентификатор"   , Объект.Идентификатор);
	СтруктураОбъекта.Вставить("Имя"             , Объект.Имя);
	СтруктураОбъекта.Вставить("Использование"   , Объект.Использование);
	
	СтруктураОбъекта.Вставить("ИдентификаторПользовательскойНастройки",
	                          Объект.ИдентификаторПользовательскойНастройки);
	СтруктураОбъекта.Вставить("ПредставлениеПользовательскойНастройки",
	                          Объект.ПредставлениеПользовательскойНастройки);
	СтруктураОбъекта.Вставить("РежимОтображения",
	                          РежимОтображенияЭлементаНастройкиКомпоновкиДанныхВСтроку(Объект.РежимОтображения));
	СтруктураОбъекта.Вставить("ПараметрыВывода",
	                          ЗначенияПараметровВыводаГруппировкиСКДВСтруктуру(Объект.ПараметрыВывода));

	// TODO: проверить родителя
	                          
	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Колонки Цикл
		МассивЭлементов.Добавить(ЭлементСтруктурыНастроекСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Колонки", МассивЭлементов);
	
	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Строки Цикл
		МассивЭлементов.Добавить(ЭлементСтруктурыНастроекСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Строки", МассивЭлементов);
	
	СтруктураОбъекта.Вставить("УсловноеОформление",
	                          УсловноеОформлениеСКДВСтруктуру(Объект.УсловноеОформление));

	Возврат СтруктураОбъекта;
	
КонецФункции // ТаблицаСКДВСтруктуру()

Процедура ТаблицаСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ТаблицаКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Имя") Тогда
		Объект.Имя = СтруктураОбъекта.Имя;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Использование") Тогда
		Объект.Использование = СтруктураОбъекта.Использование;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ИдентификаторПользовательскойНастройки") Тогда
		Объект.ИдентификаторПользовательскойНастройки = СтруктураОбъекта.ИдентификаторПользовательскойНастройки;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПредставлениеПользовательскойНастройки") Тогда
		Объект.ПредставлениеПользовательскойНастройки = СтруктураОбъекта.ПредставлениеПользовательскойНастройки;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("РежимОтображения") Тогда
		Объект.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных[СтруктураОбъекта.РежимОтображения];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПараметрыВывода") Тогда
		ЗначенияПараметровВыводаГруппировкиСКДИзСтруктуры(Объект.ПараметрыВывода, СтруктураОбъекта.ПараметрыВывода);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Колонки") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Колонки Цикл
			НовыйЭлемент = Объект.Колонки.Добавить();
			ЭлементПорядкаСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Строки") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Строки Цикл
			НовыйЭлемент = Объект.Строки.Добавить();
			ЭлементПорядкаСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("УсловноеОформление") Тогда
		УсловноеОформлениеСКДИзСтруктуры(Объект.УсловноеОформление, СтруктураОбъекта.УсловноеОформление);
	КонецЕсли;

КонецПроцедуры // ТаблицаСКДИзСтруктуры()

Функция ДиаграммаСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Тип"             , "ДиаграммаКомпоновкиДанных");
	
	СтруктураОбъекта.Вставить("Выбор"           , ВыбранныеПоляСКДВСтруктуру(Объект.Выбор));
	СтруктураОбъекта.Вставить("Идентификатор"   , Объект.Идентификатор);
	СтруктураОбъекта.Вставить("Имя"             , Объект.Имя);
	СтруктураОбъекта.Вставить("Использование"   , Объект.Использование);
	
	СтруктураОбъекта.Вставить("ИдентификаторПользовательскойНастройки",
	                          Объект.ИдентификаторПользовательскойНастройки);
	СтруктураОбъекта.Вставить("ПредставлениеПользовательскойНастройки",
	                          Объект.ПредставлениеПользовательскойНастройки);
	СтруктураОбъекта.Вставить("РежимОтображения",
	                          РежимОтображенияЭлементаНастройкиКомпоновкиДанныхВСтроку(Объект.РежимОтображения));
	СтруктураОбъекта.Вставить("ПараметрыВывода",
	                          ЗначенияПараметровВыводаГруппировкиСКДВСтруктуру(Объект.ПараметрыВывода));

	// TODO: проверить родителя
	                          
	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Серии Цикл
		МассивЭлементов.Добавить(ЭлементСтруктурыНастроекСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Серии", МассивЭлементов);
	
	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Точки Цикл
		МассивЭлементов.Добавить(ЭлементСтруктурыНастроекСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Точки", МассивЭлементов);
	
	СтруктураОбъекта.Вставить("УсловноеОформление",
	                          УсловноеОформлениеСКДВСтруктуру(Объект.УсловноеОформление));

	Возврат СтруктураОбъекта;
	
КонецФункции // ДиаграммаСКДВСтруктуру()

Процедура ДиаграммаСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Имя") Тогда
		Объект.Имя = СтруктураОбъекта.Имя;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Использование") Тогда
		Объект.Использование = СтруктураОбъекта.Использование;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ИдентификаторПользовательскойНастройки") Тогда
		Объект.ИдентификаторПользовательскойНастройки = СтруктураОбъекта.ИдентификаторПользовательскойНастройки;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПредставлениеПользовательскойНастройки") Тогда
		Объект.ПредставлениеПользовательскойНастройки = СтруктураОбъекта.ПредставлениеПользовательскойНастройки;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("РежимОтображения") Тогда
		Объект.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных[СтруктураОбъекта.РежимОтображения];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПараметрыВывода") Тогда
		ЗначенияПараметровВыводаГруппировкиСКДИзСтруктуры(Объект.ПараметрыВывода, СтруктураОбъекта.ПараметрыВывода);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Серии") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Серии Цикл
			НовыйЭлемент = Объект.Серии.Добавить();
			ЭлементПорядкаСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Точки") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Точки Цикл
			НовыйЭлемент = Объект.Точки.Добавить();
			ЭлементПорядкаСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("УсловноеОформление") Тогда
		УсловноеОформлениеСКДИзСтруктуры(Объект.УсловноеОформление, СтруктураОбъекта.УсловноеОформление);
	КонецЕсли;

КонецПроцедуры // ДиаграммаСКДИзСтруктуры()

Функция ЭлементСтруктурыНастроекСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если ТипЗнч(Объект) = Тип("ГруппировкаКомпоновкиДанных") Тогда
		Возврат ГруппировкаСКДВСтруктуру(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("ТаблицаКомпоновкиДанных") Тогда
		Возврат ТаблицаСКДВСтруктуру(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		Возврат ДиаграммаСКДВСтруктуру(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат НастройкиВложенногоОбъектаСКДВСтруктуру(Объект);
	Иначе
		Возврат СтруктураОбъекта;
	КонецЕсли;

КонецФункции // ЭлементСтруктурыНастроекСКДВСтруктуру()

Процедура ЭлементСтруктурыНастроекСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ГруппировкаКомпоновкиДанных") Тогда
		ГруппировкаСКДИзСтруктуры(Объект, СтруктураОбъекта);
	ИначеЕсли ТипЗнч(Объект) = Тип("ТаблицаКомпоновкиДанных") Тогда
		ТаблицаСКДИзСтруктуры(Объект, СтруктураОбъекта);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		ДиаграммаСКДИзСтруктуры(Объект, СтруктураОбъекта);
	ИначеЕсли ТипЗнч(Объект) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		НастройкиВложенногоОбъектаСКДИзСтруктуры(Объект, СтруктураОбъекта);
	КонецЕсли;
	
КонецПроцедуры // ЭлементСтруктурыНастроекСКДИзСтруктуры()

Функция АвтоПолеГруппировкиСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Тип"          , "АвтоПолеГруппировкиКомпоновкиДанных");
	
	СтруктураОбъекта.Вставить("Использование", Объект.Использование);
	
	Возврат СтруктураОбъекта;
	
КонецФункции // АвтоПолеГруппировкиСКДВСтруктуру()

Процедура АвтоПолеГруппировкиСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Использование") Тогда
		Объект.Использование = СтруктураОбъекта.Использование;
	КонецЕсли;

КонецПроцедуры // АвтоПолеГруппировкиСКДИзСтруктуры()

Функция ПолеГруппировкиСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если ТипЗнч(Объект) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
		Возврат АвтоПолеГруппировкиСКДВСтруктуру(Объект);
	КонецЕсли;

	Если НЕ ТипЗнч(Объект) = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Тип"           , "ПолеГруппировкиКомпоновкиДанных");
	
	СтруктураОбъекта.Вставить("Использование" , Объект.Использование);
	СтруктураОбъекта.Вставить("НачалоПериода" , ?(ТипЗнч(Объект.НачалоПериода) = Тип("ПолеКомпоновкиДанных"),
	                                              СокрЛП(Объект.НачалоПериода),
	                                              Объект.НачалоПериода));
	СтруктураОбъекта.Вставить("КонецПериода"  , ?(ТипЗнч(Объект.КонецПериода) = Тип("ПолеКомпоновкиДанных"),
	                                              СокрЛП(Объект.КонецПериода),
	                                              Объект.КонецПериода));
	СтруктураОбъекта.Вставить("Поле"          , СокрЛП(Объект.Поле));
	СтруктураОбъекта.Вставить("ТипГруппировки", ТипГруппировкиКомпоновкиДанныхВСтроку(Объект.ТипГруппировки));
	СтруктураОбъекта.Вставить("ТипДополнения" , ТипДополненияПериодаКомпоновкиДанныхВСтроку(Объект.ТипДополнения));
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ПолеГруппировкиСКДВСтруктуру()

Процедура ПолеГруппировкиСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если ТипЗнч(Объект) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
		АвтоПолеГруппировкиСКДИзСтруктуры(Объект, СтруктураОбъекта);
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(Объект) = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Использование") Тогда
		Объект.Использование = СтруктураОбъекта.Использование;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("НачалоПериода") Тогда
		Объект.НачалоПериода = ?(ТипЗнч(СтруктураОбъекта.НачалоПериода) = Тип("Строка"),
		                         Новый ПолеКомпоновкиДанных(СтруктураОбъекта.НачалоПериода),
		                         СтруктураОбъекта.НачалоПериода);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("КонецПериода") Тогда
		Объект.НачалоПериода = ?(ТипЗнч(СтруктураОбъекта.КонецПериода) = Тип("Строка"),
		                         Новый ПолеКомпоновкиДанных(СтруктураОбъекта.КонецПериода),
		                         СтруктураОбъекта.КонецПериода);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Поле") Тогда
		Объект.Поле = Новый ПолеКомпоновкиДанных(СтруктураОбъекта.Поле);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ТипГруппировки") Тогда
		Объект.ТипГруппировки = ТипГруппировкиКомпоновкиДанных[СтруктураОбъекта.ТипГруппировки];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ТипДополнения") Тогда
		Объект.ТипДополнения = ТипДополненияПериодаКомпоновкиДанных[СтруктураОбъекта.ТипДополнения];
	КонецЕсли;

КонецПроцедуры // ПолеГруппировкиСКДИзСтруктуры()

Функция ПоляГруппировкиСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ПоляГруппировкиКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Элементы Цикл
		МассивЭлементов.Добавить(ПолеГруппировкиСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Элементы", МассивЭлементов);
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ПоляГруппировкиСКДВСтруктуру()

Процедура ПоляГруппировкиСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ПоляГруппировкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Элементы") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Элементы Цикл
			НовыйЭлемент = Объект.Элементы.Добавить(Тип(ТекЭлемент.Тип));
			ПолеГруппировкиСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПоляГруппировкиСКДИзСтруктуры()

Функция ЗначенияПараметровВыводаГруппировкиСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ (ТипЗнч(Объект) = Тип("ЗначенияПараметровВыводаГруппировкиКомпоновкиДанных")
	 ИЛИ ТипЗнч(Объект) = Тип("ЗначенияПараметровВыводаГруппировкиТаблицыКомпоновкиДанных")
	 ИЛИ ТипЗнч(Объект) = Тип("ЗначенияПараметровВыводаГруппировкиДиаграммыКомпоновкиДанных")) Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Элементы Цикл
		МассивЭлементов.Добавить(ЗначениеПараметраСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Элементы", МассивЭлементов);
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ЗначенияПараметровВыводаГруппировкиСКДВСтруктуру()

Процедура ЗначенияПараметровВыводаГруппировкиСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ (ТипЗнч(Объект) = Тип("ЗначенияПараметровВыводаГруппировкиКомпоновкиДанных")
	 ИЛИ ТипЗнч(Объект) = Тип("ЗначенияПараметровВыводаГруппировкиТаблицыКомпоновкиДанных")
	 ИЛИ ТипЗнч(Объект) = Тип("ЗначенияПараметровВыводаГруппировкиДиаграммыКомпоновкиДанных")) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Элементы") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Элементы Цикл
			НовыйЭлемент = Объект.Элементы.Добавить();
			ЗначениеПараметраСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗначенияПараметровВыводаГруппировкиСКДИзСтруктуры()

Функция ЭлементУсловногоОформленияСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Использование", Объект.Использование);
	
	СтруктураОбъекта.Вставить("ИдентификаторПользовательскойНастройки",
	                          Объект.ИдентификаторПользовательскойНастройки);
	СтруктураОбъекта.Вставить("ПредставлениеПользовательскойНастройки",
	                          Объект.ПредставлениеПользовательскойНастройки);
	СтруктураОбъекта.Вставить("РежимОтображения",
	                          РежимОтображенияЭлементаНастройкиКомпоновкиДанныхВСтроку(Объект.РежимОтображения));

	СтруктураОбъекта.Вставить("ИспользоватьВГруппировке",
	                          ИспользованиеУсловногоОформленияКомпоновкиДанныхВСтроку(Объект.ИспользоватьВГруппировке));
	СтруктураОбъекта.Вставить("ИспользоватьВЗаголовке",
	                          ИспользованиеУсловногоОформленияКомпоновкиДанныхВСтроку(Объект.ИспользоватьВЗаголовке));
	СтруктураОбъекта.Вставить("ИспользоватьВЗаголовкеПолей",
	                          ИспользованиеУсловногоОформленияКомпоновкиДанныхВСтроку(Объект.ИспользоватьВЗаголовкеПолей));
	СтруктураОбъекта.Вставить("ИспользоватьВИерархическойГруппировке",
	                          ИспользованиеУсловногоОформленияКомпоновкиДанныхВСтроку(Объект.ИспользоватьВИерархическойГруппировке));
	СтруктураОбъекта.Вставить("ИспользоватьВОбщемИтоге",
	                          ИспользованиеУсловногоОформленияКомпоновкиДанныхВСтроку(Объект.ИспользоватьВОбщемИтоге));
	СтруктураОбъекта.Вставить("ИспользоватьВОтборе",
	                          ИспользованиеУсловногоОформленияКомпоновкиДанныхВСтроку(Объект.ИспользоватьВОтборе));
	СтруктураОбъекта.Вставить("ИспользоватьВПараметрах",
	                          ИспользованиеУсловногоОформленияКомпоновкиДанныхВСтроку(Объект.ИспользоватьВПараметрах));

	СтруктураОбъекта.Вставить("Отбор"     , ОтборСКДВСтруктуру(Объект.Отбор));
	СтруктураОбъекта.Вставить("Оформление", ОформлениеСКДВСтруктуру(Объект.Оформление));
	СтруктураОбъекта.Вставить("Поля"      , ОформляемыеПоляСКДВСтруктуру(Объект.Поля));
 
	СтруктураОбъекта.Вставить("Представление", Объект.Представление);

	Возврат СтруктураОбъекта;
	
КонецФункции // ЭлементУсловногоОформленияСКДВСтруктуру()

Процедура ЭлементУсловногоОформленияСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Использование") Тогда
		Объект.Использование = СтруктураОбъекта.Использование;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ИдентификаторПользовательскойНастройки") Тогда
		Объект.ИдентификаторПользовательскойНастройки = СтруктураОбъекта.ИдентификаторПользовательскойНастройки;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПредставлениеПользовательскойНастройки") Тогда
		Объект.ПредставлениеПользовательскойНастройки = СтруктураОбъекта.ПредставлениеПользовательскойНастройки;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("РежимОтображения") Тогда
		Объект.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных[СтруктураОбъекта.РежимОтображения];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ИспользоватьВГруппировке") Тогда
		Объект.ИспользоватьВГруппировке =
			ИспользованиеУсловногоОформленияКомпоновкиДанных[СтруктураОбъекта.ИспользоватьВГруппировке];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ИспользоватьВЗаголовке") Тогда
		Объект.ИспользоватьВЗаголовке =
			ИспользованиеУсловногоОформленияКомпоновкиДанных[СтруктураОбъекта.ИспользоватьВЗаголовке];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ИспользоватьВЗаголовкеПолей") Тогда
		Объект.ИспользоватьВЗаголовкеПолей =
			ИспользованиеУсловногоОформленияКомпоновкиДанных[СтруктураОбъекта.ИспользоватьВЗаголовкеПолей];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ИспользоватьВИерархическойГруппировке") Тогда
		Объект.ИспользоватьВИерархическойГруппировке =
			ИспользованиеУсловногоОформленияКомпоновкиДанных[СтруктураОбъекта.ИспользоватьВИерархическойГруппировке];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ИспользоватьВОбщемИтоге") Тогда
		Объект.ИспользоватьВОбщемИтоге =
			ИспользованиеУсловногоОформленияКомпоновкиДанных[СтруктураОбъекта.ИспользоватьВОбщемИтоге];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ИспользоватьВОтборе") Тогда
		Объект.ИспользоватьВОтборе =
			ИспользованиеУсловногоОформленияКомпоновкиДанных[СтруктураОбъекта.ИспользоватьВОтборе];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ИспользоватьВПараметрах") Тогда
		Объект.ИспользоватьВПараметрах =
			ИспользованиеУсловногоОформленияКомпоновкиДанных[СтруктураОбъекта.ИспользоватьВПараметрах];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Отбор") Тогда
		ОтборСКДИзСтруктуры(Объект, СтруктураОбъекта);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Оформление") Тогда
		ОформлениеСКДИзСтруктуры(Объект, СтруктураОбъекта);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Поля") Тогда
		ОформляемыеПоляСКДИзСтруктуры(Объект, СтруктураОбъекта);
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Представление") Тогда
		Объект.Представление = СтруктураОбъекта.Представление;
	КонецЕсли;

КонецПроцедуры // ЭлементУсловногоОформленияСКДИзСтруктуры()

Функция УсловноеОформлениеСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("УсловноеОформлениеКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("ИдентификаторПользовательскойНастройки",
	                          Объект.ИдентификаторПользовательскойНастройки);
	СтруктураОбъекта.Вставить("ПредставлениеПользовательскойНастройки",
	                          Объект.ПредставлениеПользовательскойНастройки);
	СтруктураОбъекта.Вставить("РежимОтображения",
	                          РежимОтображенияЭлементаНастройкиКомпоновкиДанныхВСтроку(Объект.РежимОтображения));

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Элементы Цикл
		МассивЭлементов.Добавить(ЭлементУсловногоОформленияСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Элементы", МассивЭлементов);
	
	Возврат СтруктураОбъекта;
	
КонецФункции // УсловноеОформлениеСКДВСтруктуру()

Процедура УсловноеОформлениеСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("УсловноеОформлениеКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ИдентификаторПользовательскойНастройки") Тогда
		Объект.ИдентификаторПользовательскойНастройки = СтруктураОбъекта.ИдентификаторПользовательскойНастройки;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("ПредставлениеПользовательскойНастройки") Тогда
		Объект.ПредставлениеПользовательскойНастройки = СтруктураОбъекта.ПредставлениеПользовательскойНастройки;
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("РежимОтображения") Тогда
		Объект.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных[СтруктураОбъекта.РежимОтображения];
	КонецЕсли;

	Если СтруктураОбъекта.Свойство("Элементы") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Элементы Цикл
			НовыйЭлемент = Объект.Элементы.Добавить();
			ЭлементУсловногоОформленияСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // УсловноеОформлениеСКДИзСтруктуры()

Функция ОформляемоеПолеСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ОформляемоеПолеКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	СтруктураОбъекта.Вставить("Использование", Объект.Использование);
	СтруктураОбъекта.Вставить("Поле"         , СокрЛП(Объект.Поле));
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ОформляемоеПолеСКДВСтруктуру()

Процедура ОформляемоеПолеСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ОформляемоеПолеКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Использование") Тогда
		Объект.Использование = СтруктураОбъекта.Использование;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Поле") Тогда
		Объект.Поле = Новый ПолеКомпоновкиДанных(СтруктураОбъекта.Поле);
	КонецЕсли;
	
КонецПроцедуры // ОформляемоеПолеСКДИзСтруктуры()

Функция ОформляемыеПоляСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ОформляемыеПоляКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Элементы Цикл
		МассивЭлементов.Добавить(ОформляемоеПолеСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Элементы", МассивЭлементов);
	
	Возврат СтруктураОбъекта;
	
КонецФункции // ОформляемыеПоляСКДВСтруктуру()

Процедура ОформляемыеПоляСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ОформляемыеПоляКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Элементы") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Элементы Цикл
			НовыйЭлемент = Объект.Элементы.Добавить();
			ОформляемоеПолеСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОформляемыеПоляСКДИзСтруктуры()

Функция ДоступныйПараметрСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ДоступныйПараметрКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	Возврат СтруктураОбъекта;
	
КонецФункции // ДоступныйПараметрСКДВСтруктуру()

Процедура ДоступныйПараметрСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ДоступныйПараметрКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ДоступныйПараметрСКДИзСтруктуры()

Функция ДоступныеПараметрыСКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если НЕ ТипЗнч(Объект) = Тип("ДоступныеПараметрыКомпоновкиДанных") Тогда
		Возврат СтруктураОбъекта;
	КонецЕсли;

	Возврат СтруктураОбъекта;
	
КонецФункции // ДоступныеПараметрыСКДВСтруктуру()

Процедура ДоступныеПараметрыСКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("ДоступныеПараметрыКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ДоступныеПараметрыСКДИзСтруктуры()

Функция СКДВСтруктуру(Объект) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.ВариантыНастроек Цикл
		МассивЭлементов.Добавить(ВариантНастроекСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("ВариантыНастроек", МассивЭлементов);
	
	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.ВложенныеСхемыКомпоновкиДанных Цикл
		МассивЭлементов.Добавить(ВложеннаяСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("ВложенныеСхемыКомпоновкиДанных", МассивЭлементов);
	
	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.ВычисляемыеПоля Цикл
		МассивЭлементов.Добавить(ВычисляемоеПолеСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("ВычисляемыеПоля", МассивЭлементов);
	
	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.ИсточникиДанных Цикл
		МассивЭлементов.Добавить(ИсточникДанныхСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("ИсточникиДанных", МассивЭлементов);
	
	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Макеты Цикл
		МассивЭлементов.Добавить(МакетСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Макеты", МассивЭлементов);
	
	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.МакетыГруппировок Цикл
		МассивЭлементов.Добавить(МакетГруппировкиСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("МакетыГруппировок", МассивЭлементов);
	
	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.МакетыЗаголовковГруппировок Цикл
		МассивЭлементов.Добавить(МакетГруппировкиСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("МакетыЗаголовковГруппировок", МассивЭлементов);
	
	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.МакетыПолей Цикл
		МассивЭлементов.Добавить(МакетПоляСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("МакетыПолей", МассивЭлементов);
	
	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.МакетыПолейИтога Цикл
		МассивЭлементов.Добавить(МакетПолейИтогаСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("МакетыПолейИтога", МассивЭлементов);
	
	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.НаборыДанных Цикл
		МассивЭлементов.Добавить(НаборДанныхСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("НаборыДанных", МассивЭлементов);
	
	СтруктураОбъекта.Вставить("НастройкиПоУмолчанию", НастройкиСКДВСтруктуру(Объект.НастройкиПоУмолчанию));

	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.Параметры Цикл
		МассивЭлементов.Добавить(ПараметрСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("Параметры", МассивЭлементов);
	
	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.ПоляИтога Цикл
		МассивЭлементов.Добавить(ПолеИтогаСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("ПоляИтога", МассивЭлементов);
	
	МассивЭлементов = Новый Массив();
	Для Каждого ТекЭлемент Из Объект.СвязиНаборовДанных Цикл
		МассивЭлементов.Добавить(СвязьНаборовДанныхСКДВСтруктуру(ТекЭлемент));
	КонецЦикла;
	СтруктураОбъекта.Вставить("СвязиНаборовДанных", МассивЭлементов);
	
	Возврат СтруктураОбъекта;
	
КонецФункции // СКДВСтруктуру()

Процедура СКДИзСтруктуры(Объект, СтруктураОбъекта) Экспорт
	
	Если НЕ ТипЗнч(Объект) = Тип("СхемаКомпоновкиДанных") Тогда
		Объект = Новый СхемаКомпоновкиДанных();
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ВариантыНастроек") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.ВариантыНастроек Цикл
			НовыйЭлемент = Объект.ВариантыНастроек.Добавить();
			ВариантНастроекСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ВложенныеСхемыКомпоновкиДанных") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.ВложенныеСхемыКомпоновкиДанных Цикл
			НовыйЭлемент = Объект.ВложенныеСхемыКомпоновкиДанных.Добавить();
			ВложеннаяСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ВычисляемыеПоля") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.ВычисляемыеПоля Цикл
			НовыйЭлемент = Объект.ВычисляемыеПоля.Добавить();
			ВычисляемоеПолеСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ИсточникиДанных") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.ИсточникиДанных Цикл
			НовыйЭлемент = Объект.ИсточникиДанных.Добавить();
			ИсточникДанныхСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Макеты") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Макеты Цикл
			НовыйЭлемент = Объект.Макеты.Добавить();
			МакетСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("МакетыГруппировок") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.МакетыГруппировок Цикл
			НовыйЭлемент = Объект.МакетыГруппировок.Добавить();
			МакетГруппировкиСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("МакетыЗаголовковГруппировок") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.МакетыЗаголовковГруппировок Цикл
			НовыйЭлемент = Объект.МакетыЗаголовковГруппировок.Добавить();
			МакетГруппировкиСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("МакетыПолей") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.МакетыПолей Цикл
			НовыйЭлемент = Объект.МакетыПолей.Добавить();
			МакетПоляСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("МакетыПолейИтога") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.МакетыПолейИтога Цикл
			НовыйЭлемент = Объект.МакетыПолейИтога.Добавить();
			МакетПолейИтогаСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("НаборыДанных") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.НаборыДанных Цикл
			НовыйЭлемент = Объект.НаборыДанных.Добавить(Тип(ТекЭлемент.Тип));
			НаборДанныхСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("НастройкиПоУмолчанию") Тогда
		НастройкиСКДИзСтруктуры(Объект.НастройкиПоУмолчанию, СтруктураОбъекта.НастройкиПоУмолчанию);
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Параметры") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.Параметры Цикл
			НовыйЭлемент = Объект.Параметры.Добавить();
			ПараметрСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("ПоляИтога") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.ПоляИтога Цикл
			НовыйЭлемент = Объект.ПоляИтога.Добавить();
			ПолеИтогаСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("СвязиНаборовДанных") Тогда
		Для Каждого ТекЭлемент Из СтруктураОбъекта.СвязиНаборовДанных Цикл
			НовыйЭлемент = Объект.СвязиНаборовДанных.Добавить();
			СвязьНаборовДанныхСКДИзСтруктуры(НовыйЭлемент, ТекЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // СКДИзСтруктуры()

#КонецОбласти // ПреобразованияСКД